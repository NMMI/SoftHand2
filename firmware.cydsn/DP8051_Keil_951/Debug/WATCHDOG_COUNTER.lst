C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE WATCHDOG_COUNTER
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\WATCHDOG_COUNTER.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\WATCHDOG_COUNTER.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB 
                    -WL(2) PR(.\DP8051_Keil_951\Debug/WATCHDOG_COUNTER.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\WATCHDOG_COUNTER.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: WATCHDOG_COUNTER.c  
   3          * Version 3.0
   4          *
   5          *  Description:
   6          *     The Counter component consists of a 8, 16, 24 or 32-bit counter with
   7          *     a selectable period between 2 and 2^Width - 1.  
   8          *
   9          *   Note:
  10          *     None
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions, 
  15          * disclaimers, and limitations in the end user license agreement accompanying 
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "WATCHDOG_COUNTER.h"
  20          
  21          uint8 WATCHDOG_COUNTER_initVar = 0u;
  22          
  23          
  24          /*******************************************************************************
  25          * Function Name: WATCHDOG_COUNTER_Init
  26          ********************************************************************************
  27          * Summary:
  28          *     Initialize to the schematic state
  29          * 
  30          * Parameters:  
  31          *  void  
  32          *
  33          * Return: 
  34          *  void
  35          *
  36          *******************************************************************************/
  37          void WATCHDOG_COUNTER_Init(void) 
  38          {
  39   1              #if (!WATCHDOG_COUNTER_UsingFixedFunction && !WATCHDOG_COUNTER_ControlRegRemoved)
                          uint8 ctrl;
                      #endif /* (!WATCHDOG_COUNTER_UsingFixedFunction && !WATCHDOG_COUNTER_ControlRegRemoved) */
  42   1              
  43   1              #if(!WATCHDOG_COUNTER_UsingFixedFunction) 
                          /* Interrupt State Backup for Critical Region*/
                          uint8 WATCHDOG_COUNTER_interruptState;
                      #endif /* (!WATCHDOG_COUNTER_UsingFixedFunction) */
  47   1              
  48   1              #if (WATCHDOG_COUNTER_UsingFixedFunction)
  49   1                  /* Clear all bits but the enable bit (if it's already set for Timer operation */
  50   1                  WATCHDOG_COUNTER_CONTROL &= WATCHDOG_COUNTER_CTRL_ENABLE;
  51   1                  
  52   1                  /* Clear the mode bits for continuous run mode */
  53   1                  #if (CY_PSOC5A)
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 2   

                              WATCHDOG_COUNTER_CONTROL2 &= ((uint8)(~WATCHDOG_COUNTER_CTRL_MODE_MASK));
                          #endif /* (CY_PSOC5A) */
  56   1                  #if (CY_PSOC3 || CY_PSOC5LP)
  57   1                      WATCHDOG_COUNTER_CONTROL3 &= ((uint8)(~WATCHDOG_COUNTER_CTRL_MODE_MASK));                
  58   1                  #endif /* (CY_PSOC3 || CY_PSOC5LP) */
  59   1                  /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  60   1                  #if (WATCHDOG_COUNTER_RunModeUsed != 0x0u)
                              /* Set 3rd bit of Control register to enable one shot mode */
                              WATCHDOG_COUNTER_CONTROL |= WATCHDOG_COUNTER_ONESHOT;
                          #endif /* (WATCHDOG_COUNTER_RunModeUsed != 0x0u) */
  64   1                  
  65   1                  /* Set the IRQ to use the status register interrupts */
  66   1                  WATCHDOG_COUNTER_CONTROL2 |= WATCHDOG_COUNTER_CTRL2_IRQ_SEL;
  67   1                  
  68   1                  /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
  69   1                  WATCHDOG_COUNTER_RT1 &= ((uint8)(~WATCHDOG_COUNTER_RT1_MASK));
  70   1                  WATCHDOG_COUNTER_RT1 |= WATCHDOG_COUNTER_SYNC;     
  71   1                          
  72   1                  /*Enable DSI Sync all all inputs of the Timer*/
  73   1                  WATCHDOG_COUNTER_RT1 &= ((uint8)(~WATCHDOG_COUNTER_SYNCDSI_MASK));
  74   1                  WATCHDOG_COUNTER_RT1 |= WATCHDOG_COUNTER_SYNCDSI_EN;
  75   1      
  76   1              #else
                          #if(!WATCHDOG_COUNTER_ControlRegRemoved)
                          /* Set the default compare mode defined in the parameter */
                          ctrl = WATCHDOG_COUNTER_CONTROL & ((uint8)(~WATCHDOG_COUNTER_CTRL_CMPMODE_MASK));
                          WATCHDOG_COUNTER_CONTROL = ctrl | WATCHDOG_COUNTER_DEFAULT_COMPARE_MODE;
                          
                          /* Set the default capture mode defined in the parameter */
                          ctrl = WATCHDOG_COUNTER_CONTROL & ((uint8)(~WATCHDOG_COUNTER_CTRL_CAPMODE_MASK));
                          
                          #if( 0 != WATCHDOG_COUNTER_CAPTURE_MODE_CONF)
                              WATCHDOG_COUNTER_CONTROL = ctrl | WATCHDOG_COUNTER_DEFAULT_CAPTURE_MODE;
                          #else
                              WATCHDOG_COUNTER_CONTROL = ctrl;
                          #endif /* 0 != WATCHDOG_COUNTER_CAPTURE_MODE */ 
                          
                          #endif /* (!WATCHDOG_COUNTER_ControlRegRemoved) */
                      #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
  93   1              
  94   1              /* Clear all data in the FIFO's */
  95   1              #if (!WATCHDOG_COUNTER_UsingFixedFunction)
                          WATCHDOG_COUNTER_ClearFIFO();
                      #endif /* (!WATCHDOG_COUNTER_UsingFixedFunction) */
  98   1              
  99   1              /* Set Initial values from Configuration */
 100   1              WATCHDOG_COUNTER_WritePeriod(WATCHDOG_COUNTER_INIT_PERIOD_VALUE);
 101   1              #if (!(WATCHDOG_COUNTER_UsingFixedFunction && (CY_PSOC5A)))
 102   1                  WATCHDOG_COUNTER_WriteCounter(WATCHDOG_COUNTER_INIT_COUNTER_VALUE);
 103   1              #endif /* (!(WATCHDOG_COUNTER_UsingFixedFunction && (CY_PSOC5A))) */
 104   1              WATCHDOG_COUNTER_SetInterruptMode(WATCHDOG_COUNTER_INIT_INTERRUPTS_MASK);
 105   1              
 106   1              #if (!WATCHDOG_COUNTER_UsingFixedFunction)
                          /* Read the status register to clear the unwanted interrupts */
                          (void)WATCHDOG_COUNTER_ReadStatusRegister();
                          /* Set the compare value (only available to non-fixed function implementation */
                          WATCHDOG_COUNTER_WriteCompare(WATCHDOG_COUNTER_INIT_COMPARE_VALUE);
                          /* Use the interrupt output of the status register for IRQ output */
                          
                          /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                          /* Enter Critical Region*/
                          WATCHDOG_COUNTER_interruptState = CyEnterCriticalSection();
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 3   

                          
                          WATCHDOG_COUNTER_STATUS_AUX_CTRL |= WATCHDOG_COUNTER_STATUS_ACTL_INT_EN_MASK;
                          
                          /* Exit Critical Region*/
                          CyExitCriticalSection(WATCHDOG_COUNTER_interruptState);
                          
                      #endif /* (!WATCHDOG_COUNTER_UsingFixedFunction) */
 123   1      }
 124          
 125          
 126          /*******************************************************************************
 127          * Function Name: WATCHDOG_COUNTER_Enable
 128          ********************************************************************************
 129          * Summary:
 130          *     Enable the Counter
 131          * 
 132          * Parameters:  
 133          *  void  
 134          *
 135          * Return: 
 136          *  void
 137          *
 138          * Side Effects: 
 139          *   If the Enable mode is set to Hardware only then this function has no effect 
 140          *   on the operation of the counter.
 141          *
 142          *******************************************************************************/
 143          void WATCHDOG_COUNTER_Enable(void) 
 144          {
 145   1          /* Globally Enable the Fixed Function Block chosen */
 146   1          #if (WATCHDOG_COUNTER_UsingFixedFunction)
 147   1              WATCHDOG_COUNTER_GLOBAL_ENABLE |= WATCHDOG_COUNTER_BLOCK_EN_MASK;
 148   1              WATCHDOG_COUNTER_GLOBAL_STBY_ENABLE |= WATCHDOG_COUNTER_BLOCK_STBY_EN_MASK;
 149   1          #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */  
 150   1              
 151   1          /* Enable the counter from the control register  */
 152   1          /* If Fixed Function then make sure Mode is set correctly */
 153   1          /* else make sure reset is clear */
 154   1          #if(!WATCHDOG_COUNTER_ControlRegRemoved || WATCHDOG_COUNTER_UsingFixedFunction)
 155   1              WATCHDOG_COUNTER_CONTROL |= WATCHDOG_COUNTER_CTRL_ENABLE;                
 156   1          #endif /* (!WATCHDOG_COUNTER_ControlRegRemoved || WATCHDOG_COUNTER_UsingFixedFunction) */
 157   1          
 158   1      }
 159          
 160          
 161          /*******************************************************************************
 162          * Function Name: WATCHDOG_COUNTER_Start
 163          ********************************************************************************
 164          * Summary:
 165          *  Enables the counter for operation 
 166          *
 167          * Parameters:  
 168          *  void  
 169          *
 170          * Return: 
 171          *  void
 172          *
 173          * Global variables:
 174          *  WATCHDOG_COUNTER_initVar: Is modified when this function is called for the  
 175          *   first time. Is used to ensure that initialization happens only once.
 176          *
 177          *******************************************************************************/
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 4   

 178          void WATCHDOG_COUNTER_Start(void) 
 179          {
 180   1          if(WATCHDOG_COUNTER_initVar == 0u)
 181   1          {
 182   2              WATCHDOG_COUNTER_Init();
 183   2              
 184   2              WATCHDOG_COUNTER_initVar = 1u; /* Clear this bit for Initialization */        
 185   2          }
 186   1          
 187   1          /* Enable the Counter */
 188   1          WATCHDOG_COUNTER_Enable();        
 189   1      }
 190          
 191          
 192          /*******************************************************************************
 193          * Function Name: WATCHDOG_COUNTER_Stop
 194          ********************************************************************************
 195          * Summary:
 196          * Halts the counter, but does not change any modes or disable interrupts.
 197          *
 198          * Parameters:  
 199          *  void  
 200          *
 201          * Return: 
 202          *  void
 203          *
 204          * Side Effects: If the Enable mode is set to Hardware only then this function
 205          *               has no effect on the operation of the counter.
 206          *
 207          *******************************************************************************/
 208          void WATCHDOG_COUNTER_Stop(void) 
 209          {
 210   1          /* Disable Counter */
 211   1          #if(!WATCHDOG_COUNTER_ControlRegRemoved || WATCHDOG_COUNTER_UsingFixedFunction)
 212   1              WATCHDOG_COUNTER_CONTROL &= ((uint8)(~WATCHDOG_COUNTER_CTRL_ENABLE));        
 213   1          #endif /* (!WATCHDOG_COUNTER_ControlRegRemoved || WATCHDOG_COUNTER_UsingFixedFunction) */
 214   1          
 215   1          /* Globally disable the Fixed Function Block chosen */
 216   1          #if (WATCHDOG_COUNTER_UsingFixedFunction)
 217   1              WATCHDOG_COUNTER_GLOBAL_ENABLE &= ((uint8)(~WATCHDOG_COUNTER_BLOCK_EN_MASK));
 218   1              WATCHDOG_COUNTER_GLOBAL_STBY_ENABLE &= ((uint8)(~WATCHDOG_COUNTER_BLOCK_STBY_EN_MASK));
 219   1          #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
 220   1      }
 221          
 222          
 223          /*******************************************************************************
 224          * Function Name: WATCHDOG_COUNTER_SetInterruptMode
 225          ********************************************************************************
 226          * Summary:
 227          * Configures which interrupt sources are enabled to generate the final interrupt
 228          *
 229          * Parameters:  
 230          *  InterruptsMask: This parameter is an or'd collection of the status bits
 231          *                   which will be allowed to generate the counters interrupt.   
 232          *
 233          * Return: 
 234          *  void
 235          *
 236          *******************************************************************************/
 237          void WATCHDOG_COUNTER_SetInterruptMode(uint8 interruptsMask) 
 238          {
 239   1          WATCHDOG_COUNTER_STATUS_MASK = interruptsMask;
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 5   

 240   1      }
 241          
 242          
 243          /*******************************************************************************
 244          * Function Name: WATCHDOG_COUNTER_ReadStatusRegister
 245          ********************************************************************************
 246          * Summary:
 247          *   Reads the status register and returns it's state. This function should use
 248          *       defined types for the bit-field information as the bits in this
 249          *       register may be permuteable.
 250          *
 251          * Parameters:  
 252          *  void
 253          *
 254          * Return: 
 255          *  (uint8) The contents of the status register
 256          *
 257          * Side Effects:
 258          *   Status register bits may be clear on read. 
 259          *
 260          *******************************************************************************/
 261          uint8   WATCHDOG_COUNTER_ReadStatusRegister(void) 
 262          {
 263   1          return WATCHDOG_COUNTER_STATUS;
 264   1      }
 265          
 266          
 267          #if(!WATCHDOG_COUNTER_ControlRegRemoved)
 268          /*******************************************************************************
 269          * Function Name: WATCHDOG_COUNTER_ReadControlRegister
 270          ********************************************************************************
 271          * Summary:
 272          *   Reads the control register and returns it's state. This function should use
 273          *       defined types for the bit-field information as the bits in this
 274          *       register may be permuteable.
 275          *
 276          * Parameters:  
 277          *  void
 278          *
 279          * Return: 
 280          *  (uint8) The contents of the control register
 281          *
 282          *******************************************************************************/
 283          uint8   WATCHDOG_COUNTER_ReadControlRegister(void) 
 284          {
 285   1          return WATCHDOG_COUNTER_CONTROL;
 286   1      }
 287          
 288          
 289          /*******************************************************************************
 290          * Function Name: WATCHDOG_COUNTER_WriteControlRegister
 291          ********************************************************************************
 292          * Summary:
 293          *   Sets the bit-field of the control register.  This function should use
 294          *       defined types for the bit-field information as the bits in this
 295          *       register may be permuteable.
 296          *
 297          * Parameters:  
 298          *  void
 299          *
 300          * Return: 
 301          *  (uint8) The contents of the control register
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 6   

 302          *
 303          *******************************************************************************/
 304          void    WATCHDOG_COUNTER_WriteControlRegister(uint8 control) 
 305          {
 306   1          WATCHDOG_COUNTER_CONTROL = control;
 307   1      }
 308          
 309          #endif  /* (!WATCHDOG_COUNTER_ControlRegRemoved) */
 310          
 311          
 312          #if (!(WATCHDOG_COUNTER_UsingFixedFunction && (CY_PSOC5A)))
 313          /*******************************************************************************
 314          * Function Name: WATCHDOG_COUNTER_WriteCounter
 315          ********************************************************************************
 316          * Summary:
 317          *   This funtion is used to set the counter to a specific value
 318          *
 319          * Parameters:  
 320          *  counter:  New counter value. 
 321          *
 322          * Return: 
 323          *  void 
 324          *
 325          *******************************************************************************/
 326          void WATCHDOG_COUNTER_WriteCounter(uint8 counter) \
 327                                             
 328          {
 329   1          #if(WATCHDOG_COUNTER_UsingFixedFunction)
 330   1              /* assert if block is already enabled */
 331   1              CYASSERT (0u == (WATCHDOG_COUNTER_GLOBAL_ENABLE & WATCHDOG_COUNTER_BLOCK_EN_MASK));
 332   1              /* If block is disabled, enable it and then write the counter */
 333   1              WATCHDOG_COUNTER_GLOBAL_ENABLE |= WATCHDOG_COUNTER_BLOCK_EN_MASK;
 334   1              CY_SET_REG16(WATCHDOG_COUNTER_COUNTER_LSB_PTR, (uint16)counter);
 335   1              WATCHDOG_COUNTER_GLOBAL_ENABLE &= ((uint8)(~WATCHDOG_COUNTER_BLOCK_EN_MASK));
 336   1          #else
                      CY_SET_REG8(WATCHDOG_COUNTER_COUNTER_LSB_PTR, counter);
                  #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
 339   1      }
 340          #endif /* (!(WATCHDOG_COUNTER_UsingFixedFunction && (CY_PSOC5A))) */
 341          
 342          
 343          /*******************************************************************************
 344          * Function Name: WATCHDOG_COUNTER_ReadCounter
 345          ********************************************************************************
 346          * Summary:
 347          * Returns the current value of the counter.  It doesn't matter
 348          * if the counter is enabled or running.
 349          *
 350          * Parameters:  
 351          *  void:  
 352          *
 353          * Return: 
 354          *  (uint8) The present value of the counter.
 355          *
 356          *******************************************************************************/
 357          uint8 WATCHDOG_COUNTER_ReadCounter(void) 
 358          {
 359   1          /* Force capture by reading Accumulator */
 360   1          /* Must first do a software capture to be able to read the counter */
 361   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 362   1          #if(WATCHDOG_COUNTER_UsingFixedFunction)
 363   1                      (void)CY_GET_REG16(WATCHDOG_COUNTER_COUNTER_LSB_PTR);
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 7   

 364   1              #else
                              (void)CY_GET_REG8(WATCHDOG_COUNTER_COUNTER_LSB_PTR_8BIT);
                      #endif/* (WATCHDOG_COUNTER_UsingFixedFunction) */
 367   1          
 368   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 369   1          #if(WATCHDOG_COUNTER_UsingFixedFunction)
 370   1              return ((uint8)CY_GET_REG16(WATCHDOG_COUNTER_STATICCOUNT_LSB_PTR));
 371   1          #else
                      return (CY_GET_REG8(WATCHDOG_COUNTER_STATICCOUNT_LSB_PTR));
                  #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
 374   1      }
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: WATCHDOG_COUNTER_ReadCapture
 379          ********************************************************************************
 380          * Summary:
 381          *   This function returns the last value captured.
 382          *
 383          * Parameters:  
 384          *  void
 385          *
 386          * Return: 
 387          *  (uint8) Present Capture value.
 388          *
 389          *******************************************************************************/
 390          uint8 WATCHDOG_COUNTER_ReadCapture(void) 
 391          {
 392   1          #if(WATCHDOG_COUNTER_UsingFixedFunction)
 393   1              return ((uint8)CY_GET_REG16(WATCHDOG_COUNTER_STATICCOUNT_LSB_PTR));
 394   1          #else
                      return (CY_GET_REG8(WATCHDOG_COUNTER_STATICCOUNT_LSB_PTR));
                  #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
 397   1      }
 398          
 399          
 400          /*******************************************************************************
 401          * Function Name: WATCHDOG_COUNTER_WritePeriod
 402          ********************************************************************************
 403          * Summary:
 404          * Changes the period of the counter.  The new period 
 405          * will be loaded the next time terminal count is detected.
 406          *
 407          * Parameters:  
 408          *  period: (uint8) A value of 0 will result in
 409          *         the counter remaining at zero.  
 410          *
 411          * Return: 
 412          *  void
 413          *
 414          *******************************************************************************/
 415          void WATCHDOG_COUNTER_WritePeriod(uint8 period) 
 416          {
 417   1          #if(WATCHDOG_COUNTER_UsingFixedFunction)
 418   1              CY_SET_REG16(WATCHDOG_COUNTER_PERIOD_LSB_PTR,(uint16)period);
 419   1          #else
                      CY_SET_REG8(WATCHDOG_COUNTER_PERIOD_LSB_PTR, period);
                  #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
 422   1      }
 423          
 424          
 425          /*******************************************************************************
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 8   

 426          * Function Name: WATCHDOG_COUNTER_ReadPeriod
 427          ********************************************************************************
 428          * Summary:
 429          * Reads the current period value without affecting counter operation.
 430          *
 431          * Parameters:  
 432          *  void:  
 433          *
 434          * Return: 
 435          *  (uint8) Present period value.
 436          *
 437          *******************************************************************************/
 438          uint8 WATCHDOG_COUNTER_ReadPeriod(void) 
 439          {
 440   1          #if(WATCHDOG_COUNTER_UsingFixedFunction)
 441   1              return ((uint8)CY_GET_REG16(WATCHDOG_COUNTER_PERIOD_LSB_PTR));
 442   1          #else
                      return (CY_GET_REG8(WATCHDOG_COUNTER_PERIOD_LSB_PTR));
                  #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
 445   1      }
 446          
 447          
 448          #if (!WATCHDOG_COUNTER_UsingFixedFunction)
              /*******************************************************************************
              * Function Name: WATCHDOG_COUNTER_WriteCompare
              ********************************************************************************
              * Summary:
              * Changes the compare value.  The compare output will 
              * reflect the new value on the next UDB clock.  The compare output will be 
              * driven high when the present counter value compares true based on the 
              * configured compare mode setting. 
              *
              * Parameters:  
              *  Compare:  New compare value. 
              *
              * Return: 
              *  void
              *
              *******************************************************************************/
              void WATCHDOG_COUNTER_WriteCompare(uint8 compare) \
                                                 
              {
                  #if(WATCHDOG_COUNTER_UsingFixedFunction)
                      CY_SET_REG16(WATCHDOG_COUNTER_COMPARE_LSB_PTR, (uint16)compare);
                  #else
                      CY_SET_REG8(WATCHDOG_COUNTER_COMPARE_LSB_PTR, compare);
                  #endif /* (WATCHDOG_COUNTER_UsingFixedFunction) */
              }
              
              
              /*******************************************************************************
              * Function Name: WATCHDOG_COUNTER_ReadCompare
              ********************************************************************************
              * Summary:
              * Returns the compare value.
              *
              * Parameters:  
              *  void:
              *
              * Return: 
              *  (uint8) Present compare value.
              *
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 9   

              *******************************************************************************/
              uint8 WATCHDOG_COUNTER_ReadCompare(void) 
              {
                  return (CY_GET_REG8(WATCHDOG_COUNTER_COMPARE_LSB_PTR));
              }
              
              
              #if (WATCHDOG_COUNTER_COMPARE_MODE_SOFTWARE)
              /*******************************************************************************
              * Function Name: WATCHDOG_COUNTER_SetCompareMode
              ********************************************************************************
              * Summary:
              *  Sets the software controlled Compare Mode.
              *
              * Parameters:
              *  compareMode:  Compare Mode Enumerated Type.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void WATCHDOG_COUNTER_SetCompareMode(uint8 compareMode) 
              {
                  /* Clear the compare mode bits in the control register */
                  WATCHDOG_COUNTER_CONTROL &= ((uint8)(~WATCHDOG_COUNTER_CTRL_CMPMODE_MASK));
                  
                  /* Write the new setting */
                  WATCHDOG_COUNTER_CONTROL |= compareMode;
              }
              #endif  /* (WATCHDOG_COUNTER_COMPARE_MODE_SOFTWARE) */
              
              
              #if (WATCHDOG_COUNTER_CAPTURE_MODE_SOFTWARE)
              /*******************************************************************************
              * Function Name: WATCHDOG_COUNTER_SetCaptureMode
              ********************************************************************************
              * Summary:
              *  Sets the software controlled Capture Mode.
              *
              * Parameters:
              *  captureMode:  Capture Mode Enumerated Type.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void WATCHDOG_COUNTER_SetCaptureMode(uint8 captureMode) 
              {
                  /* Clear the capture mode bits in the control register */
                  WATCHDOG_COUNTER_CONTROL &= ((uint8)(~WATCHDOG_COUNTER_CTRL_CAPMODE_MASK));
                  
                  /* Write the new setting */
                  WATCHDOG_COUNTER_CONTROL |= ((uint8)((uint8)captureMode << WATCHDOG_COUNTER_CTRL_CAPMODE0_SHIFT));
              }
              #endif  /* (WATCHDOG_COUNTER_CAPTURE_MODE_SOFTWARE) */
              
              
              /*******************************************************************************
              * Function Name: WATCHDOG_COUNTER_ClearFIFO
              ********************************************************************************
              * Summary:
              *   This function clears all capture data from the capture FIFO
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 10  

              *
              * Parameters:  
              *  void:
              *
              * Return: 
              *  None
              *
              *******************************************************************************/
              void WATCHDOG_COUNTER_ClearFIFO(void) 
              {
              
                  while(0u != (WATCHDOG_COUNTER_ReadStatusRegister() & WATCHDOG_COUNTER_STATUS_FIFONEMP))
                  {
                      (void)WATCHDOG_COUNTER_ReadCapture();
                  }
              
              }
              #endif  /* (!WATCHDOG_COUNTER_UsingFixedFunction) */
 568          
 569          
 570          /* [] END OF FILE */
 571          
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION WATCHDOG_COUNTER_Init (BEGIN)
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 50
0000 904F0C            MOV     DPTR,#04F0CH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
000B 904F0E            MOV     DPTR,#04F0EH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FC              ANL     A,#0FCH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
0016 904F0D            MOV     DPTR,#04F0DH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0021 904F17            MOV     DPTR,#04F17H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 54CF              ANL     A,#0CFH
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
002C 904F17            MOV     DPTR,#04F17H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 4430              ORL     A,#030H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0037 904F17            MOV     DPTR,#04F17H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 54F0              ANL     A,#0F0H
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0042 904F17            MOV     DPTR,#04F17H
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 12  

0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 440F              ORL     A,#0FH
004A FF                MOV     R7,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
004D 7F7F              MOV     R7,#07FH
004F 120000      R     LCALL   _WATCHDOG_COUNTER_WritePeriod
                                           ; SOURCE LINE # 102
0052 7F00              MOV     R7,#00H
0054 120000      R     LCALL   _WATCHDOG_COUNTER_WriteCounter
                                           ; SOURCE LINE # 104
0057 7F08              MOV     R7,#08H
0059 120000      R     LCALL   _WATCHDOG_COUNTER_SetInterruptMode
                                           ; SOURCE LINE # 123
005C 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_Init (END)

             ; FUNCTION WATCHDOG_COUNTER_Enable (BEGIN)
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 147
0000 9043A3            MOV     DPTR,#043A3H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4402              ORL     A,#02H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
000B 9043B3            MOV     DPTR,#043B3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4402              ORL     A,#02H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
0016 904F0C            MOV     DPTR,#04F0CH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0021 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_Enable (END)

             ; FUNCTION WATCHDOG_COUNTER_Start (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0000 900000      R     MOV     DPTR,#WATCHDOG_COUNTER_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 13  

0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0008 120000      R     LCALL   WATCHDOG_COUNTER_Init
                                           ; SOURCE LINE # 184
000B 900000      R     MOV     DPTR,#WATCHDOG_COUNTER_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
0011         ?C0003:
                                           ; SOURCE LINE # 188
0011 120000      R     LCALL   WATCHDOG_COUNTER_Enable
                                           ; SOURCE LINE # 189
0014 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_Start (END)

             ; FUNCTION WATCHDOG_COUNTER_Stop (BEGIN)
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 212
0000 904F0C            MOV     DPTR,#04F0CH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
000B 9043A3            MOV     DPTR,#043A3H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FD              ANL     A,#0FDH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
0016 9043B3            MOV     DPTR,#043B3H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 54FD              ANL     A,#0FDH
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0021 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_Stop (END)

             ; FUNCTION _WATCHDOG_COUNTER_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 237
0000 900000      R     MOV     DPTR,#interruptsMask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0005 900000      R     MOV     DPTR,#interruptsMask
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F0F            MOV     DPTR,#04F0FH
000D EF                MOV     A,R7
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 14  

000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
000F 22                RET     
             ; FUNCTION _WATCHDOG_COUNTER_SetInterruptMode (END)

             ; FUNCTION WATCHDOG_COUNTER_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
0000 904F0F            MOV     DPTR,#04F0FH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 264
0005         ?C0007:
0005 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_ReadStatusRegister (END)

             ; FUNCTION WATCHDOG_COUNTER_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0000 904F0C            MOV     DPTR,#04F0CH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 286
0005         ?C0008:
0005 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_ReadControlRegister (END)

             ; FUNCTION _WATCHDOG_COUNTER_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 304
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0005 900000      R     MOV     DPTR,#control
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 904F0C            MOV     DPTR,#04F0CH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
000F 22                RET     
             ; FUNCTION _WATCHDOG_COUNTER_WriteControlRegister (END)

             ; FUNCTION _WATCHDOG_COUNTER_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 326
0000 900000      R     MOV     DPTR,#counter
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 331
0005 9043A3            MOV     DPTR,#043A3H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5402              ANL     A,#02H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 15  

0012 7003              JNZ     ?C0011
0014 D3                SETB    C
0015 8001              SJMP    ?C0012
0017         ?C0011:
0017 C3                CLR     C
0018         ?C0012:
0018 4005              JC      ?C0010
001A 7F00              MOV     R7,#00H
001C 120000      E     LCALL   _?CyHalt
001F         ?C0010:
                                           ; SOURCE LINE # 333
001F 9043A3            MOV     DPTR,#043A3H
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 4402              ORL     A,#02H
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
002A 7B02              MOV     R3,#02H
002C 7A4F              MOV     R2,#04FH
002E 7912              MOV     R1,#012H
0030 900000      R     MOV     DPTR,#counter
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 FD                MOV     R5,A
0037 7C00              MOV     R4,#00H
0039 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 335
003C 9043A3            MOV     DPTR,#043A3H
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 54FD              ANL     A,#0FDH
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
0047 22                RET     
             ; FUNCTION _WATCHDOG_COUNTER_WriteCounter (END)

             ; FUNCTION WATCHDOG_COUNTER_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 363
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7912              MOV     R1,#012H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 370
0009 7B02              MOV     R3,#02H
000B 7A4F              MOV     R2,#04FH
000D 7914              MOV     R1,#014H
000F 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 374
0012         ?C0014:
0012 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_ReadCounter (END)

             ; FUNCTION WATCHDOG_COUNTER_ReadCapture (BEGIN)
C51 COMPILER V9.51   WATCHDOG_COUNTER                                                      05/11/2016 14:38:14 PAGE 16  

                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 393
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7914              MOV     R1,#014H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 397
0009         ?C0015:
0009 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_ReadCapture (END)

             ; FUNCTION _WATCHDOG_COUNTER_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 415
0000 900000      R     MOV     DPTR,#period
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 418
0005 7B02              MOV     R3,#02H
0007 7A4F              MOV     R2,#04FH
0009 7910              MOV     R1,#010H
000B 900000      R     MOV     DPTR,#period
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 FD                MOV     R5,A
0012 7C00              MOV     R4,#00H
0014 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 422
0017 22                RET     
             ; FUNCTION _WATCHDOG_COUNTER_WritePeriod (END)

             ; FUNCTION WATCHDOG_COUNTER_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 441
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7910              MOV     R1,#010H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 445
0009         ?C0017:
0009 22                RET     
             ; FUNCTION WATCHDOG_COUNTER_ReadPeriod (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    361    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
