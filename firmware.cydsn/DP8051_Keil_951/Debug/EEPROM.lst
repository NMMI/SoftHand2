C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\EEPROM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\EEPROM.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.
                    -\DP8051_Keil_951\Debug/EEPROM.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\EEPROM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: EEPROM.c
   3          * Version 3.0
   4          *
   5          *  Description:
   6          *   Provides the source code to the API for the EEPROM component.
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          #include "EEPROM.h"
  16          
  17          
  18          /*******************************************************************************
  19          * Function Name: EEPROM_Enable
  20          ********************************************************************************
  21          *
  22          * Summary:
  23          *  Enable the EEPROM block. Also reads the temperature and stores it for
  24          *  future writes.
  25          *
  26          * Parameters:
  27          *  None
  28          *
  29          * Return:
  30          *  None
  31          *
  32          *******************************************************************************/
  33          void EEPROM_Enable(void) 
  34          {
  35   1          /* Read temperature value */
  36   1          (void)CySetTemp();
  37   1      
  38   1          /* Start EEPROM block */
  39   1          CyEEPROM_Start();
  40   1      }
  41          
  42          
  43          /*******************************************************************************
  44          * Function Name: EEPROM_Start
  45          ********************************************************************************
  46          *
  47          * Summary:
  48          *  Starts EEPROM.
  49          *
  50          * Parameters:
  51          *  None
  52          *
  53          * Return:
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 2   

  54          *  None
  55          *
  56          *******************************************************************************/
  57          void EEPROM_Start(void) 
  58          {
  59   1          EEPROM_Enable();
  60   1      }
  61          
  62          
  63          /*******************************************************************************
  64          * Function Name: EEPROM_Stop
  65          ********************************************************************************
  66          *
  67          * Summary:
  68          *  Stops and powers down EEPROM.
  69          *
  70          * Parameters:
  71          *  None
  72          *
  73          * Return:
  74          *  None
  75          *
  76          *******************************************************************************/
  77          void EEPROM_Stop (void) 
  78          {
  79   1          /* Stop and power down EEPROM block */
  80   1          CyEEPROM_Stop();
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: EEPROM_WriteByte
  86          ********************************************************************************
  87          *
  88          * Summary:
  89          *  Writes a byte of data to the EEPROM. This function blocks until
  90          *  the function is complete. For a reliable write procedure to occur you should
  91          *  call EEPROM_UpdateTemperature() function if the temperature of the
  92          *  silicon has been changed for more than 10C since the component was started.
  93          *
  94          * Parameters:
  95          *  dataByte:  The byte of data to write to the EEPROM
  96          *  address:   The address of data to be written. The maximum address is dependent
  97          *             on the EEPROM size.
  98          *
  99          * Return:
 100          *  CYRET_SUCCESS, if the operation was successful.
 101          *  CYRET_BAD_PARAM, if the parameter sectorNumber is out of range.
 102          *  CYRET_LOCKED, if the SPC is being used.
 103          *  CYRET_UNKNOWN, if there was an SPC error.
 104          *
 105          *******************************************************************************/
 106          cystatus EEPROM_WriteByte(uint8 dataByte, uint16 address) 
 107          {
 108   1          cystatus status;
 109   1          uint16 rowNumber;
 110   1          uint16 byteNumber;
 111   1          
 112   1          CySpcStart();
 113   1      
 114   1          if (address < CY_EEPROM_SIZE)
 115   1          {
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 3   

 116   2              rowNumber = address/(uint16)CY_EEPROM_SIZEOF_ROW;
 117   2              byteNumber = address - (rowNumber * ((uint16)CY_EEPROM_SIZEOF_ROW));
 118   2              if(CYRET_SUCCESS == CySpcLock())
 119   2              {
 120   3                  status = CySpcLoadMultiByte(CY_SPC_FIRST_EE_ARRAYID, byteNumber, &dataByte, \
 121   3                                                                          EEPROM_SPC_BYTE_WRITE_SIZE);
 122   3                  if (CYRET_STARTED == status)
 123   3                  {
 124   4                      /* Plan for failure */
 125   4                      status = CYRET_UNKNOWN;
 126   4      
 127   4                      while(CY_SPC_BUSY)
 128   4                      {
 129   5                          /* Wait until SPC becomes idle */
 130   5                      }
 131   4      
 132   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 133   4                      {
 134   5                          status = CYRET_SUCCESS;
 135   5                      }
 136   4                      /* Command to erase and program the row. */
 137   4                      if(CYRET_SUCCESS == status)
 138   4                      {
 139   5                          if(CySpcWriteRow(CY_SPC_FIRST_EE_ARRAYID, (uint16)rowNumber, dieTemperature[0u],
 140   5                          dieTemperature[1u]) == CYRET_STARTED)
 141   5                          {
 142   6                              /* Plan for failure */
 143   6                              status = CYRET_UNKNOWN;
 144   6      
 145   6                              while(CY_SPC_BUSY)
 146   6                              {
 147   7                                  /* Wait until SPC becomes idle */
 148   7                              }
 149   6      
 150   6                              /* SPC is idle now */
 151   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 152   6                              {
 153   7                                  status = CYRET_SUCCESS;
 154   7                              }
 155   6                          }
 156   5                          else
 157   5                          {
 158   6                              status = CYRET_UNKNOWN;
 159   6                          }
 160   5                      }
 161   4                      else
 162   4                      {
 163   5                          status = CYRET_UNKNOWN;
 164   5                      }
 165   4                  }
 166   3                  else
 167   3                  {
 168   4                      if (CYRET_BAD_PARAM != status)
 169   4                      {
 170   5                          status = CYRET_UNKNOWN;
 171   5                      }
 172   4                  }
 173   3                  CySpcUnlock();
 174   3              }
 175   2              else
 176   2              {
 177   3                  status = CYRET_LOCKED;
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 4   

 178   3              }
 179   2          }
 180   1          else
 181   1          {
 182   2              status = CYRET_BAD_PARAM;
 183   2          }
 184   1      
 185   1      
 186   1          return (status);
 187   1      }
 188          
 189          
 190          /*******************************************************************************
 191          * Function Name: EEPROM_ReadByte
 192          ********************************************************************************
 193          *
 194          * Summary:
 195          *  Reads and returns a byte of data from the on-chip EEPROM memory. Although
 196          *  the data is present in the CPU memory space, this function provides an
 197          *  intuitive user interface, addressing the EEPROM memory as a separate block with
 198          *  the first EERPOM byte address equal to 0x0000.
 199          *
 200          * Parameters:
 201          *  address:   The address of data to be read. The maximum address is limited by the
 202          *             size of the EEPROM array on a specific device.
 203          *
 204          * Return:
 205          *  Data located at an address.
 206          *
 207          *******************************************************************************/
 208          uint8 EEPROM_ReadByte(uint16 address) 
 209          {
 210   1          uint8 retByte;
 211   1          uint8 interruptState;
 212   1      
 213   1          interruptState = CyEnterCriticalSection();
 214   1      
 215   1          /* Request access to EEPROM for reading.
 216   1          This is needed to reserve PHUB for read operation from EEPROM */
 217   1          CyEEPROM_ReadReserve();
 218   1          
 219   1          retByte = *((reg8 *) (CYDEV_EE_BASE + address));
 220   1      
 221   1          /* Release EEPROM array */
 222   1          CyEEPROM_ReadRelease();
 223   1          
 224   1          CyExitCriticalSection(interruptState);
 225   1      
 226   1          return (retByte);
 227   1      }
 228          
 229          
 230          /*******************************************************************************
 231          * Function Name: EEPROM_UpdateTemperature
 232          ********************************************************************************
 233          *
 234          * Summary:
 235          *  Updates and stores the temperature value. This function should be called
 236          *  before EEPROM writes if the temperature may have been changed by more than
 237          *  10 degrees Celsius.
 238          *
 239          * Parameters:
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 5   

 240          *  None
 241          *
 242          * Return:
 243          *  Status of operation, 0 if operation complete, non-zero value if error
 244          *  was detected.
 245          *
 246          *******************************************************************************/
 247          uint8 EEPROM_UpdateTemperature(void) 
 248          {
 249   1          return ((uint8)CySetTemp());
 250   1      }
 251          
 252          
 253          /*******************************************************************************
 254          * Function Name: EEPROM_EraseSector
 255          ********************************************************************************
 256          *
 257          * Summary:
 258          *  Erase an EEPROM sector (64 rows). This function blocks until the erase
 259          *  operation is complete. Using this API helps to erase the EEPROM sector at
 260          *  a time. This is faster than using individual writes but affects a cycle
 261          *  recourse of the whole EEPROM row.
 262          *
 263          * Parameters:
 264          *  sectorNumber:  The sector number to erase.
 265          *
 266          * Return:
 267          *  CYRET_SUCCESS, if the operation was successful.
 268          *  CYRET_BAD_PARAM, if the parameter sectorNumber is out of range.
 269          *  CYRET_LOCKED, if the SPC is being used.
 270          *  CYRET_UNKNOWN, if there was an SPC error.
 271          *
 272          *******************************************************************************/
 273          cystatus EEPROM_EraseSector(uint8 sectorNumber) 
 274          {
 275   1          cystatus status;
 276   1          
 277   1          CySpcStart();
 278   1      
 279   1          if(sectorNumber < (uint8) EEPROM_SECTORS_NUMBER)
 280   1          {
 281   2              /* See if we can get SPC. */
 282   2              if(CySpcLock() == CYRET_SUCCESS)
 283   2              {
 284   3                  if(CySpcEraseSector(CY_SPC_FIRST_EE_ARRAYID, sectorNumber) == CYRET_STARTED)
 285   3                  {
 286   4                      /* Plan for failure */
 287   4                      status = CYRET_UNKNOWN;
 288   4      
 289   4                      while(CY_SPC_BUSY)
 290   4                      {
 291   5                          /* Wait until SPC becomes idle */
 292   5                      }
 293   4      
 294   4                      /* SPC is idle now */
 295   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 296   4                      {
 297   5                          status = CYRET_SUCCESS;
 298   5                      }
 299   4                  }
 300   3                  else
 301   3                  {
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 6   

 302   4                      status = CYRET_UNKNOWN;
 303   4                  }
 304   3      
 305   3                  /* Unlock SPC so that someone else can use it. */
 306   3                  CySpcUnlock();
 307   3              }
 308   2              else
 309   2              {
 310   3                  status = CYRET_LOCKED;
 311   3              }
 312   2          }
 313   1          else
 314   1          {
 315   2              status = CYRET_BAD_PARAM;
 316   2          }
 317   1      
 318   1          return(status);
 319   1      }
 320          
 321          
 322          /*******************************************************************************
 323          * Function Name: EEPROM_Write
 324          ********************************************************************************
 325          *
 326          * Summary:
 327          *  Writes a row (16 bytes) of data to the EEPROM. This function blocks until
 328          *  the write operation is complete. Compared to functions that write one byte,
 329          *  this function allows writing a whole row (16 bytes) at a time. For
 330          *  a reliable write procedure to occur you should call the
 331          *  EEPROM_UpdateTemperature() function if the temperature of the
 332          *  silicon has changed for more than 10C since component was started.
 333          *
 334          * Parameters:
 335          *  rowData:    The address of the data to write to the EEPROM.
 336          *  rowNumber:  The row number to write.
 337          *
 338          * Return:
 339          *  CYRET_SUCCESS, if the operation was successful.
 340          *  CYRET_BAD_PARAM, if the parameter rowNumber is out of range.
 341          *  CYRET_LOCKED, if the SPC is being used.
 342          *  CYRET_UNKNOWN, if there was an SPC error.
 343          *
 344          *******************************************************************************/
 345          cystatus EEPROM_Write(const uint8 * rowData, uint8 rowNumber) 
 346          {
 347   1          cystatus status;
 348   1          
 349   1          CySpcStart();
 350   1      
 351   1          if(rowNumber < (uint8) CY_EEPROM_NUMBER_ROWS)
 352   1          {
 353   2              /* See if we can get SPC. */
 354   2              if(CySpcLock() == CYRET_SUCCESS)
 355   2              {
 356   3                  /* Plan for failure */
 357   3                  status = CYRET_UNKNOWN;
 358   3      
 359   3                  /* Command to load a row of data */
 360   3                  if(CySpcLoadRow(CY_SPC_FIRST_EE_ARRAYID, rowData, CYDEV_EEPROM_ROW_SIZE) == CYRET_STARTED)
 361   3                  {
 362   4                      while(CY_SPC_BUSY)
 363   4                      {
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 7   

 364   5                          /* Wait until SPC becomes idle */
 365   5                      }
 366   4      
 367   4                      /* SPC is idle now */
 368   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 369   4                      {
 370   5                          status = CYRET_SUCCESS;
 371   5                      }
 372   4      
 373   4                      /* Command to erase and program the row. */
 374   4                      if(status == CYRET_SUCCESS)
 375   4                      {
 376   5                          if(CySpcWriteRow(CY_SPC_FIRST_EE_ARRAYID, (uint16)rowNumber, dieTemperature[0u],
 377   5                          dieTemperature[1u]) == CYRET_STARTED)
 378   5                          {
 379   6                              /* Plan for failure */
 380   6                              status = CYRET_UNKNOWN;
 381   6      
 382   6                              while(CY_SPC_BUSY)
 383   6                              {
 384   7                                  /* Wait until SPC becomes idle */
 385   7                              }
 386   6      
 387   6                              /* SPC is idle now */
 388   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 389   6                              {
 390   7                                  status = CYRET_SUCCESS;
 391   7                              }
 392   6                          }
 393   5                          else
 394   5                          {
 395   6                              status = CYRET_UNKNOWN;
 396   6                          }
 397   5                      }
 398   4                      else
 399   4                      {
 400   5                          status = CYRET_UNKNOWN;
 401   5                      }
 402   4                  }
 403   3      
 404   3                  /* Unlock SPC so that someone else can use it. */
 405   3                  CySpcUnlock();
 406   3              }
 407   2              else
 408   2              {
 409   3                  status = CYRET_LOCKED;
 410   3              }
 411   2          }
 412   1          else
 413   1          {
 414   2              status = CYRET_BAD_PARAM;
 415   2          }
 416   1      
 417   1          return(status);
 418   1      }
 419          
 420          
 421          /*******************************************************************************
 422          * Function Name: EEPROM_StartWrite
 423          ********************************************************************************
 424          *
 425          * Summary:
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 8   

 426          *  Starts a write of a row (16 bytes) of data to the EEPROM.
 427          *  This function does not block. The function returns once the SPC has begun
 428          *  writing the data. This function must be used in combination with
 429          *  EEPROM_Query(). EEPROM_Query() must be called
 430          *  until it returns a status other than CYRET_STARTED. That indicates that the
 431          *  write has completed. Until EEPROM_Query() detects that
 432          *  the write is complete, the SPC is marked as locked to prevent another
 433          *  SPC operation from being performed. For a reliable write procedure to occur
 434          *  you should call EEPROM_UpdateTemperature() API if the temperature
 435          *  of the silicon has changed for more than 10C since component was started.
 436          *
 437          * Parameters:
 438          *  rowData:    The address of the data to write to the EEPROM.
 439          *  rowNumber:  The row number to write.
 440          *
 441          * Return:
 442          *  CYRET_STARTED, if the SPC command to write was successfully started.
 443          *  CYRET_BAD_PARAM, if the parameter rowNumber is out of range.
 444          *  CYRET_LOCKED, if the SPC is being used.
 445          *  CYRET_UNKNOWN, if there was an SPC error.
 446          *
 447          * Side effects:
 448          *  After calling this API, the device should not be powered down, reset or switched
 449          *  to low power modes until EEPROM operation is complete. 
 450          *  Ignoring this recommendation may lead to data corruption or silicon
 451          *  unexpected behavior.
 452          *
 453          *******************************************************************************/
 454          cystatus EEPROM_StartWrite(const uint8 * rowData, uint8 rowNumber) \
 455          
 456          {
 457   1          cystatus status;
 458   1          
 459   1          CySpcStart();
 460   1      
 461   1          if(rowNumber < (uint8) CY_EEPROM_NUMBER_ROWS)
 462   1          {
 463   2              /* See if we can get SPC. */
 464   2              if(CySpcLock() == CYRET_SUCCESS)
 465   2              {
 466   3                  /* Plan for failure */
 467   3                  status = CYRET_UNKNOWN;
 468   3      
 469   3                  /* Command to load a row of data */
 470   3                  if(CySpcLoadRow(CY_SPC_FIRST_EE_ARRAYID, rowData, CYDEV_EEPROM_ROW_SIZE) == CYRET_STARTED)
 471   3                  {
 472   4                      while(CY_SPC_BUSY)
 473   4                      {
 474   5                          /* Wait until SPC becomes idle */
 475   5                      }
 476   4      
 477   4                      /* SPC is idle now */
 478   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 479   4                      {
 480   5                          status = CYRET_SUCCESS;
 481   5                      }
 482   4      
 483   4                      /* Command to erase and program the row. */
 484   4                      if(status == CYRET_SUCCESS)
 485   4                      {
 486   5                          if(CySpcWriteRow(CY_SPC_FIRST_EE_ARRAYID, (uint16)rowNumber, dieTemperature[0u],
 487   5                          dieTemperature[1u]) == CYRET_STARTED)
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 9   

 488   5                          {
 489   6                              status = CYRET_STARTED;
 490   6                          }
 491   5                          else
 492   5                          {
 493   6                              status = CYRET_UNKNOWN;
 494   6                          }
 495   5                      }
 496   4                      else
 497   4                      {
 498   5                          status = CYRET_UNKNOWN;
 499   5                      }
 500   4                  }
 501   3              }
 502   2              else
 503   2              {
 504   3                  status = CYRET_LOCKED;
 505   3              }
 506   2          }
 507   1          else
 508   1          {
 509   2              status = CYRET_BAD_PARAM;
 510   2          }
 511   1      
 512   1          return(status);
 513   1      }
 514          
 515          
 516          /*******************************************************************************
 517          * Function Name: EEPROM_StartErase
 518          ********************************************************************************
 519          *
 520          * Summary:
 521          *  Starts the EEPROM sector erase. This function does not block.
 522          *  The function returns once the SPC has begun writing the data. This function
 523          *  must be used in combination with EEPROM_Query().
 524          *  EEPROM_Query() must be called until it returns a status
 525          *  other than CYRET_STARTED. That indicates the erase has been completed.
 526          *  Until EEPROM_Query() detects that the erase is
 527          *  complete, the SPC is marked as locked to prevent another SPC operation
 528          *  from being performed.
 529          *
 530          * Parameters:
 531          *  sectorNumber:  The sector number to erase.
 532          *
 533          * Return:
 534          *  CYRET_STARTED, if the SPC command to erase was successfully started.
 535          *  CYRET_BAD_PARAM, if the parameter sectorNumber is out of range.
 536          *  CYRET_LOCKED, if the SPC is being used.
 537          *  CYRET_UNKNOWN, if there was an SPC error.
 538          *
 539          * Side effects:
 540          *  After calling this API, the device should not be powered down, reset or switched
 541          *  to low power modes until EEPROM operation is complete.
 542          *  Ignoring this recommendation may lead to data corruption or silicon
 543          *  unexpected behavior.
 544          *
 545          *******************************************************************************/
 546          cystatus EEPROM_StartErase(uint8 sectorNumber) 
 547          {
 548   1          cystatus status;
 549   1          
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 10  

 550   1          CySpcStart();
 551   1      
 552   1          if(sectorNumber < (uint8) CY_EEPROM_NUMBER_ARRAYS)
 553   1          {
 554   2              /* See if we can get SPC. */
 555   2              if(CySpcLock() == CYRET_SUCCESS)
 556   2              {
 557   3                  /* Plan for failure */
 558   3                  status = CYRET_UNKNOWN;
 559   3      
 560   3                  /* Command to load a row of data */
 561   3                  if(CySpcEraseSector(CY_SPC_FIRST_EE_ARRAYID, sectorNumber) == CYRET_STARTED)
 562   3                  {
 563   4                      status = CYRET_SUCCESS;
 564   4                  }
 565   3              }
 566   2              else
 567   2              {
 568   3                  status = CYRET_LOCKED;
 569   3              }
 570   2          }
 571   1          else
 572   1          {
 573   2              status = CYRET_BAD_PARAM;
 574   2          }
 575   1      
 576   1          return(status);
 577   1      }
 578          
 579          
 580          /*******************************************************************************
 581          * Function Name: EEPROM_Query
 582          ********************************************************************************
 583          *
 584          * Summary:
 585          *  Checks the status of an earlier call to EEPROM_StartWrite() or
 586          *  EEPROM_StartErase().
 587          *  This function must be called until it returns a value other than
 588          *  CYRET_STARTED. Once that occurs, the write or erase has been completed and
 589          *  the SPC is unlocked.
 590          *
 591          * Parameters:
 592          *  None
 593          *
 594          * Return:
 595          *  CYRET_STARTED, if the SPC command is still processing.
 596          *  CYRET_SUCCESS, if the operation was completed successfully.
 597          *  CYRET_UNKNOWN, if there was an SPC error.
 598          *
 599          *******************************************************************************/
 600          cystatus EEPROM_Query(void) 
 601          {
 602   1          cystatus status;
 603   1          
 604   1          CySpcStart();
 605   1      
 606   1          /* Check if SPC is idle */
 607   1          if(CY_SPC_IDLE)
 608   1          {
 609   2              /* SPC is idle now */
 610   2              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 611   2              {
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 11  

 612   3                  status = CYRET_SUCCESS;
 613   3              }
 614   2              else
 615   2              {
 616   3                  status = CYRET_UNKNOWN;
 617   3              }
 618   2      
 619   2              /* Unlock SPC so that someone else can use it. */
 620   2              CySpcUnlock();
 621   2          }
 622   1          else
 623   1          {
 624   2              status = CYRET_STARTED;
 625   2          }
 626   1      
 627   1          return(status);
 628   1      }
 629          
 630          
 631          /*******************************************************************************
 632          * Function Name: EEPROM_ByteWritePos
 633          ********************************************************************************
 634          *
 635          * Summary:
 636          *  Writes a byte of data to the EEPROM. This is a blocking call. It will not
 637          *  return until the write operation succeeds or fails.
 638          *
 639          * Parameters:
 640          *  dataByte:   The byte of data to write to the EEPROM.
 641          *  rowNumber:  The EEPROM row number to program.
 642          *  byteNumber: The byte number within the row to program.
 643          *
 644          * Return:
 645          *  CYRET_SUCCESS, if the operation was successful.
 646          *  CYRET_BAD_PARAM, if the parameter rowNumber or byteNumber is out of range.
 647          *  CYRET_LOCKED, if the SPC is being used.
 648          *  CYRET_UNKNOWN, if there was an SPC error.
 649          *
 650          *******************************************************************************/
 651          cystatus EEPROM_ByteWritePos(uint8 dataByte, uint8 rowNumber, uint8 byteNumber) \
 652          
 653          {
 654   1          cystatus status;
 655   1      
 656   1          /* Start SPC */
 657   1          CySpcStart();
 658   1      
 659   1          if((rowNumber < (uint8) CY_EEPROM_NUMBER_ROWS) && (byteNumber < (uint8) SIZEOF_EEPROM_ROW))
 660   1          {
 661   2              /* See if we can get SPC. */
 662   2              if(CySpcLock() == CYRET_SUCCESS)
 663   2              {
 664   3                  /* Plan for failure */
 665   3                  status = CYRET_UNKNOWN;
 666   3      
 667   3                  /* Command to load byte of data */
 668   3                  if(CySpcLoadMultiByte(CY_SPC_FIRST_EE_ARRAYID, (uint16)byteNumber, &dataByte,\
 669   3                                                                      EEPROM_SPC_BYTE_WRITE_SIZE) == CYRET_START
             -ED)
 670   3                  {
 671   4                      while(CY_SPC_BUSY)
 672   4                      {
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 12  

 673   5                          /* Wait until SPC becomes idle */
 674   5                      }
 675   4      
 676   4                      /* SPC is idle now */
 677   4                      if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 678   4                      {
 679   5                          status = CYRET_SUCCESS;
 680   5                      }
 681   4      
 682   4                      /* Command to erase and program the row. */
 683   4                      if(status == CYRET_SUCCESS)
 684   4                      {
 685   5                          if(CySpcWriteRow(CY_SPC_FIRST_EE_ARRAYID, (uint16)rowNumber, dieTemperature[0u],
 686   5                          dieTemperature[1u]) == CYRET_STARTED)
 687   5                          {
 688   6                              /* Plan for failure */
 689   6                              status = CYRET_UNKNOWN;
 690   6      
 691   6                              while(CY_SPC_BUSY)
 692   6                              {
 693   7                                  /* Wait until SPC becomes idle */
 694   7                              }
 695   6      
 696   6                              /* SPC is idle now */
 697   6                              if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 698   6                              {
 699   7                                  status = CYRET_SUCCESS;
 700   7                              }
 701   6                          }
 702   5                          else
 703   5                          {
 704   6                              status = CYRET_UNKNOWN;
 705   6                          }
 706   5                      }
 707   4                      else
 708   4                      {
 709   5                          status = CYRET_UNKNOWN;
 710   5                      }
 711   4                  }
 712   3      
 713   3                  /* Unlock SPC so that someone else can use it. */
 714   3                  CySpcUnlock();
 715   3              }
 716   2              else
 717   2              {
 718   3                  status = CYRET_LOCKED;
 719   3              }
 720   2          }
 721   1          else
 722   1          {
 723   2              status = CYRET_BAD_PARAM;
 724   2          }
 725   1      
 726   1          return(status);
 727   1      }
 728          
 729          
 730          /* [] END OF FILE */
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION EEPROM_Enable (BEGIN)
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 36
0000 120000      E     LCALL   CySetTemp
                                           ; SOURCE LINE # 39
0003 120000      E     LCALL   CyEEPROM_Start
                                           ; SOURCE LINE # 40
0006 22                RET     
             ; FUNCTION EEPROM_Enable (END)

             ; FUNCTION EEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
0000 120000      R     LCALL   EEPROM_Enable
                                           ; SOURCE LINE # 60
0003 22                RET     
             ; FUNCTION EEPROM_Start (END)

             ; FUNCTION EEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 80
0000 120000      E     LCALL   CyEEPROM_Stop
                                           ; SOURCE LINE # 81
0003 22                RET     
             ; FUNCTION EEPROM_Stop (END)

             ; FUNCTION _EEPROM_WriteByte (BEGIN)
                                           ; SOURCE LINE # 106
0000 900000      R     MOV     DPTR,#dataByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 112
000D 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 114
0010 900000      R     MOV     DPTR,#address
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 C3                CLR     C
0019 EE                MOV     A,R6
001A 9408              SUBB    A,#08H
001C 4003              JC      $ + 5H
001E 020000      R     LJMP    ?C0004
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0021 900000      R     MOV     DPTR,#address
0024 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 14  

0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EE                MOV     A,R6
002A C4                SWAP    A
002B F8                MOV     R0,A
002C 54F0              ANL     A,#0F0H
002E C8                XCH     A,R0
002F 68                XRL     A,R0
0030 FE                MOV     R6,A
0031 EF                MOV     A,R7
0032 C4                SWAP    A
0033 540F              ANL     A,#0FH
0035 48                ORL     A,R0
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#rowNumber
003A EE                MOV     A,R6
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
003F 900000      R     MOV     DPTR,#rowNumber
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 C4                SWAP    A
0049 F8                MOV     R0,A
004A 540F              ANL     A,#0FH
004C C8                XCH     A,R0
004D 68                XRL     A,R0
004E FF                MOV     R7,A
004F EE                MOV     A,R6
0050 C4                SWAP    A
0051 54F0              ANL     A,#0F0H
0053 48                ORL     A,R0
0054 FE                MOV     R6,A
0055 900000      R     MOV     DPTR,#address
0058 E0                MOVX    A,@DPTR
0059 FC                MOV     R4,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FD                MOV     R5,A
005D C3                CLR     C
005E ED                MOV     A,R5
005F 9F                SUBB    A,R7
0060 FF                MOV     R7,A
0061 EC                MOV     A,R4
0062 9E                SUBB    A,R6
0063 FE                MOV     R6,A
0064 900000      R     MOV     DPTR,#byteNumber
0067 EE                MOV     A,R6
0068 F0                MOVX    @DPTR,A
0069 A3                INC     DPTR
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
006C 120000      E     LCALL   CySpcLock
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 15  

006F EF                MOV     A,R7
0070 6003              JZ      $ + 5H
0072 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0075 900000      R     MOV     DPTR,#byteNumber
0078 E0                MOVX    A,@DPTR
0079 FC                MOV     R4,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C FD                MOV     R5,A
007D 7B01              MOV     R3,#01H
007F 7A00        R     MOV     R2,#HIGH dataByte
0081 7900        R     MOV     R1,#LOW dataByte
0083 900000      E     MOV     DPTR,#?_CySpcLoadMultiByte?BYTE+06H
0086 7401              MOV     A,#01H
0088 F0                MOVX    @DPTR,A
0089 7F40              MOV     R7,#040H
008B 120000      E     LCALL   _CySpcLoadMultiByte
008E 900000      R     MOV     DPTR,#status
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
0093 900000      R     MOV     DPTR,#status
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 EF                MOV     A,R7
0099 6407              XRL     A,#07H
009B 6003              JZ      $ + 5H
009D 020000      R     LJMP    ?C0006
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 125
00A0 900000      R     MOV     DPTR,#status
00A3 74FF              MOV     A,#0FFH
00A5 F0                MOVX    @DPTR,A
00A6         ?C0007:
                                           ; SOURCE LINE # 127
00A6 904722            MOV     DPTR,#04722H
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB EF                MOV     A,R7
00AC 5402              ANL     A,#02H
00AE FF                MOV     R7,A
00AF 7E00              MOV     R6,#00H
00B1 EF                MOV     A,R7
00B2 4E                ORL     A,R6
00B3 60F1              JZ      ?C0007
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 130
00B5         ?C0008:
                                           ; SOURCE LINE # 132
00B5 904722            MOV     DPTR,#04722H
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA EF                MOV     A,R7
00BB 5402              ANL     A,#02H
00BD FF                MOV     R7,A
00BE 7E00              MOV     R6,#00H
00C0 EF                MOV     A,R7
00C1 4E                ORL     A,R6
00C2 600D              JZ      ?C0010
00C4 904722            MOV     DPTR,#04722H
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 16  

00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 EF                MOV     A,R7
00CA 13                RRC     A
00CB 13                RRC     A
00CC 543F              ANL     A,#03FH
00CE FF                MOV     R7,A
00CF 8002              SJMP    ?C0011
00D1         ?C0010:
00D1 7FFF              MOV     R7,#0FFH
00D3         ?C0011:
00D3 EF                MOV     A,R7
00D4 7005              JNZ     ?C0009
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
00D6 900000      R     MOV     DPTR,#status
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
00DB         ?C0009:
                                           ; SOURCE LINE # 137
00DB 900000      R     MOV     DPTR,#status
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 EF                MOV     A,R7
00E1 7066              JNZ     ?C0012
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
00E3 900000      R     MOV     DPTR,#rowNumber
00E6 E0                MOVX    A,@DPTR
00E7 FC                MOV     R4,A
00E8 A3                INC     DPTR
00E9 E0                MOVX    A,@DPTR
00EA FD                MOV     R5,A
00EB 900000      E     MOV     DPTR,#dieTemperature
00EE E0                MOVX    A,@DPTR
00EF FB                MOV     R3,A
00F0 900000      E     MOV     DPTR,#dieTemperature+01H
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
00F8 EF                MOV     A,R7
00F9 F0                MOVX    @DPTR,A
00FA 7F40              MOV     R7,#040H
00FC 120000      E     LCALL   _CySpcWriteRow
00FF EF                MOV     A,R7
0100 6407              XRL     A,#07H
0102 703D              JNZ     ?C0013
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 143
0104 900000      R     MOV     DPTR,#status
0107 74FF              MOV     A,#0FFH
0109 F0                MOVX    @DPTR,A
010A         ?C0014:
                                           ; SOURCE LINE # 145
010A 904722            MOV     DPTR,#04722H
010D E0                MOVX    A,@DPTR
010E FF                MOV     R7,A
010F EF                MOV     A,R7
0110 5402              ANL     A,#02H
0112 FF                MOV     R7,A
0113 7E00              MOV     R6,#00H
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 17  

0115 EF                MOV     A,R7
0116 4E                ORL     A,R6
0117 60F1              JZ      ?C0014
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
0119         ?C0015:
                                           ; SOURCE LINE # 151
0119 904722            MOV     DPTR,#04722H
011C E0                MOVX    A,@DPTR
011D FF                MOV     R7,A
011E EF                MOV     A,R7
011F 5402              ANL     A,#02H
0121 FF                MOV     R7,A
0122 7E00              MOV     R6,#00H
0124 EF                MOV     A,R7
0125 4E                ORL     A,R6
0126 600D              JZ      ?C0017
0128 904722            MOV     DPTR,#04722H
012B E0                MOVX    A,@DPTR
012C FF                MOV     R7,A
012D EF                MOV     A,R7
012E 13                RRC     A
012F 13                RRC     A
0130 543F              ANL     A,#03FH
0132 FF                MOV     R7,A
0133 8002              SJMP    ?C0018
0135         ?C0017:
0135 7FFF              MOV     R7,#0FFH
0137         ?C0018:
0137 EF                MOV     A,R7
0138 7027              JNZ     ?C0021
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
013A 900000      R     MOV     DPTR,#status
013D E4                CLR     A
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
013F 8020              SJMP    ?C0021
0141         ?C0013:
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0141 900000      R     MOV     DPTR,#status
0144 74FF              MOV     A,#0FFH
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
0147 8018              SJMP    ?C0021
0149         ?C0012:
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0149 900000      R     MOV     DPTR,#status
014C 74FF              MOV     A,#0FFH
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
014F 8010              SJMP    ?C0021
0151         ?C0006:
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
0151 900000      R     MOV     DPTR,#status
0154 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 18  

0155 FF                MOV     R7,A
0156 EF                MOV     A,R7
0157 6401              XRL     A,#01H
0159 6006              JZ      ?C0021
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
015B 900000      R     MOV     DPTR,#status
015E 74FF              MOV     A,#0FFH
0160 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0161         ?C0021:
                                           ; SOURCE LINE # 173
0161 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 174
0164 800E              SJMP    ?C0024
0166         ?C0005:
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0166 900000      R     MOV     DPTR,#status
0169 7404              MOV     A,#04H
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
016C 8006              SJMP    ?C0024
016E         ?C0004:
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
016E 900000      R     MOV     DPTR,#status
0171 7401              MOV     A,#01H
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0174         ?C0024:
                                           ; SOURCE LINE # 186
0174 900000      R     MOV     DPTR,#status
0177 E0                MOVX    A,@DPTR
0178 FF                MOV     R7,A
                                           ; SOURCE LINE # 187
0179         ?C0025:
0179 22                RET     
             ; FUNCTION _EEPROM_WriteByte (END)

             ; FUNCTION _EEPROM_ReadByte (BEGIN)
                                           ; SOURCE LINE # 208
0000 900000      R     MOV     DPTR,#address
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 213
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#interruptState
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0010 120000      E     LCALL   CyEEPROM_ReadReserve
                                           ; SOURCE LINE # 219
0013 900000      R     MOV     DPTR,#address
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 19  

0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 2400              ADD     A,#00H
001E FF                MOV     R7,A
001F EE                MOV     A,R6
0020 3480              ADDC    A,#080H
0022 FE                MOV     R6,A
0023 8F82              MOV     DPL,R7
0025 8E83              MOV     DPH,R6
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 900000      R     MOV     DPTR,#retByte
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
002E 120000      E     LCALL   CyEEPROM_ReadRelease
                                           ; SOURCE LINE # 224
0031 900000      R     MOV     DPTR,#interruptState
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 226
0039 900000      R     MOV     DPTR,#retByte
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
                                           ; SOURCE LINE # 227
003E         ?C0026:
003E 22                RET     
             ; FUNCTION _EEPROM_ReadByte (END)

             ; FUNCTION EEPROM_UpdateTemperature (BEGIN)
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
0000 120000      E     LCALL   CySetTemp
                                           ; SOURCE LINE # 250
0003         ?C0027:
0003 22                RET     
             ; FUNCTION EEPROM_UpdateTemperature (END)

             ; FUNCTION _EEPROM_EraseSector (BEGIN)
                                           ; SOURCE LINE # 273
0000 900000      R     MOV     DPTR,#sectorNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 277
0005 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 279
0008 900000      R     MOV     DPTR,#sectorNumber
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E C3                CLR     C
000F 9402              SUBB    A,#02H
0011 5065              JNC     ?C0028
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 282
0013 120000      E     LCALL   CySpcLock
0016 EF                MOV     A,R7
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 20  

0017 7057              JNZ     ?C0029
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0019 900000      R     MOV     DPTR,#sectorNumber
001C E0                MOVX    A,@DPTR
001D FD                MOV     R5,A
001E 7F40              MOV     R7,#040H
0020 120000      E     LCALL   _CySpcEraseSector
0023 EF                MOV     A,R7
0024 6407              XRL     A,#07H
0026 703D              JNZ     ?C0030
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 287
0028 900000      R     MOV     DPTR,#status
002B 74FF              MOV     A,#0FFH
002D F0                MOVX    @DPTR,A
002E         ?C0031:
                                           ; SOURCE LINE # 289
002E 904722            MOV     DPTR,#04722H
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 5402              ANL     A,#02H
0036 FF                MOV     R7,A
0037 7E00              MOV     R6,#00H
0039 EF                MOV     A,R7
003A 4E                ORL     A,R6
003B 60F1              JZ      ?C0031
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 292
003D         ?C0032:
                                           ; SOURCE LINE # 295
003D 904722            MOV     DPTR,#04722H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 5402              ANL     A,#02H
0045 FF                MOV     R7,A
0046 7E00              MOV     R6,#00H
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A 600D              JZ      ?C0034
004C 904722            MOV     DPTR,#04722H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 13                RRC     A
0053 13                RRC     A
0054 543F              ANL     A,#03FH
0056 FF                MOV     R7,A
0057 8002              SJMP    ?C0035
0059         ?C0034:
0059 7FFF              MOV     R7,#0FFH
005B         ?C0035:
005B EF                MOV     A,R7
005C 700D              JNZ     ?C0036
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
005E 900000      R     MOV     DPTR,#status
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 21  

                                           ; SOURCE LINE # 299
0063 8006              SJMP    ?C0036
0065         ?C0030:
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
0065 900000      R     MOV     DPTR,#status
0068 74FF              MOV     A,#0FFH
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
006B         ?C0036:
                                           ; SOURCE LINE # 306
006B 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 307
006E 800E              SJMP    ?C0038
0070         ?C0029:
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0070 900000      R     MOV     DPTR,#status
0073 7404              MOV     A,#04H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
0076 8006              SJMP    ?C0038
0078         ?C0028:
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
0078 900000      R     MOV     DPTR,#status
007B 7401              MOV     A,#01H
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
007E         ?C0038:
                                           ; SOURCE LINE # 318
007E 900000      R     MOV     DPTR,#status
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
                                           ; SOURCE LINE # 319
0083         ?C0039:
0083 22                RET     
             ; FUNCTION _EEPROM_EraseSector (END)

             ; FUNCTION _EEPROM_Write (BEGIN)
                                           ; SOURCE LINE # 345
0000 900000      R     MOV     DPTR,#rowData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#rowNumber
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 349
000B 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 351
000E 900000      R     MOV     DPTR,#rowNumber
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9480              SUBB    A,#080H
0017 4003              JC      $ + 5H
0019 020000      R     LJMP    ?C0040
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 354
001C 120000      E     LCALL   CySpcLock
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 22  

001F EF                MOV     A,R7
0020 6003              JZ      $ + 5H
0022 020000      R     LJMP    ?C0041
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 357
0025 900000      R     MOV     DPTR,#status
0028 74FF              MOV     A,#0FFH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
002B 900000      R     MOV     DPTR,#rowData
002E 120000      E     LCALL   ?C?PLDXDATA
0031 900000      E     MOV     DPTR,#?_CySpcLoadRow?BYTE+04H
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 7410              MOV     A,#010H
0039 F0                MOVX    @DPTR,A
003A 7F40              MOV     R7,#040H
003C 120000      E     LCALL   _CySpcLoadRow
003F EF                MOV     A,R7
0040 6407              XRL     A,#07H
0042 6003              JZ      $ + 5H
0044 020000      R     LJMP    ?C0042
                                           ; SOURCE LINE # 361
0047         ?C0043:
                                           ; SOURCE LINE # 362
0047 904722            MOV     DPTR,#04722H
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 5402              ANL     A,#02H
004F FF                MOV     R7,A
0050 7E00              MOV     R6,#00H
0052 EF                MOV     A,R7
0053 4E                ORL     A,R6
0054 60F1              JZ      ?C0043
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 365
0056         ?C0044:
                                           ; SOURCE LINE # 368
0056 904722            MOV     DPTR,#04722H
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 5402              ANL     A,#02H
005E FF                MOV     R7,A
005F 7E00              MOV     R6,#00H
0061 EF                MOV     A,R7
0062 4E                ORL     A,R6
0063 600D              JZ      ?C0046
0065 904722            MOV     DPTR,#04722H
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B 13                RRC     A
006C 13                RRC     A
006D 543F              ANL     A,#03FH
006F FF                MOV     R7,A
0070 8002              SJMP    ?C0047
0072         ?C0046:
0072 7FFF              MOV     R7,#0FFH
0074         ?C0047:
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 23  

0074 EF                MOV     A,R7
0075 7005              JNZ     ?C0045
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
0077 900000      R     MOV     DPTR,#status
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
007C         ?C0045:
                                           ; SOURCE LINE # 374
007C 900000      R     MOV     DPTR,#status
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 7067              JNZ     ?C0048
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
0084 900000      R     MOV     DPTR,#rowNumber
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A FD                MOV     R5,A
008B 7C00              MOV     R4,#00H
008D 900000      E     MOV     DPTR,#dieTemperature
0090 E0                MOVX    A,@DPTR
0091 FB                MOV     R3,A
0092 900000      E     MOV     DPTR,#dieTemperature+01H
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
009C 7F40              MOV     R7,#040H
009E 120000      E     LCALL   _CySpcWriteRow
00A1 EF                MOV     A,R7
00A2 6407              XRL     A,#07H
00A4 703D              JNZ     ?C0049
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 380
00A6 900000      R     MOV     DPTR,#status
00A9 74FF              MOV     A,#0FFH
00AB F0                MOVX    @DPTR,A
00AC         ?C0050:
                                           ; SOURCE LINE # 382
00AC 904722            MOV     DPTR,#04722H
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 5402              ANL     A,#02H
00B4 FF                MOV     R7,A
00B5 7E00              MOV     R6,#00H
00B7 EF                MOV     A,R7
00B8 4E                ORL     A,R6
00B9 60F1              JZ      ?C0050
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 385
00BB         ?C0051:
                                           ; SOURCE LINE # 388
00BB 904722            MOV     DPTR,#04722H
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 EF                MOV     A,R7
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 24  

00C1 5402              ANL     A,#02H
00C3 FF                MOV     R7,A
00C4 7E00              MOV     R6,#00H
00C6 EF                MOV     A,R7
00C7 4E                ORL     A,R6
00C8 600D              JZ      ?C0053
00CA 904722            MOV     DPTR,#04722H
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF EF                MOV     A,R7
00D0 13                RRC     A
00D1 13                RRC     A
00D2 543F              ANL     A,#03FH
00D4 FF                MOV     R7,A
00D5 8002              SJMP    ?C0054
00D7         ?C0053:
00D7 7FFF              MOV     R7,#0FFH
00D9         ?C0054:
00D9 EF                MOV     A,R7
00DA 7015              JNZ     ?C0042
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
00DC 900000      R     MOV     DPTR,#status
00DF E4                CLR     A
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
00E1 800E              SJMP    ?C0042
00E3         ?C0049:
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
00E3 900000      R     MOV     DPTR,#status
00E6 74FF              MOV     A,#0FFH
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
00E9 8006              SJMP    ?C0042
00EB         ?C0048:
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
00EB 900000      R     MOV     DPTR,#status
00EE 74FF              MOV     A,#0FFH
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
00F1         ?C0042:
                                           ; SOURCE LINE # 405
00F1 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 406
00F4 800E              SJMP    ?C0058
00F6         ?C0041:
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
00F6 900000      R     MOV     DPTR,#status
00F9 7404              MOV     A,#04H
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
00FC 8006              SJMP    ?C0058
00FE         ?C0040:
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 25  

00FE 900000      R     MOV     DPTR,#status
0101 7401              MOV     A,#01H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0104         ?C0058:
                                           ; SOURCE LINE # 417
0104 900000      R     MOV     DPTR,#status
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
                                           ; SOURCE LINE # 418
0109         ?C0059:
0109 22                RET     
             ; FUNCTION _EEPROM_Write (END)

             ; FUNCTION _EEPROM_StartWrite (BEGIN)
                                           ; SOURCE LINE # 454
0000 900000      R     MOV     DPTR,#rowData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#rowNumber
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 459
000B 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 461
000E 900000      R     MOV     DPTR,#rowNumber
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9480              SUBB    A,#080H
0017 4003              JC      $ + 5H
0019 020000      R     LJMP    ?C0060
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 464
001C 120000      E     LCALL   CySpcLock
001F EF                MOV     A,R7
0020 6003              JZ      $ + 5H
0022 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 467
0025 900000      R     MOV     DPTR,#status
0028 74FF              MOV     A,#0FFH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
002B 900000      R     MOV     DPTR,#rowData
002E 120000      E     LCALL   ?C?PLDXDATA
0031 900000      E     MOV     DPTR,#?_CySpcLoadRow?BYTE+04H
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 7410              MOV     A,#010H
0039 F0                MOVX    @DPTR,A
003A 7F40              MOV     R7,#040H
003C 120000      E     LCALL   _CySpcLoadRow
003F EF                MOV     A,R7
0040 6407              XRL     A,#07H
0042 6003              JZ      $ + 5H
0044 020000      R     LJMP    ?C0073
                                           ; SOURCE LINE # 471
0047         ?C0063:
                                           ; SOURCE LINE # 472
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 26  

0047 904722            MOV     DPTR,#04722H
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 5402              ANL     A,#02H
004F FF                MOV     R7,A
0050 7E00              MOV     R6,#00H
0052 EF                MOV     A,R7
0053 4E                ORL     A,R6
0054 60F1              JZ      ?C0063
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 475
0056         ?C0064:
                                           ; SOURCE LINE # 478
0056 904722            MOV     DPTR,#04722H
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 5402              ANL     A,#02H
005E FF                MOV     R7,A
005F 7E00              MOV     R6,#00H
0061 EF                MOV     A,R7
0062 4E                ORL     A,R6
0063 600D              JZ      ?C0066
0065 904722            MOV     DPTR,#04722H
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A EF                MOV     A,R7
006B 13                RRC     A
006C 13                RRC     A
006D 543F              ANL     A,#03FH
006F FF                MOV     R7,A
0070 8002              SJMP    ?C0067
0072         ?C0066:
0072 7FFF              MOV     R7,#0FFH
0074         ?C0067:
0074 EF                MOV     A,R7
0075 7005              JNZ     ?C0065
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
0077 900000      R     MOV     DPTR,#status
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
007C         ?C0065:
                                           ; SOURCE LINE # 484
007C 900000      R     MOV     DPTR,#status
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 7031              JNZ     ?C0068
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
0084 900000      R     MOV     DPTR,#rowNumber
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A FD                MOV     R5,A
008B 7C00              MOV     R4,#00H
008D 900000      E     MOV     DPTR,#dieTemperature
0090 E0                MOVX    A,@DPTR
0091 FB                MOV     R3,A
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 27  

0092 900000      E     MOV     DPTR,#dieTemperature+01H
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
009A EF                MOV     A,R7
009B F0                MOVX    @DPTR,A
009C 7F40              MOV     R7,#040H
009E 120000      E     LCALL   _CySpcWriteRow
00A1 EF                MOV     A,R7
00A2 B40708            CJNE    A,#07H,?C0069
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
00A5 900000      R     MOV     DPTR,#status
00A8 7407              MOV     A,#07H
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
00AB 801E              SJMP    ?C0073
00AD         ?C0069:
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
00AD 900000      R     MOV     DPTR,#status
00B0 74FF              MOV     A,#0FFH
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
00B3 8016              SJMP    ?C0073
00B5         ?C0068:
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
00B5 900000      R     MOV     DPTR,#status
00B8 74FF              MOV     A,#0FFH
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
00BB 800E              SJMP    ?C0073
00BD         ?C0061:
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
00BD 900000      R     MOV     DPTR,#status
00C0 7404              MOV     A,#04H
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
00C3 8006              SJMP    ?C0073
00C5         ?C0060:
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
00C5 900000      R     MOV     DPTR,#status
00C8 7401              MOV     A,#01H
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
00CB         ?C0073:
                                           ; SOURCE LINE # 512
00CB 900000      R     MOV     DPTR,#status
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
                                           ; SOURCE LINE # 513
00D0         ?C0074:
00D0 22                RET     
             ; FUNCTION _EEPROM_StartWrite (END)

C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 28  

             ; FUNCTION _EEPROM_StartErase (BEGIN)
                                           ; SOURCE LINE # 546
0000 900000      R     MOV     DPTR,#sectorNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 550
0005 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 552
0008 900000      R     MOV     DPTR,#sectorNumber
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E C3                CLR     C
000F 9401              SUBB    A,#01H
0011 5029              JNC     ?C0075
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 555
0013 120000      E     LCALL   CySpcLock
0016 EF                MOV     A,R7
0017 701B              JNZ     ?C0076
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 558
0019 900000      R     MOV     DPTR,#status
001C 74FF              MOV     A,#0FFH
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
001F 900000      R     MOV     DPTR,#sectorNumber
0022 E0                MOVX    A,@DPTR
0023 FD                MOV     R5,A
0024 7F40              MOV     R7,#040H
0026 120000      E     LCALL   _CySpcEraseSector
0029 EF                MOV     A,R7
002A B40715            CJNE    A,#07H,?C0079
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
002D 900000      R     MOV     DPTR,#status
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
0032 800E              SJMP    ?C0079
0034         ?C0076:
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0034 900000      R     MOV     DPTR,#status
0037 7404              MOV     A,#04H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
003A 8006              SJMP    ?C0079
003C         ?C0075:
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
003C 900000      R     MOV     DPTR,#status
003F 7401              MOV     A,#01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0042         ?C0079:
                                           ; SOURCE LINE # 576
0042 900000      R     MOV     DPTR,#status
0045 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 29  

0046 FF                MOV     R7,A
                                           ; SOURCE LINE # 577
0047         ?C0080:
0047 22                RET     
             ; FUNCTION _EEPROM_StartErase (END)

             ; FUNCTION EEPROM_Query (BEGIN)
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 604
0000 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 607
0003 904722            MOV     DPTR,#04722H
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 5402              ANL     A,#02H
000B FF                MOV     R7,A
000C 7E00              MOV     R6,#00H
000E EF                MOV     A,R7
000F 4E                ORL     A,R6
0010 6033              JZ      ?C0081
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 610
0012 904722            MOV     DPTR,#04722H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 5402              ANL     A,#02H
001A FF                MOV     R7,A
001B 7E00              MOV     R6,#00H
001D EF                MOV     A,R7
001E 4E                ORL     A,R6
001F 600D              JZ      ?C0083
0021 904722            MOV     DPTR,#04722H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 13                RRC     A
0028 13                RRC     A
0029 543F              ANL     A,#03FH
002B FF                MOV     R7,A
002C 8002              SJMP    ?C0084
002E         ?C0083:
002E 7FFF              MOV     R7,#0FFH
0030         ?C0084:
0030 EF                MOV     A,R7
0031 7007              JNZ     ?C0082
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
0033 900000      R     MOV     DPTR,#status
0036 E4                CLR     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
0038 8006              SJMP    ?C0085
003A         ?C0082:
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
003A 900000      R     MOV     DPTR,#status
003D 74FF              MOV     A,#0FFH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 30  

0040         ?C0085:
                                           ; SOURCE LINE # 620
0040 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 621
0043 8006              SJMP    ?C0086
0045         ?C0081:
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
0045 900000      R     MOV     DPTR,#status
0048 7407              MOV     A,#07H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
004B         ?C0086:
                                           ; SOURCE LINE # 627
004B 900000      R     MOV     DPTR,#status
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
                                           ; SOURCE LINE # 628
0050         ?C0087:
0050 22                RET     
             ; FUNCTION EEPROM_Query (END)

             ; FUNCTION _EEPROM_ByteWritePos (BEGIN)
                                           ; SOURCE LINE # 651
0000 900000      R     MOV     DPTR,#dataByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowNumber
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
000A 900000      R     MOV     DPTR,#byteNumber
000D EB                MOV     A,R3
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 657
000F 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 659
0012 900000      R     MOV     DPTR,#rowNumber
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 C3                CLR     C
0019 9480              SUBB    A,#080H
001B 4003              JC      $ + 5H
001D 020000      R     LJMP    ?C0088
0020 900000      R     MOV     DPTR,#byteNumber
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 C3                CLR     C
0027 9410              SUBB    A,#010H
0029 4003              JC      $ + 5H
002B 020000      R     LJMP    ?C0088
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 662
002E 120000      E     LCALL   CySpcLock
0031 EF                MOV     A,R7
0032 6003              JZ      $ + 5H
0034 020000      R     LJMP    ?C0089
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 665
0037 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 31  

003A 74FF              MOV     A,#0FFH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
003D 900000      R     MOV     DPTR,#byteNumber
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 FD                MOV     R5,A
0044 7C00              MOV     R4,#00H
0046 7B01              MOV     R3,#01H
0048 7A00        R     MOV     R2,#HIGH dataByte
004A 7900        R     MOV     R1,#LOW dataByte
004C 900000      E     MOV     DPTR,#?_CySpcLoadMultiByte?BYTE+06H
004F 7401              MOV     A,#01H
0051 F0                MOVX    @DPTR,A
0052 7F40              MOV     R7,#040H
0054 120000      E     LCALL   _CySpcLoadMultiByte
0057 EF                MOV     A,R7
0058 6407              XRL     A,#07H
005A 6003              JZ      $ + 5H
005C 020000      R     LJMP    ?C0090
                                           ; SOURCE LINE # 670
005F         ?C0091:
                                           ; SOURCE LINE # 671
005F 904722            MOV     DPTR,#04722H
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 5402              ANL     A,#02H
0067 FF                MOV     R7,A
0068 7E00              MOV     R6,#00H
006A EF                MOV     A,R7
006B 4E                ORL     A,R6
006C 60F1              JZ      ?C0091
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 674
006E         ?C0092:
                                           ; SOURCE LINE # 677
006E 904722            MOV     DPTR,#04722H
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 5402              ANL     A,#02H
0076 FF                MOV     R7,A
0077 7E00              MOV     R6,#00H
0079 EF                MOV     A,R7
007A 4E                ORL     A,R6
007B 600D              JZ      ?C0094
007D 904722            MOV     DPTR,#04722H
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
0083 13                RRC     A
0084 13                RRC     A
0085 543F              ANL     A,#03FH
0087 FF                MOV     R7,A
0088 8002              SJMP    ?C0095
008A         ?C0094:
008A 7FFF              MOV     R7,#0FFH
008C         ?C0095:
008C EF                MOV     A,R7
008D 7005              JNZ     ?C0093
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 32  

                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
008F 900000      R     MOV     DPTR,#status
0092 E4                CLR     A
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
0094         ?C0093:
                                           ; SOURCE LINE # 683
0094 900000      R     MOV     DPTR,#status
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 7067              JNZ     ?C0096
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
009C 900000      R     MOV     DPTR,#rowNumber
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 FD                MOV     R5,A
00A3 7C00              MOV     R4,#00H
00A5 900000      E     MOV     DPTR,#dieTemperature
00A8 E0                MOVX    A,@DPTR
00A9 FB                MOV     R3,A
00AA 900000      E     MOV     DPTR,#dieTemperature+01H
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
00AF 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
00B2 EF                MOV     A,R7
00B3 F0                MOVX    @DPTR,A
00B4 7F40              MOV     R7,#040H
00B6 120000      E     LCALL   _CySpcWriteRow
00B9 EF                MOV     A,R7
00BA 6407              XRL     A,#07H
00BC 703D              JNZ     ?C0097
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 689
00BE 900000      R     MOV     DPTR,#status
00C1 74FF              MOV     A,#0FFH
00C3 F0                MOVX    @DPTR,A
00C4         ?C0098:
                                           ; SOURCE LINE # 691
00C4 904722            MOV     DPTR,#04722H
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 EF                MOV     A,R7
00CA 5402              ANL     A,#02H
00CC FF                MOV     R7,A
00CD 7E00              MOV     R6,#00H
00CF EF                MOV     A,R7
00D0 4E                ORL     A,R6
00D1 60F1              JZ      ?C0098
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 694
00D3         ?C0099:
                                           ; SOURCE LINE # 697
00D3 904722            MOV     DPTR,#04722H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 5402              ANL     A,#02H
00DB FF                MOV     R7,A
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 33  

00DC 7E00              MOV     R6,#00H
00DE EF                MOV     A,R7
00DF 4E                ORL     A,R6
00E0 600D              JZ      ?C0101
00E2 904722            MOV     DPTR,#04722H
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 13                RRC     A
00E9 13                RRC     A
00EA 543F              ANL     A,#03FH
00EC FF                MOV     R7,A
00ED 8002              SJMP    ?C0102
00EF         ?C0101:
00EF 7FFF              MOV     R7,#0FFH
00F1         ?C0102:
00F1 EF                MOV     A,R7
00F2 7015              JNZ     ?C0090
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
00F4 900000      R     MOV     DPTR,#status
00F7 E4                CLR     A
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
00F9 800E              SJMP    ?C0090
00FB         ?C0097:
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 704
00FB 900000      R     MOV     DPTR,#status
00FE 74FF              MOV     A,#0FFH
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
0101 8006              SJMP    ?C0090
0103         ?C0096:
                                           ; SOURCE LINE # 708
                                           ; SOURCE LINE # 709
0103 900000      R     MOV     DPTR,#status
0106 74FF              MOV     A,#0FFH
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
                                           ; SOURCE LINE # 711
0109         ?C0090:
                                           ; SOURCE LINE # 714
0109 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 715
010C 800E              SJMP    ?C0106
010E         ?C0089:
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
010E 900000      R     MOV     DPTR,#status
0111 7404              MOV     A,#04H
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
0114 8006              SJMP    ?C0106
0116         ?C0088:
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
0116 900000      R     MOV     DPTR,#status
0119 7401              MOV     A,#01H
C51 COMPILER V9.51   EEPROM                                                                05/11/2016 14:38:07 PAGE 34  

011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
011C         ?C0106:
                                           ; SOURCE LINE # 726
011C 900000      R     MOV     DPTR,#status
011F E0                MOVX    A,@DPTR
0120 FF                MOV     R7,A
                                           ; SOURCE LINE # 727
0121         ?C0107:
0121 22                RET     
             ; FUNCTION _EEPROM_ByteWritePos (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1510    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
