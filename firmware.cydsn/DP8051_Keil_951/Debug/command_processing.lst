C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE COMMAND_PROCESSING
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\command_processing.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\command_processing.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Kei
                    -l_951\Debug/command_processing.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\command_processing.obj)

line level    source

   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          
   7          /**
   8          * \file         command_processing.c
   9          *
  10          
  11          * \brief        Command processing functions.
  12          * \date         Dic. 1, 2015
  13          * \author       qbrobotics
  14          * \copyright    (C)  qbrobotics. All rights reserved.
  15          */
  16          
  17          //=================================================================     includes
  18          #include <command_processing.h>
  19          #include <stdio.h>
  20          #include <interruptions.h>
  21          
  22          #include "commands.h"
  23          #include "utils.h"
  24          
  25          //================================================================     variables
  26          
  27          reg8 * EEPROM_ADDR = (reg8 *) CYDEV_EE_BASE;
  28          
  29          //==============================================================================
  30          //                                                            RX DATA PROCESSING
  31          //==============================================================================
  32          //  This function checks for the availability of a data packet and process it:
  33          //      - Verify checksum;
  34          //      - Process commands;
  35          //==============================================================================
  36          
  37          void commProcess(){
  38   1          
  39   1          uint8 CYDATA rx_cmd;
  40   1      
  41   1          rx_cmd = g_rx.buffer[0];
  42   1      
  43   1      //==========================================================     verify checksum
  44   1      
  45   1          if (!(LCRChecksum(g_rx.buffer, g_rx.length - 1) == g_rx.buffer[g_rx.length - 1])){
  46   2              // Wrong checksum
  47   2              g_rx.ready = 0;
  48   2              return;
  49   2          }
  50   1      
  51   1          switch(rx_cmd){
  52   2      //=====================================================     CMD_GET_MEASUREMENTS
  53   2      
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 2   

  54   2              case CMD_GET_MEASUREMENTS:
  55   2                  cmd_get_measurements();
  56   2                  break;
  57   2                  
  58   2      //============================================================     CMD_GET_INPUT
  59   2      
  60   2              case CMD_GET_INPUTS:
  61   2                  cmd_get_inputs();
  62   2                  break;
  63   2      //=========================================================     CMD_GET_CURRENTS
  64   2      
  65   2              case CMD_GET_CURRENTS:
  66   2                  cmd_get_currents();
  67   2                  break;
  68   2      
  69   2      //====================================================     CMD_GET_CURR_AND_MEAS
  70   2      
  71   2              case CMD_GET_CURR_AND_MEAS:
  72   2                  cmd_get_curr_and_meas();
  73   2                  break;
  74   2                  
  75   2      //===========================================================     CMD_SET_INPUTS
  76   2      
  77   2              case CMD_SET_INPUTS:
  78   2                  cmd_set_inputs();
  79   2                  break;
  80   2                  
  81   2      //========================================================     CMD_SET_POS_STIFF
  82   2      
  83   2              case CMD_SET_POS_STIFF:
  84   2                  cmd_set_pos_stiff();
  85   2                  break;
  86   2                  
  87   2      //=======================================================     CMD_GET_VELOCITIES
  88   2      
  89   2              case CMD_GET_VELOCITIES:
  90   2                  cmd_get_velocities();
  91   2                  break;
  92   2      
  93   2      //=============================================================     CMD_ACTIVATE
  94   2              case CMD_ACTIVATE:
  95   2                  cmd_activate();
  96   2                  break;
  97   2                  
  98   2      //=============================================================     CMD_WATCHDOG
  99   2                  
 100   2              case CMD_SET_WATCHDOG:
 101   2                  cmd_set_watchdog();
 102   2                  break;
 103   2                  
 104   2      //=========================================================     CMD_GET_ACTIVATE
 105   2                  
 106   2              case CMD_GET_ACTIVATE:
 107   2                  cmd_get_activate();
 108   2                  break;
 109   2                  
 110   2      //=========================================================     CMD_SET_BAUDRATE
 111   2                  
 112   2              case CMD_SET_BAUDRATE:
 113   2                  cmd_set_baudrate();
 114   2                  break;  
 115   2                  
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 3   

 116   2      //=============================================================     CMD_GET_INFO
 117   2                  
 118   2              case CMD_GET_INFO:
 119   2                  infoGet( *((uint16 *) &g_rx.buffer[1]));
 120   2                  break;
 121   2      
 122   2      //============================================================     CMD_SET_PARAM
 123   2                  
 124   2              case CMD_SET_PARAM:
 125   2                  paramSet( *((uint16 *) &g_rx.buffer[1]) );
 126   2                  break;
 127   2      
 128   2      //============================================================     CMD_GET_PARAM
 129   2                  
 130   2              case CMD_GET_PARAM:
 131   2                  paramGet( *((uint16 *) &g_rx.buffer[1]) );
 132   2                  break;
 133   2      
 134   2      //=================================================================     CMD_PING
 135   2                  
 136   2              case CMD_PING:
 137   2                  cmd_ping();
 138   2                  break;
 139   2      
 140   2      //=========================================================     CMD_STORE_PARAMS
 141   2                  
 142   2              case CMD_STORE_PARAMS:
 143   2                  cmd_store_params();
 144   2                  break;
 145   2      
 146   2      //=================================================     CMD_STORE_DEFAULT_PARAMS
 147   2                  
 148   2              case CMD_STORE_DEFAULT_PARAMS:
 149   2                  if ( memStore(DEFAULT_EEPROM_DISPLACEMENT) ) {
 150   3                      sendAcknowledgment(ACK_OK);
 151   3                  } else {
 152   3                      sendAcknowledgment(ACK_ERROR);
 153   3                  }
 154   2                  break;
 155   2      
 156   2      //=======================================================     CMD_RESTORE_PARAMS
 157   2      
 158   2              case CMD_RESTORE_PARAMS:
 159   2                  if ( memRestore() ) {
 160   3                      sendAcknowledgment(ACK_OK);
 161   3                  } else {
 162   3                      sendAcknowledgment(ACK_ERROR);
 163   3                  }
 164   2                  break;
 165   2      
 166   2      //=============================================================     CMD_INIT_MEM
 167   2      
 168   2              case CMD_INIT_MEM:
 169   2                  if ( memInit() ) {
 170   3                      sendAcknowledgment(ACK_OK);
 171   3                  } else {
 172   3                      sendAcknowledgment(ACK_ERROR);
 173   3                  }
 174   2                  break;
 175   2      
 176   2      //===========================================================     CMD_BOOTLOADER
 177   2              case CMD_BOOTLOADER:
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 4   

 178   2                  sendAcknowledgment(ACK_OK);
 179   2                  CyDelay(1000);
 180   2                  FTDI_ENABLE_REG_Write(0x00);
 181   2                  CyDelay(1000);
 182   2                  Bootloadable_Load();
 183   2                  break;
 184   2      
 185   2      //============================================================     CMD_CALIBRATE
 186   2              case CMD_CALIBRATE:
 187   2                  calibration_flag = START;
 188   2                  sendAcknowledgment(ACK_OK);
 189   2                  break;
 190   2          }
 191   1      
 192   1          g_rx.ready = 0;
 193   1      }
 194          
 195          //==============================================================================
 196          //                                                              COMMAND GET INFO
 197          //==============================================================================
 198          
 199          void infoGet(uint16 info_type){
 200   1          unsigned char packet_string[1100];
 201   1      
 202   1      //======================================     choose info type and prepare string
 203   1      
 204   1          switch (info_type) {
 205   2              case INFO_ALL:
 206   2                  infoPrepare(packet_string);
 207   2                  UART_RS485_PutString(packet_string);
 208   2                  break;
 209   2              default:
 210   2                  break;
 211   2          }
 212   1      }
 213          
 214          //==============================================================================
 215          //                                                        COMMAND SET PARAMETER
 216          //==============================================================================
 217          
 218          void paramSet(uint16 param_type)
 219          {
 220   1          uint8 CYDATA i;
 221   1      
 222   1          switch(param_type)
 223   1          {
 224   2              //-----------------------------------------------------------     Set Id
 225   2              case PARAM_ID:
 226   2                  g_mem.id = g_rx.buffer[3];
 227   2                  break;
 228   2      
 229   2              //----------------------------------------------------     Set PID Param
 230   2              case PARAM_PID_CONTROL:
 231   2                  g_mem.k_p = *((double *) &g_rx.buffer[3]) * 65536;
 232   2                  g_mem.k_i = *((double *) &g_rx.buffer[3 + 4]) * 65536;
 233   2                  g_mem.k_d = *((double *) &g_rx.buffer[3 + 8]) * 65536;
 234   2                  break;
 235   2      
 236   2              //-----------------------------------------------     Set Curr PID Param
 237   2              case PARAM_PID_CURR_CONTROL:
 238   2                  g_mem.k_p_c = *((double *) &g_rx.buffer[3]) * 65536;
 239   2                  g_mem.k_i_c = *((double *) &g_rx.buffer[3 + 4]) * 65536;
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 5   

 240   2                  g_mem.k_d_c = *((double *) &g_rx.buffer[3 + 8]) * 65536;
 241   2                  break;
 242   2      
 243   2              //--------------------------------------     Set Startup Activation Flag
 244   2              case PARAM_STARTUP_ACTIVATION:
 245   2                  g_mem.activ = g_rx.buffer[3];
 246   2                  break;
 247   2      
 248   2              //---------------------------------------------------     Set Input Mode
 249   2              case PARAM_INPUT_MODE:
 250   2                  g_mem.input_mode = g_rx.buffer[3];
 251   2                  break;
 252   2      
 253   2              //-------------------------------------------------     Set Control Mode
 254   2              case PARAM_CONTROL_MODE:
 255   2                  g_mem.control_mode = g_rx.buffer[3];
 256   2                  break;
 257   2      
 258   2              //---------------------------------------------------     Set Resolution
 259   2              case PARAM_POS_RESOLUTION:
 260   2                  for (i =0; i < NUM_OF_SENSORS; ++i) 
 261   2                      g_mem.res[i] = g_rx.buffer[i + 3];
 262   2                  
 263   2                  break;
 264   2      
 265   2              //------------------------------------------------------     Set Offsets
 266   2              case PARAM_MEASUREMENT_OFFSET:
 267   2                  for(i = 0; i < NUM_OF_SENSORS; ++i)
 268   2                  {
 269   3                      g_mem.m_off[i] = *((int16 *) &g_rx.buffer[3 + i * 2]);
 270   3                      g_mem.m_off[i] = g_mem.m_off[i] << g_mem.res[i];
 271   3      
 272   3                      g_meas.rot[i] = 0;
 273   3                  }
 274   2                  reset_last_value_flag = 1;
 275   2                  break;
 276   2      
 277   2              //--------------------------------------------------     Set Multipliers
 278   2              case PARAM_MEASUREMENT_MULTIPLIER:
 279   2                  for(i = 0; i < NUM_OF_SENSORS; ++i)
 280   2                  {
 281   3                      g_mem.m_mult[i] =
 282   3                          *((double *) &g_rx.buffer[3 + i * 4]);
 283   3                  }
 284   2                  break;
 285   2      
 286   2              //------------------------------------------     Set Position Limit Flag
 287   2              case PARAM_POS_LIMIT_FLAG:
 288   2                  g_mem.pos_lim_flag = *((uint8 *) &g_rx.buffer[3]);
 289   2                  break;
 290   2      
 291   2              //-----------------------------------------------     Set Position Limit
 292   2              case PARAM_POS_LIMIT:
 293   2                  for (i = 0; i < NUM_OF_MOTORS; i++) {
 294   3                      g_mem.pos_lim_inf[i] = *((int16 *) &g_rx.buffer[3 + (i * 4)]);
 295   3                      g_mem.pos_lim_sup[i] = *((int16 *) &g_rx.buffer[3 + (i * 4) + 2]);
 296   3      
 297   3                      g_mem.pos_lim_inf[i] = g_mem.pos_lim_inf[i] << g_mem.res[i];
 298   3                      g_mem.pos_lim_sup[i] = g_mem.pos_lim_sup[i] << g_mem.res[i];
 299   3      
 300   3                  }
 301   2                  break;
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 6   

 302   2      
 303   2              //------------------------------------------------     Set Current Limit
 304   2              case PARAM_CURRENT_LIMIT:
 305   2                  g_mem.current_limit = *((int16*) &g_rx.buffer[3]);
 306   2                  break;
 307   2      
 308   2          }
 309   1          sendAcknowledgment(ACK_OK);
 310   1      }
 311          
 312          //==============================================================================
 313          //                                                         COMMAND GET PARAMETER
 314          //==============================================================================
 315          
 316          void paramGet(uint16 param_type)
 317          {
 318   1          uint8 packet_data[20];
 319   1          uint16 packet_lenght;
 320   1          uint8 i;
 321   1      
 322   1          packet_data[0] = CMD_GET_PARAM;
 323   1      
 324   1          switch(param_type)
 325   1          {
 326   2              //-----------------------------------------------------------     Get Id
 327   2              case PARAM_ID:
 328   2                  packet_data[1] = c_mem.id;
 329   2                  packet_lenght = 3;
 330   2                  break;
 331   2      
 332   2              //----------------------------------------------------     Get PID Param
 333   2              case PARAM_PID_CONTROL:
 334   2                  *((double *) (packet_data + 1)) = (double) c_mem.k_p / 65536;
 335   2                  *((double *) (packet_data + 5)) = (double) c_mem.k_i / 65536;
 336   2                  *((double *) (packet_data + 9)) = (double) c_mem.k_d / 65536;
 337   2                  packet_lenght = 14;
 338   2                  break;
 339   2      
 340   2              //-----------------------------------------------     Get Curr PID Param
 341   2              case PARAM_PID_CURR_CONTROL:
 342   2                  *((double *) (packet_data + 1)) = (double) c_mem.k_p_c / 65536;
 343   2                  *((double *) (packet_data + 5)) = (double) c_mem.k_i_c / 65536;
 344   2                  *((double *) (packet_data + 9)) = (double) c_mem.k_d_c / 65536;
 345   2                  packet_lenght = 14;
 346   2                  break;
 347   2      
 348   2              //--------------------------------------     Get Startup Activation Flag
 349   2              case PARAM_STARTUP_ACTIVATION:
 350   2                  packet_data[1] = c_mem.activ;
 351   2                  packet_lenght = 3;
 352   2                  break;
 353   2      
 354   2              //---------------------------------------------------     Get Input Mode
 355   2              case PARAM_INPUT_MODE:
 356   2                  packet_data[1] = c_mem.input_mode;
 357   2                  packet_lenght = 3;
 358   2                  break;
 359   2      
 360   2              //-------------------------------------------------     Get Control Mode
 361   2              case PARAM_CONTROL_MODE:
 362   2                  packet_data[1] = c_mem.control_mode;
 363   2                  packet_lenght = 3;
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 7   

 364   2                  break;
 365   2      
 366   2              //---------------------------------------------------     Get Resolution
 367   2              case PARAM_POS_RESOLUTION:
 368   2                  for (i = 0; i < NUM_OF_SENSORS; i++) {
 369   3                      packet_data[i+1] = c_mem.res[i];
 370   3                  }
 371   2                  packet_lenght = NUM_OF_SENSORS + 2;
 372   2                  break;
 373   2      
 374   2              //------------------------------------------------------     Get Offsets
 375   2              case PARAM_MEASUREMENT_OFFSET:
 376   2                  for(i = 0; i < NUM_OF_SENSORS; ++i)
 377   2                  {
 378   3                      *((int16 *) ( packet_data + 1 + (i * 2) )) = (int16) (c_mem.m_off[i] >> c_mem.res[i]);
 379   3      
 380   3                  }
 381   2      
 382   2                  packet_lenght = 2 + NUM_OF_SENSORS * 2;
 383   2                  break;
 384   2      
 385   2              //--------------------------------------------------     Get Multipliers
 386   2              case PARAM_MEASUREMENT_MULTIPLIER:
 387   2                  for(i = 0; i < NUM_OF_SENSORS; ++i)
 388   2                  {
 389   3                      *((double *) ( packet_data + 1 + (i * 4) )) =
 390   3                          c_mem.m_mult[i];
 391   3                  }
 392   2      
 393   2                  packet_lenght = 2 + NUM_OF_SENSORS * 4;
 394   2                  break;
 395   2      
 396   2              //------------------------------------------     Get Position Limit Flag
 397   2              case PARAM_POS_LIMIT_FLAG:
 398   2                  packet_data[1] = c_mem.pos_lim_flag;
 399   2                  packet_lenght = 3;
 400   2                  break;
 401   2      
 402   2              //-----------------------------------------------     Get Position Limit
 403   2              case PARAM_POS_LIMIT:
 404   2                  for (i = 0; i < NUM_OF_MOTORS; i++) {
 405   3                      *((int32 *)( packet_data + 1 + (i * 2 * 4) )) =
 406   3                          c_mem.pos_lim_inf[i];
 407   3                      *((int32 *)( packet_data + 1 + (i * 2 * 4) + 4)) =
 408   3                          c_mem.pos_lim_sup[i];
 409   3                  }
 410   2                  packet_lenght = 2 + (NUM_OF_MOTORS * 2 * 4);
 411   2                  break;
 412   2      
 413   2              //------------------------------------------------     Get Current Limit
 414   2              case PARAM_CURRENT_LIMIT:
 415   2                  *((int16 *)(packet_data + 1)) = c_mem.current_limit;
 416   2                  packet_lenght = 4;
 417   2                  break;
 418   2      
 419   2          }
 420   1      
 421   1          packet_data[packet_lenght - 1] = LCRChecksum(packet_data,packet_lenght - 1);
 422   1          commWrite(packet_data, packet_lenght);
 423   1      
 424   1      }
 425          
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 8   

 426          //==============================================================================
 427          //                                                           PREPARE DEVICE INFO
 428          //==============================================================================
 429          
 430          void infoPrepare(unsigned char *info_string)
 431          {
 432   1          int CYDATA i;
 433   1      
 434   1          unsigned char str[50];
 435   1          
 436   1          strcpy(info_string, "");
 437   1          strcat(info_string, "\r\n");
 438   1          strcat(info_string, "Firmware version: ");
 439   1          strcat(info_string, VERSION);
 440   1          strcat(info_string, ".\r\n\r\n");
 441   1      
 442   1          strcat(info_string,"DEVICE INFO\r\n");
 443   1          sprintf(str,"ID: %d\r\n",(int) c_mem.id);
 444   1          strcat(info_string,str);
 445   1          sprintf(str,"Number of sensors: %d\r\n",(int) NUM_OF_SENSORS);
 446   1          strcat(info_string,str);
 447   1          sprintf(str,"PWM Limit: %d\r\n",(int) dev_pwm_limit);
 448   1          strcat(info_string,str);
 449   1          strcat(info_string,"\r\n");
 450   1      
 451   1          strcat(info_string, "MOTOR INFO\r\n");
 452   1          strcat(info_string, "Motor references: ");
 453   1          
 454   1          for (i = 0; i < NUM_OF_MOTORS; i++) {
 455   2              sprintf(str, "%d ", (int)(g_refOld.pos[i] >> c_mem.res[i]));
 456   2              strcat(info_string,str);
 457   2          }
 458   1          strcat(info_string,"\r\n");
 459   1      
 460   1          sprintf(str, "Motor enabled: ");
 461   1          
 462   1          if (g_refOld.onoff & 0x03) {
 463   2              strcat(str,"YES\r\n");
 464   2          } else {
 465   2              strcat(str,"NO\r\n");
 466   2          }
 467   1          strcat(info_string, str);
 468   1      
 469   1      
 470   1          strcat(info_string,"\r\nMEASUREMENTS INFO\r\n");
 471   1          strcat(info_string, "Sensor value:\r\n");
 472   1          for (i = 0; i < NUM_OF_SENSORS; i++) {
 473   2              sprintf(str,"%d -> %d", i+1,
 474   2                  (int)(g_measOld.pos[i] >> c_mem.res[i]));
 475   2              strcat(info_string, str);
 476   2              strcat(info_string, "\r\n");
 477   2          }
 478   1          sprintf(str,"Voltage (mV): %ld", (int32) dev_tension );
 479   1          strcat(info_string, str);
 480   1          strcat(info_string,"\r\n");
 481   1      
 482   1          sprintf(str,"Current 1 (mA): %ld", (int32) g_measOld.curr[0] );
 483   1          strcat(info_string, str);
 484   1          strcat(info_string,"\r\n");
 485   1      
 486   1          sprintf(str,"Current 2 (mA): %ld", (int32) g_measOld.curr[1] );
 487   1          strcat(info_string, str);
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 9   

 488   1          strcat(info_string,"\r\n");
 489   1      
 490   1      
 491   1          strcat(info_string, "\r\nDEVICE PARAMETERS\r\n");
 492   1      
 493   1          strcat(info_string, "PID Controller:\r\n");
 494   1          sprintf(str,"P -> %f\r\n", ((double) c_mem.k_p / 65536));
 495   1          strcat(info_string, str);
 496   1          sprintf(str,"I -> %f\r\n", ((double) c_mem.k_i / 65536));
 497   1          strcat(info_string, str);
 498   1          sprintf(str,"D -> %f\r\n", ((double) c_mem.k_d / 65536));
 499   1          strcat(info_string, str);
 500   1      
 501   1          strcat(info_string, "Current PID Controller:\r\n");
 502   1          sprintf(str,"P -> %f\r\n", ((double) c_mem.k_p_c / 65536));
 503   1          strcat(info_string, str);
 504   1          sprintf(str,"I -> %f\r\n", ((double) c_mem.k_i_c / 65536));
 505   1          strcat(info_string, str);
 506   1          sprintf(str,"D -> %f\r\n", ((double) c_mem.k_d_c / 65536));
 507   1          strcat(info_string, str);
 508   1      
 509   1          strcat(info_string,"\r\n");
 510   1      
 511   1          if (c_mem.activ == 0x03) {
 512   2              strcat(info_string, "Startup activation: YES\r\n");
 513   2          } else {
 514   2              strcat(info_string, "Startup activation: NO\r\n");
 515   2          }
 516   1      
 517   1          switch(c_mem.input_mode) {
 518   2              case 0:
 519   2                  strcat(info_string, "Input mode: USB\r\n");
 520   2                  break;
 521   2              case 1:
 522   2                  strcat(info_string, "Input mode: Sensor 3\r\n");
 523   2                  break;
 524   2          }
 525   1      
 526   1          strcat(info_string, "Control Mode: ");
 527   1          switch(c_mem.control_mode) {
 528   2              case CONTROL_ANGLE:
 529   2                  strcat(info_string, "Position\r\n");
 530   2                  break;
 531   2              case CONTROL_PWM:
 532   2                  strcat(info_string, "PWM\r\n");
 533   2                  break;
 534   2              case CONTROL_CURRENT:
 535   2                  strcat(info_string, "Current\r\n");
 536   2                  break;
 537   2              case CURR_AND_POS_CONTROL:
 538   2                  strcat(info_string, "Current and position\r\n");
 539   2                  break;
 540   2          }
 541   1      
 542   1      
 543   1      
 544   1          strcat(info_string, "Sensor resolution:\r\n");
 545   1          for(i = 0; i < NUM_OF_SENSORS; ++i)
 546   1          {
 547   2              sprintf(str,"%d -> %d", (int) (i + 1),
 548   2                  (int) c_mem.res[i]);
 549   2              strcat(info_string, str);
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 10  

 550   2              strcat(info_string,"\r\n");
 551   2          }
 552   1      
 553   1      
 554   1          strcat(info_string, "Measurement Offset:\r\n");
 555   1          for(i = 0; i < NUM_OF_SENSORS; ++i)
 556   1          {
 557   2              sprintf(str,"%d -> %ld", (int) (i + 1),
 558   2                  (int32) c_mem.m_off[i] >> c_mem.res[i]);
 559   2              strcat(info_string, str);
 560   2              strcat(info_string,"\r\n");
 561   2          }
 562   1      
 563   1          strcat(info_string, "Measurement Multiplier:\r\n");
 564   1          for(i = 0; i < NUM_OF_SENSORS; ++i)
 565   1          {
 566   2              sprintf(str,"%d -> %f", (int)(i + 1),
 567   2                  (double) c_mem.m_mult[i]);
 568   2              strcat(info_string, str);
 569   2              strcat(info_string,"\r\n");
 570   2          }
 571   1      
 572   1          sprintf(str, "Position limit active: %d", (int)g_mem.pos_lim_flag);
 573   1          strcat(info_string, str);
 574   1          strcat(info_string,"\r\n");
 575   1      
 576   1          for (i = 0; i < NUM_OF_MOTORS; i++) {
 577   2              sprintf(str, "Position limit motor %d: inf -> %ld  ", (int)(i + 1),
 578   2                      (int32)g_mem.pos_lim_inf[i] >> g_mem.res[i]);
 579   2              strcat(info_string, str);
 580   2      
 581   2              sprintf(str, "sup -> %ld\r\n",
 582   2                      (int32)g_mem.pos_lim_sup[i] >> g_mem.res[i]);
 583   2              strcat(info_string, str);
 584   2          }
 585   1      
 586   1          sprintf(str, "Max stiffness: %d", (int)g_mem.max_stiffness >> g_mem.res[0]);
 587   1          strcat(info_string, str);
 588   1          strcat(info_string,"\r\n");
 589   1      
 590   1          sprintf(str, "Current limit: %d", (int)g_mem.current_limit);
 591   1          strcat(info_string, str);
 592   1          strcat(info_string,"\r\n");
 593   1          
 594   1          sprintf(str, "debug: %ld", (uint32) timer_value0 - (uint32) timer_value);
 595   1          strcat(info_string, str);
 596   1          strcat(info_string, "\r\n");
 597   1      }
 598          
 599          //==============================================================================
 600          //                                                      WRITE FUNCTION FOR RS485
 601          //==============================================================================
 602          
 603          void commWrite(uint8 *packet_data, const uint8 packet_lenght)
 604          {
 605   1          uint16 CYDATA index;
 606   1      
 607   1          // frame - start
 608   1          UART_RS485_PutChar(':');
 609   1          UART_RS485_PutChar(':');
 610   1          
 611   1          // frame - ID
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 11  

 612   1          UART_RS485_PutChar(g_mem.id);
 613   1          
 614   1          // frame - length
 615   1          UART_RS485_PutChar(packet_lenght);
 616   1          
 617   1          // frame - packet data
 618   1          for(index = 0; index < packet_lenght; ++index)
 619   1              UART_RS485_PutChar(packet_data[index]);
 620   1          
 621   1          index = 0;
 622   1      
 623   1          while(!(UART_RS485_ReadTxStatus() & UART_RS485_TX_STS_COMPLETE) && index++ <= 1000){}
 624   1      
 625   1          RS485_CTS_Write(1);
 626   1          RS485_CTS_Write(0);
 627   1      }
 628          
 629          //==============================================================================
 630          //                                                       ACKNOWLEDGMENT FUNCTION
 631          //==============================================================================
 632          
 633          void sendAcknowledgment(const uint8 value) {
 634   1      
 635   1          // Packet: header + crc
 636   1          
 637   1          uint8 CYDATA packet_data[2];
 638   1      
 639   1          // Header
 640   1          packet_data[0] = value;
 641   1          
 642   1          // Payload/CRC
 643   1          packet_data[1] = value;
 644   1      
 645   1          commWrite(packet_data, 2);
 646   1      }
 647          
 648          //==============================================================================
 649          //                                                                  STORE MEMORY
 650          //==============================================================================
 651          /**
 652          * This function stores current memory settings on the eeprom with the specified
 653          * displacement
 654          **/
 655          
 656          uint8 memStore(int displacement) {
 657   1      
 658   1          uint8 writeStatus;
 659   1          int i;
 660   1          int pages;
 661   1          uint8 ret_val = 1;
 662   1      
 663   1          PWM_MOTORS_WriteCompare1(0);
 664   1          PWM_MOTORS_WriteCompare2(0);
 665   1      
 666   1          // Retrieve temperature for better writing performance
 667   1          EEPROM_UpdateTemperature();
 668   1      
 669   1          memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 670   1      
 671   1          pages = sizeof(g_mem) / 16 + (sizeof(g_mem) % 16 > 0);
 672   1      
 673   1          for(i = 0; i < pages; ++i) {
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 12  

 674   2              writeStatus = EEPROM_Write(&g_mem.flag + 16 * i, i + displacement);
 675   2              if(writeStatus != CYRET_SUCCESS) {
 676   3                  ret_val = 0;
 677   3                  break;
 678   3              }
 679   2          }
 680   1      
 681   1          memcpy( &g_mem, &c_mem, sizeof(g_mem) );
 682   1      
 683   1          return ret_val;
 684   1      }
 685          
 686          
 687          //==============================================================================
 688          //                                                                 RECALL MEMORY
 689          //==============================================================================
 690          /**
 691          * This function loads user settings from the eeprom.
 692          **/
 693          
 694          void memRecall(void) {
 695   1      
 696   1          uint16 i;
 697   1      
 698   1          for (i = 0; i < sizeof(g_mem); i++) 
 699   1              ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i];
 700   1         
 701   1      
 702   1          //check for initialization
 703   1          if (g_mem.flag == FALSE) 
 704   1              memRestore();
 705   1          else 
 706   1              memcpy( &c_mem, &g_mem, sizeof(g_mem) );
 707   1          
 708   1      }
 709          
 710          
 711          //==============================================================================
 712          //                                                                RESTORE MEMORY
 713          //==============================================================================
 714          /**
 715          * This function loads default settings from the eeprom.
 716          **/
 717          
 718          uint8 memRestore(void) {
 719   1      
 720   1          uint16 i;
 721   1      
 722   1          for (i = 0; i < sizeof(g_mem); i++) 
 723   1              ((reg8 *) &g_mem.flag)[i] = EEPROM_ADDR[i + (DEFAULT_EEPROM_DISPLACEMENT * 16)];
 724   1          
 725   1      
 726   1          //check for initialization
 727   1          if (g_mem.flag == FALSE) 
 728   1              return memInit();
 729   1           else 
 730   1              return memStore(0);
 731   1         
 732   1      }
 733          
 734          //==============================================================================
 735          //                                                                   MEMORY INIT
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 13  

 736          //==============================================================================
 737          /**
 738          * This function initialize memory when eeprom is compromised.
 739          **/
 740          
 741          uint8 memInit(void) {
 742   1      
 743   1          uint8 CYDATA i;
 744   1          //initialize memory settings
 745   1          g_mem.id                =   1;
 746   1          g_mem.k_p               =   0.1 * 65536;
 747   1          g_mem.k_i               =   0 * 65536;
 748   1          g_mem.k_d               =   0.8 * 65536;
 749   1          g_mem.k_p_c             =   5 * 65536;
 750   1          g_mem.k_i_c             =   0 * 65536;
 751   1          g_mem.k_d_c             =   0.8 * 65536;
 752   1          g_mem.activ             =   0;
 753   1          g_mem.input_mode        =   0;
 754   1          g_mem.control_mode      =   0;
 755   1          g_mem.watchdog_period   =   MAX_WATCHDOG_TIMER;
 756   1      
 757   1          g_mem.pos_lim_flag = 1;
 758   1      
 759   1          for (i = 0; i < NUM_OF_MOTORS; i++) {
 760   2              g_mem.pos_lim_inf[i] = -30000;
 761   2              g_mem.pos_lim_sup[i] =  30000;
 762   2          }
 763   1      
 764   1          for(i = 0; i < NUM_OF_SENSORS; ++i)
 765   1          {
 766   2              g_mem.m_mult[i] = 1;
 767   2              g_mem.res[i] = 1;
 768   2          }
 769   1      
 770   1          g_mem.m_off[0] = (int32)0 << g_mem.res[0];
 771   1          g_mem.m_off[1] = (int32)0 << g_mem.res[1];
 772   1          g_mem.m_off[2] = (int32)0 << g_mem.res[2];
 773   1      
 774   1          g_mem.max_stiffness = (int32)3000 << g_mem.res[0];
 775   1      
 776   1          g_mem.current_limit = DEFAULT_CURRENT_LIMIT;
 777   1      
 778   1          //set the initialized flag to show EEPROM has been populated
 779   1          g_mem.flag = TRUE;
 780   1      
 781   1          //write that configuration to EEPROM
 782   1          return ( memStore(0) && memStore(DEFAULT_EEPROM_DISPLACEMENT) );
 783   1      }
 784          
 785          //==============================================================================
 786          //                                                    ROUTINE INTERRUPT FUNCTION
 787          //==============================================================================
 788          /**
 789          * Bunch of functions used on request from UART communication
 790          **/
 791          
 792          void cmd_get_measurements(){
 793   1         
 794   1          
 795   1          uint8 CYDATA index;
 796   1         
 797   1          // Packet: header + measure(int16) + crc
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 14  

 798   1          
 799   1          #if (NUM_OF_SENSORS == 4)
                      uint8 packet_data[10];
                  #endif
 802   1          #if  (NUM_OF_SENSORS == 3)
 803   1              uint8 packet_data[8]; 
 804   1          #endif
 805   1      
 806   1          //Header package
 807   1          packet_data[0] = CMD_GET_MEASUREMENTS;   
 808   1          
 809   1          for (index = NUM_OF_SENSORS; index--;) 
 810   1              *((int16 *) &packet_data[(index << 1) + 1]) = (int16)(g_measOld.pos[index] >> g_mem.res[index]);
 811   1                  
 812   1          // Calculate Checksum and send message to UART 
 813   1              
 814   1          #if (NUM_OF_SENSORS == 4)
                      packet_data[9] = LCRChecksum (packet_data, 9);
                      commWrite(packet_data, 10);
                  #endif
 818   1          #if  (NUM_OF_SENSORS == 3)
 819   1              packet_data[7] = LCRChecksum (packet_data, 7);
 820   1              commWrite(packet_data, 8);
 821   1          #endif
 822   1          
 823   1      }
 824          
 825          void cmd_get_inputs(){
 826   1      
 827   1          // Packet: header + motor_measure(int16) + crc
 828   1      
 829   1          uint8 packet_data[6]; 
 830   1          
 831   1          //Header package
 832   1      
 833   1          packet_data[0] = CMD_GET_INPUTS;
 834   1          
 835   1          *((int16 *) &packet_data[1]) = (int16) (g_refOld.pos[0]  >> g_mem.res[0]);
 836   1          *((int16 *) &packet_data[3]) = (int16) (g_refOld.pos[1]  >> g_mem.res[1]);
 837   1          
 838   1          // Calculate Checksum and send message to UART 
 839   1      
 840   1          packet_data[5] = LCRChecksum(packet_data, 5);
 841   1      
 842   1          commWrite(packet_data, 6);
 843   1      
 844   1      }
 845          
 846          void cmd_get_currents(){
 847   1          
 848   1          // Packet: header + motor_measure(int16) + crc
 849   1          
 850   1          uint8 packet_data[6]; 
 851   1          
 852   1          //Header package
 853   1      
 854   1          packet_data[0] = CMD_GET_CURRENTS;
 855   1      
 856   1          *((int16 *) &packet_data[1]) = (int16) g_measOld.curr[0];
 857   1          *((int16 *) &packet_data[3]) = (int16) g_measOld.curr[1];
 858   1      
 859   1          // Calculate Checksum and send message to UART 
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 15  

 860   1      
 861   1          packet_data[5] = LCRChecksum (packet_data, 5);
 862   1      
 863   1          commWrite(packet_data, 6);
 864   1      }
 865          
 866          void cmd_get_curr_and_meas(){
 867   1          
 868   1          uint8 CYDATA index;
 869   1         
 870   1          //Packet: header + curr_meas(int16) + pos_meas(int16) + CRC
 871   1          
 872   1          #if (NUM_OF_SENSORS == 4)
                      uint8 packet_data[14];
                  #endif
 875   1          #if  (NUM_OF_SENSORS == 3)
 876   1              uint8 packet_data[12]; 
 877   1          #endif
 878   1      
 879   1          //Header package
 880   1          packet_data[0] = CMD_GET_CURR_AND_MEAS;
 881   1          
 882   1          // Currents
 883   1          *((int16 *) &packet_data[1]) = (int16) g_measOld.curr[0];
 884   1          *((int16 *) &packet_data[3]) = (int16) g_measOld.curr[1];
 885   1      
 886   1          // Positions
 887   1          for (index = NUM_OF_SENSORS; index--;) 
 888   1              *((int16 *) &packet_data[(index << 2) + 5]) = (int16) (g_measOld.pos[index] >> g_mem.res[index]);
 889   1              
 890   1          // Calculate Checksum and send message to UART 
 891   1              
 892   1          #if (NUM_OF_SENSORS == 4)
                      packet_data[13] = LCRChecksum (packet_data, 13);
                      commWrite(packet_data, 14);
                  #endif
 896   1          #if  (NUM_OF_SENSORS == 3)
 897   1              packet_data[11] = LCRChecksum (packet_data, 11);
 898   1              commWrite(packet_data, 12);
 899   1          #endif
 900   1      }
 901          
 902          void cmd_set_inputs(){
 903   1          
 904   1          // Store position setted in right variables
 905   1          g_refNew.pos[0] = *((int16 *) &g_rx.buffer[1]);   // motor 1
 906   1          g_refNew.pos[0] = g_refNew.pos[0] << g_mem.res[0];
 907   1      
 908   1          g_refNew.pos[1] = *((int16 *) &g_rx.buffer[3]);   // motor 2
 909   1          g_refNew.pos[1] = g_refNew.pos[1] << g_mem.res[1];
 910   1      
 911   1          // Check Position Limit cmd
 912   1          if (c_mem.pos_lim_flag) {                      
 913   2              
 914   2              if (g_refNew.pos[0] < c_mem.pos_lim_inf[0]) 
 915   2                  g_refNew.pos[0] = c_mem.pos_lim_inf[0];
 916   2              if (g_refNew.pos[1] < c_mem.pos_lim_inf[1]) 
 917   2                  g_refNew.pos[1] = c_mem.pos_lim_inf[1];
 918   2      
 919   2              if (g_refNew.pos[0] > c_mem.pos_lim_sup[0]) 
 920   2                  g_refNew.pos[0] = c_mem.pos_lim_sup[0];
 921   2              if (g_refNew.pos[1] > c_mem.pos_lim_sup[1]) 
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 16  

 922   2                  g_refNew.pos[1] = c_mem.pos_lim_sup[1];
 923   2          }
 924   1      }
 925          
 926          void cmd_set_pos_stiff(){
 927   1          
 928   1          int32 CYDATA pos, stiff;
 929   1          
 930   1          // Load position e stiffness
 931   1      
 932   1          pos = *((int16 *) &g_rx.buffer[1]);      // equilibrium position
 933   1          stiff = *((int16 *) &g_rx.buffer[3]);    // stiffness
 934   1      
 935   1          // Convert position in ticks
 936   1          pos = pos << g_mem.res[0];
 937   1      
 938   1          // Check position limits
 939   1          if (pos > (c_mem.pos_lim_sup[0] - c_mem.max_stiffness))
 940   1              pos = c_mem.pos_lim_sup[0] - c_mem.max_stiffness;
 941   1      
 942   1          if (pos < (c_mem.pos_lim_inf[0] + c_mem.max_stiffness))
 943   1              pos = c_mem.pos_lim_inf[0] + c_mem.max_stiffness;
 944   1      
 945   1          // Stiffness is intended between -32768 and 32767
 946   1          // remap  stiff value between -MAX_STIFFNESS and MAX_STIFFNESS
 947   1              
 948   1          stiff = (int32)(((float) c_mem.max_stiffness / 32768.0) * stiff);
 949   1      
 950   1          // Store pos/stiff rule
 951   1          g_refNew.pos[0] = pos + stiff;
 952   1          g_refNew.pos[1] = pos - stiff;
 953   1      }
 954          
 955          void cmd_get_velocities(){
 956   1          
 957   1          uint8 CYDATA index;
 958   1          
 959   1          // Packet: header + measure(int16) + crc
 960   1      
 961   1          #if (NUM_OF_SENSORS == 4)
                      uint8 packet_data[10];
                  #endif
 964   1          #if (NUM_OF_SENSORS == 3)
 965   1              uint8 packet_data[8]; 
 966   1          #endif
 967   1          
 968   1          //Header package
 969   1        
 970   1          packet_data[0] = CMD_GET_VELOCITIES;   
 971   1         
 972   1          for (index = NUM_OF_SENSORS; index--;)
 973   1              *((int16 *) &packet_data[(index << 2) + 1]) = (int16)(g_measOld.vel[index]);
 974   1      
 975   1          // Calculate Checksum and send message to UART 
 976   1      
 977   1          #if (NUM_OF_SENSORS == 4)
                      packet_data[9] = LCRChecksum (packet_data, 9);
                      commWrite(packet_data, 10);
                  #endif
 981   1          #if  (NUM_OF_SENSORS == 3)
 982   1              packet_data[7] = LCRChecksum (packet_data, 7);
 983   1              commWrite(packet_data, 8);
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 17  

 984   1          #endif
 985   1      }
 986          
 987          void cmd_activate(){
 988   1          
 989   1          // Store new value reads
 990   1          g_refNew.onoff = g_rx.buffer[1];
 991   1          
 992   1          // Check type of control mode enabled
 993   1          if (g_mem.control_mode == CONTROL_ANGLE) {
 994   2              g_refNew.pos[0] = g_meas.pos[0];
 995   2              g_refNew.pos[1] = g_meas.pos[1];
 996   2          }
 997   1          
 998   1          // Safety start position (eliminate "lost rotation" problem)    
 999   1          if((g_meas.pos[0] > 26000) || (g_meas.pos[0] < -26000) || 
1000   1             (g_meas.pos[1] > 26000) || (g_meas.pos[1] < -26000) ||
1001   1             (g_meas.pos[2] > 26000) || (g_meas.pos[2] < -26000))
1002   1              g_refNew.onoff = 0x00;
1003   1          
1004   1          // Activate/Disactivate motors
1005   1          MOTOR_ON_OFF_Write(g_refNew.onoff);
1006   1      
1007   1      }
1008          
1009          void cmd_set_watchdog(){
1010   1            
1011   1          if (g_rx.buffer[1] <= 0){
1012   2              // Deactivate Watchdog
1013   2              WATCHDOG_ENABLER_Write(1); 
1014   2              g_mem.watchdog_period = 0;   
1015   2          }
1016   1          else{
1017   2              // Activate Watchdog        
1018   2              if (g_rx.buffer[1] > MAX_WATCHDOG_TIMER)
1019   2                  g_rx.buffer[1] = MAX_WATCHDOG_TIMER;
1020   2                  
1021   2              // Period * Time_CLK = WDT
1022   2              // Period = WTD / Time_CLK =     (WTD    )  / ( ( 1 / Freq_CLK ) )
1023   2              // Set request watchdog period - (WTD * 2)  * (250 / 1024        )
1024   2              g_mem.watchdog_period = (uint8) (((uint32) g_rx.buffer[1] * 2 * 250 ) >> 10);   
1025   2              WATCHDOG_COUNTER_WritePeriod(g_mem.watchdog_period); 
1026   2              WATCHDOG_ENABLER_Write(0); 
1027   2          }
1028   1      }
1029          
1030          void cmd_get_activate(){
1031   1          
1032   1          uint8 packet_data[3];
1033   1      
1034   1          // Header        
1035   1          packet_data[0] = CMD_GET_ACTIVATE;
1036   1          
1037   1          // Fill payload
1038   1          packet_data[1] = g_ref.onoff;
1039   1          
1040   1          // Calculate checksum
1041   1          packet_data[2] = LCRChecksum(packet_data, 2);
1042   1          
1043   1          // Send package to UART
1044   1          commWrite(packet_data, 3);
1045   1      
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 18  

1046   1      }
1047          
1048          void cmd_ping(){
1049   1      
1050   1          uint8 packet_data[2];
1051   1      
1052   1          // Header
1053   1          packet_data[0] = CMD_PING;
1054   1          
1055   1          // Load Payload
1056   1          packet_data[1] = CMD_PING;
1057   1      
1058   1          // Send Package to uart
1059   1          commWrite(packet_data, 2);
1060   1      }
1061          
1062          void cmd_store_params(){
1063   1              
1064   1          // Check input mode enabled
1065   1          
1066   1          if( c_mem.input_mode == INPUT_MODE_EXTERNAL ){
1067   2          
1068   2              if (c_mem.m_mult[0] != g_mem.m_mult[0]){
1069   3                  // Old m_mult
1070   3                  g_refNew.pos[0] /= c_mem.m_mult[0];
1071   3                  // New m_mult
1072   3                  g_refNew.pos[0] *= g_mem.m_mult[0];
1073   3              }
1074   2              
1075   2              if (c_mem.m_mult[1] != g_mem.m_mult[1]){
1076   3                  // Old m_mult
1077   3                  g_refNew.pos[1] /= c_mem.m_mult[1];
1078   3                  // New m_mult
1079   3                  g_refNew.pos[1] *= g_mem.m_mult[1];
1080   3              }
1081   2              
1082   2              if (c_mem.m_off[0] != g_mem.m_off[0])
1083   2                  g_refNew.pos[0] += g_mem.m_off[0] - c_mem.m_off[0];
1084   2      
1085   2              if (c_mem.m_off[1] != g_mem.m_off[1])
1086   2                  g_refNew.pos[1] += g_mem.m_off[1] - c_mem.m_off[1];
1087   2                  
1088   2              // Check position Limits
1089   2              if (c_mem.pos_lim_flag) {                   // position limiting
1090   3                  if (g_refNew.pos[0] < c_mem.pos_lim_inf[0]) g_refNew.pos[0] = c_mem.pos_lim_inf[0];
1091   3                  if (g_refNew.pos[1] < c_mem.pos_lim_inf[1]) g_refNew.pos[1] = c_mem.pos_lim_inf[1];
1092   3      
1093   3                  if (g_refNew.pos[0] > c_mem.pos_lim_sup[0]) g_refNew.pos[0] = c_mem.pos_lim_sup[0];
1094   3                  if (g_refNew.pos[1] > c_mem.pos_lim_sup[1]) g_refNew.pos[1] = c_mem.pos_lim_sup[1];
1095   3              }
1096   2          }
1097   1          
1098   1          // Store params 
1099   1      
1100   1          if ( memStore(0) ) {
1101   2              sendAcknowledgment(ACK_OK);
1102   2          } else {
1103   2              sendAcknowledgment(ACK_ERROR);
1104   2          }
1105   1      }
1106          
1107          void cmd_set_baudrate(){
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 19  

1108   1          
1109   1          // Set BaudRate
1110   1          c_mem.baud_rate = g_rx.buffer[1];
1111   1          
1112   1          switch(g_rx.buffer[1]){
1113   2              case 13:
1114   2                  CLOCK_UART_SetDividerValue(13);
1115   2                  break;
1116   2              default:
1117   2                  CLOCK_UART_SetDividerValue(3);
1118   2          }
1119   1      }
1120          
1121          /* [] END OF FILE */
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION commProcess (BEGIN)
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 41
0000 900000      E     MOV     DPTR,#g_rx
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 8F00        R     MOV     rx_cmd,R7
                                           ; SOURCE LINE # 45
0007 7B01              MOV     R3,#01H
0009 7A00        E     MOV     R2,#HIGH g_rx
000B 7900        E     MOV     R1,#LOW g_rx
000D 900000      E     MOV     DPTR,#g_rx+080H
0010 E0                MOVX    A,@DPTR
0011 FE                MOV     R6,A
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 14                DEC     A
0017 FD                MOV     R5,A
0018 120000      E     LCALL   _LCRChecksum
001B 900000      E     MOV     DPTR,#g_rx+080H
001E E0                MOVX    A,@DPTR
001F FC                MOV     R4,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FD                MOV     R5,A
0023 7400        E     MOV     A,#LOW g_rx+0FFFFH
0025 2D                ADD     A,R5
0026 F582              MOV     DPL,A
0028 7400        E     MOV     A,#HIGH g_rx+0FFFFH
002A 3C                ADDC    A,R4
002B F583              MOV     DPH,A
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F EF                MOV     A,R7
0030 B50603            CJNE    A,AR6,?C0002
0033 D3                SETB    C
0034 8001              SJMP    ?C0003
0036         ?C0002:
0036 C3                CLR     C
0037         ?C0003:
0037 4006              JC      ?C0001
                                           ; SOURCE LINE # 47
0039 900000      E     MOV     DPTR,#g_rx+084H
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
003E 22                RET     
                                           ; SOURCE LINE # 49
003F         ?C0001:
                                           ; SOURCE LINE # 51
003F E500        R     MOV     A,rx_cmd
0041 120000      E     LCALL   ?C?CCASE
0044 0000        R     DW      ?C0020
0046 00                DB      00H
0047 0000        R     DW      ?C0018
0049 01                DB      01H
004A 0000        R     DW      ?C0019
004C 02                DB      02H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 21  

004D 0000        R     DW      ?C0021
004F 03                DB      03H
0050 0000        R     DW      ?C0022
0052 04                DB      04H
0053 0000        R     DW      ?C0025
0055 05                DB      05H
0056 0000        R     DW      ?C0017
0058 06                DB      06H
0059 0000        R     DW      ?C0031
005B 09                DB      09H
005C 0000        R     DW      ?C0028
005E 0A                DB      0AH
005F 0000        R     DW      ?C0032
0061 0B                DB      0BH
0062 0000        R     DW      ?C0013
0064 80                DB      080H
0065 0000        R     DW      ?C0015
0067 81                DB      081H
0068 0000        R     DW      ?C0010
006A 82                DB      082H
006B 0000        R     DW      ?C0007
006D 83                DB      083H
006E 0000        R     DW      ?C0006
0070 84                DB      084H
0071 0000        R     DW      ?C0008
0073 85                DB      085H
0074 0000        R     DW      ?C0009
0076 86                DB      086H
0077 0000        R     DW      ?C0011
0079 87                DB      087H
007A 0000        R     DW      ?C0012
007C 89                DB      089H
007D 0000        R     DW      ?C0014
007F 8A                DB      08AH
0080 0000        R     DW      ?C0016
0082 8B                DB      08BH
0083 0000              DW      00H
0085 0000        R     DW      ?C0005
                                           ; SOURCE LINE # 54
0087         ?C0006:
                                           ; SOURCE LINE # 55
0087 120000      R     LCALL   cmd_get_measurements
                                           ; SOURCE LINE # 56
008A 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 60
008D         ?C0007:
                                           ; SOURCE LINE # 61
008D 120000      R     LCALL   cmd_get_inputs
                                           ; SOURCE LINE # 62
0090 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 65
0093         ?C0008:
                                           ; SOURCE LINE # 66
0093 120000      R     LCALL   cmd_get_currents
                                           ; SOURCE LINE # 67
0096 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 71
0099         ?C0009:
                                           ; SOURCE LINE # 72
0099 120000      R     LCALL   cmd_get_curr_and_meas
                                           ; SOURCE LINE # 73
009C 020000      R     LJMP    ?C0005
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 22  

                                           ; SOURCE LINE # 77
009F         ?C0010:
                                           ; SOURCE LINE # 78
009F 120000      R     LCALL   cmd_set_inputs
                                           ; SOURCE LINE # 79
00A2 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 83
00A5         ?C0011:
                                           ; SOURCE LINE # 84
00A5 120000      R     LCALL   cmd_set_pos_stiff
                                           ; SOURCE LINE # 85
00A8 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 89
00AB         ?C0012:
                                           ; SOURCE LINE # 90
00AB 120000      R     LCALL   cmd_get_velocities
                                           ; SOURCE LINE # 91
00AE 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 94
00B1         ?C0013:
                                           ; SOURCE LINE # 95
00B1 120000      R     LCALL   cmd_activate
                                           ; SOURCE LINE # 96
00B4 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 100
00B7         ?C0014:
                                           ; SOURCE LINE # 101
00B7 120000      R     LCALL   cmd_set_watchdog
                                           ; SOURCE LINE # 102
00BA 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 106
00BD         ?C0015:
                                           ; SOURCE LINE # 107
00BD 120000      R     LCALL   cmd_get_activate
                                           ; SOURCE LINE # 108
00C0 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 112
00C3         ?C0016:
                                           ; SOURCE LINE # 113
00C3 120000      R     LCALL   cmd_set_baudrate
                                           ; SOURCE LINE # 114
00C6 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 118
00C9         ?C0017:
                                           ; SOURCE LINE # 119
00C9 900000      E     MOV     DPTR,#g_rx+01H
00CC E0                MOVX    A,@DPTR
00CD FE                MOV     R6,A
00CE A3                INC     DPTR
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
00D1 120000      R     LCALL   _infoGet
                                           ; SOURCE LINE # 120
00D4 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 124
00D7         ?C0018:
                                           ; SOURCE LINE # 125
00D7 900000      E     MOV     DPTR,#g_rx+01H
00DA E0                MOVX    A,@DPTR
00DB FE                MOV     R6,A
00DC A3                INC     DPTR
00DD E0                MOVX    A,@DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 23  

00DE FF                MOV     R7,A
00DF 120000      R     LCALL   _paramSet
                                           ; SOURCE LINE # 126
00E2 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 130
00E5         ?C0019:
                                           ; SOURCE LINE # 131
00E5 900000      E     MOV     DPTR,#g_rx+01H
00E8 E0                MOVX    A,@DPTR
00E9 FE                MOV     R6,A
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED 120000      R     LCALL   _paramGet
                                           ; SOURCE LINE # 132
00F0 807A              SJMP    ?C0005
                                           ; SOURCE LINE # 136
00F2         ?C0020:
                                           ; SOURCE LINE # 137
00F2 120000      R     LCALL   cmd_ping
                                           ; SOURCE LINE # 138
00F5 8075              SJMP    ?C0005
                                           ; SOURCE LINE # 142
00F7         ?C0021:
                                           ; SOURCE LINE # 143
00F7 120000      R     LCALL   cmd_store_params
                                           ; SOURCE LINE # 144
00FA 8070              SJMP    ?C0005
                                           ; SOURCE LINE # 148
00FC         ?C0022:
                                           ; SOURCE LINE # 149
00FC 7F08              MOV     R7,#08H
00FE 7E00              MOV     R6,#00H
0100 120000      R     LCALL   _memStore
0103 EF                MOV     A,R7
0104 6007              JZ      ?C0023
                                           ; SOURCE LINE # 150
0106 7F01              MOV     R7,#01H
0108 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 151
010B 805F              SJMP    ?C0005
010D         ?C0023:
                                           ; SOURCE LINE # 152
010D 7F00              MOV     R7,#00H
010F 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0112 8058              SJMP    ?C0005
                                           ; SOURCE LINE # 158
0114         ?C0025:
                                           ; SOURCE LINE # 159
0114 120000      R     LCALL   memRestore
0117 EF                MOV     A,R7
0118 6007              JZ      ?C0026
                                           ; SOURCE LINE # 160
011A 7F01              MOV     R7,#01H
011C 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 161
011F 804B              SJMP    ?C0005
0121         ?C0026:
                                           ; SOURCE LINE # 162
0121 7F00              MOV     R7,#00H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 24  

0123 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0126 8044              SJMP    ?C0005
                                           ; SOURCE LINE # 168
0128         ?C0028:
                                           ; SOURCE LINE # 169
0128 120000      R     LCALL   memInit
012B EF                MOV     A,R7
012C 6007              JZ      ?C0029
                                           ; SOURCE LINE # 170
012E 7F01              MOV     R7,#01H
0130 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 171
0133 8037              SJMP    ?C0005
0135         ?C0029:
                                           ; SOURCE LINE # 172
0135 7F00              MOV     R7,#00H
0137 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
013A 8030              SJMP    ?C0005
                                           ; SOURCE LINE # 177
013C         ?C0031:
                                           ; SOURCE LINE # 178
013C 7F01              MOV     R7,#01H
013E 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 179
0141 7FE8              MOV     R7,#0E8H
0143 7E03              MOV     R6,#03H
0145 7D00              MOV     R5,#00H
0147 7C00              MOV     R4,#00H
0149 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 180
014C 7F00              MOV     R7,#00H
014E 120000      E     LCALL   _FTDI_ENABLE_REG_Write
                                           ; SOURCE LINE # 181
0151 7FE8              MOV     R7,#0E8H
0153 7E03              MOV     R6,#03H
0155 7D00              MOV     R5,#00H
0157 7C00              MOV     R4,#00H
0159 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 182
015C 120000      E     LCALL   Bootloadable_Load
                                           ; SOURCE LINE # 183
015F 800B              SJMP    ?C0005
                                           ; SOURCE LINE # 186
0161         ?C0032:
                                           ; SOURCE LINE # 187
0161 900000      E     MOV     DPTR,#calibration_flag
0164 7401              MOV     A,#01H
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
0167 7F01              MOV     R7,#01H
0169 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
016C         ?C0005:
                                           ; SOURCE LINE # 192
016C 900000      E     MOV     DPTR,#g_rx+084H
016F E4                CLR     A
0170 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 25  

                                           ; SOURCE LINE # 193
0171         ?C0004:
0171 22                RET     
             ; FUNCTION commProcess (END)

             ; FUNCTION _infoGet (BEGIN)
                                           ; SOURCE LINE # 199
0000 900000      R     MOV     DPTR,#info_type
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0008 900000      R     MOV     DPTR,#info_type
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 8EF0              MOV     B,R6
0013 120000      E     LCALL   ?C?ICASE
0016 0000        R     DW      ?C0034
0018 0000              DW      00H
001A 0000              DW      00H
001C 0000        R     DW      ?C0036
                                           ; SOURCE LINE # 205
001E         ?C0034:
                                           ; SOURCE LINE # 206
001E 7B01              MOV     R3,#01H
0020 7A00        R     MOV     R2,#HIGH packet_string
0022 7900        R     MOV     R1,#LOW packet_string
0024 120000      R     LCALL   _infoPrepare
                                           ; SOURCE LINE # 207
0027 7B01              MOV     R3,#01H
0029 7A00        R     MOV     R2,#HIGH packet_string
002B 7900        R     MOV     R1,#LOW packet_string
002D 120000      E     LCALL   _UART_RS485_PutString
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0030         ?C0036:
0030 22                RET     
             ; FUNCTION _infoGet (END)

             ; FUNCTION _paramSet (BEGIN)
                                           ; SOURCE LINE # 218
0000 900000      R     MOV     DPTR,#param_type
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 222
0008 900000      R     MOV     DPTR,#param_type
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 26  

000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 8EF0              MOV     B,R6
0013 120000      E     LCALL   ?C?ICASE
0016 0000        R     DW      ?C0038
0018 0000              DW      00H
001A 0000        R     DW      ?C0039
001C 0001              DW      01H
001E 0000        R     DW      ?C0041
0020 0002              DW      02H
0022 0000        R     DW      ?C0042
0024 0003              DW      03H
0026 0000        R     DW      ?C0043
0028 0004              DW      04H
002A 0000        R     DW      ?C0048
002C 0005              DW      05H
002E 0000        R     DW      ?C0052
0030 0006              DW      06H
0032 0000        R     DW      ?C0056
0034 0007              DW      07H
0036 0000        R     DW      ?C0057
0038 0008              DW      08H
003A 0000        R     DW      ?C0044
003C 000B              DW      0BH
003E 0000        R     DW      ?C0061
0040 000C              DW      0CH
0042 0000        R     DW      ?C0040
0044 0012              DW      012H
0046 0000              DW      00H
0048 0000        R     DW      ?C0037
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 225
004A         ?C0038:
                                           ; SOURCE LINE # 226
004A 900000      E     MOV     DPTR,#g_rx+03H
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 900000      E     MOV     DPTR,#g_mem+01H
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0054 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 230
0057         ?C0039:
                                           ; SOURCE LINE # 231
0057 7F00              MOV     R7,#00H
0059 7E00              MOV     R6,#00H
005B 7D80              MOV     R5,#080H
005D 7C47              MOV     R4,#047H
005F 900000      E     MOV     DPTR,#g_rx+03H
0062 120000      E     LCALL   ?C?LLDXDATA0
0065 120000      E     LCALL   ?C?FPMUL
0068 120000      E     LCALL   ?C?CASTF
006B 900000      E     MOV     DPTR,#g_mem+02H
006E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 232
0071 7F00              MOV     R7,#00H
0073 7E00              MOV     R6,#00H
0075 7D80              MOV     R5,#080H
0077 7C47              MOV     R4,#047H
0079 900000      E     MOV     DPTR,#g_rx+07H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 27  

007C 120000      E     LCALL   ?C?LLDXDATA0
007F 120000      E     LCALL   ?C?FPMUL
0082 120000      E     LCALL   ?C?CASTF
0085 900000      E     MOV     DPTR,#g_mem+06H
0088 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 233
008B 7F00              MOV     R7,#00H
008D 7E00              MOV     R6,#00H
008F 7D80              MOV     R5,#080H
0091 7C47              MOV     R4,#047H
0093 900000      E     MOV     DPTR,#g_rx+0BH
0096 120000      E     LCALL   ?C?LLDXDATA0
0099 120000      E     LCALL   ?C?FPMUL
009C 120000      E     LCALL   ?C?CASTF
009F 900000      E     MOV     DPTR,#g_mem+0AH
00A2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 234
00A5 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 237
00A8         ?C0040:
                                           ; SOURCE LINE # 238
00A8 7F00              MOV     R7,#00H
00AA 7E00              MOV     R6,#00H
00AC 7D80              MOV     R5,#080H
00AE 7C47              MOV     R4,#047H
00B0 900000      E     MOV     DPTR,#g_rx+03H
00B3 120000      E     LCALL   ?C?LLDXDATA0
00B6 120000      E     LCALL   ?C?FPMUL
00B9 120000      E     LCALL   ?C?CASTF
00BC 900000      E     MOV     DPTR,#g_mem+0EH
00BF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 239
00C2 7F00              MOV     R7,#00H
00C4 7E00              MOV     R6,#00H
00C6 7D80              MOV     R5,#080H
00C8 7C47              MOV     R4,#047H
00CA 900000      E     MOV     DPTR,#g_rx+07H
00CD 120000      E     LCALL   ?C?LLDXDATA0
00D0 120000      E     LCALL   ?C?FPMUL
00D3 120000      E     LCALL   ?C?CASTF
00D6 900000      E     MOV     DPTR,#g_mem+012H
00D9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 240
00DC 7F00              MOV     R7,#00H
00DE 7E00              MOV     R6,#00H
00E0 7D80              MOV     R5,#080H
00E2 7C47              MOV     R4,#047H
00E4 900000      E     MOV     DPTR,#g_rx+0BH
00E7 120000      E     LCALL   ?C?LLDXDATA0
00EA 120000      E     LCALL   ?C?FPMUL
00ED 120000      E     LCALL   ?C?CASTF
00F0 900000      E     MOV     DPTR,#g_mem+016H
00F3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 241
00F6 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 244
00F9         ?C0041:
                                           ; SOURCE LINE # 245
00F9 900000      E     MOV     DPTR,#g_rx+03H
00FC E0                MOVX    A,@DPTR
00FD FF                MOV     R7,A
00FE 900000      E     MOV     DPTR,#g_mem+01CH
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 28  

0101 EF                MOV     A,R7
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
0103 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 249
0106         ?C0042:
                                           ; SOURCE LINE # 250
0106 900000      E     MOV     DPTR,#g_rx+03H
0109 E0                MOVX    A,@DPTR
010A FF                MOV     R7,A
010B 900000      E     MOV     DPTR,#g_mem+01DH
010E EF                MOV     A,R7
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0110 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 254
0113         ?C0043:
                                           ; SOURCE LINE # 255
0113 900000      E     MOV     DPTR,#g_rx+03H
0116 E0                MOVX    A,@DPTR
0117 FF                MOV     R7,A
0118 900000      E     MOV     DPTR,#g_mem+01EH
011B EF                MOV     A,R7
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
011D 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 259
0120         ?C0044:
                                           ; SOURCE LINE # 260
0120 750000      R     MOV     i,#00H
0123         ?C0045:
0123 E500        R     MOV     A,i
0125 C3                CLR     C
0126 9403              SUBB    A,#03H
0128 4003              JC      $ + 5H
012A 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 261
012D AF00        R     MOV     R7,i
012F 7400        E     MOV     A,#LOW g_rx+03H
0131 2F                ADD     A,R7
0132 F582              MOV     DPL,A
0134 E4                CLR     A
0135 3400        E     ADDC    A,#HIGH g_rx+03H
0137 F583              MOV     DPH,A
0139 E0                MOVX    A,@DPTR
013A FF                MOV     R7,A
013B AE00        R     MOV     R6,i
013D 7400        E     MOV     A,#LOW g_mem+01FH
013F 2E                ADD     A,R6
0140 F582              MOV     DPL,A
0142 E4                CLR     A
0143 3400        E     ADDC    A,#HIGH g_mem+01FH
0145 F583              MOV     DPH,A
0147 EF                MOV     A,R7
0148 F0                MOVX    @DPTR,A
0149 0500        R     INC     i
014B 80D6              SJMP    ?C0045
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 266
014D         ?C0048:
                                           ; SOURCE LINE # 267
014D 750000      R     MOV     i,#00H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 29  

0150         ?C0049:
0150 E500        R     MOV     A,i
0152 C3                CLR     C
0153 9403              SUBB    A,#03H
0155 506F              JNC     ?C0050
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
0157 AF00        R     MOV     R7,i
0159 EF                MOV     A,R7
015A 25E0              ADD     A,ACC
015C 2400        E     ADD     A,#LOW g_rx+03H
015E F582              MOV     DPL,A
0160 E4                CLR     A
0161 3400        E     ADDC    A,#HIGH g_rx+03H
0163 F583              MOV     DPH,A
0165 E0                MOVX    A,@DPTR
0166 FE                MOV     R6,A
0167 A3                INC     DPTR
0168 E0                MOVX    A,@DPTR
0169 FF                MOV     R7,A
016A EE                MOV     A,R6
016B 33                RLC     A
016C 95E0              SUBB    A,ACC
016E FD                MOV     R5,A
016F FC                MOV     R4,A
0170 AB00        R     MOV     R3,i
0172 EB                MOV     A,R3
0173 25E0              ADD     A,ACC
0175 25E0              ADD     A,ACC
0177 2400        E     ADD     A,#LOW g_mem+022H
0179 F582              MOV     DPL,A
017B E4                CLR     A
017C 3400        E     ADDC    A,#HIGH g_mem+022H
017E F583              MOV     DPH,A
0180 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 270
0183 AF00        R     MOV     R7,i
0185 EF                MOV     A,R7
0186 25E0              ADD     A,ACC
0188 25E0              ADD     A,ACC
018A 2400        E     ADD     A,#LOW g_mem+022H
018C F582              MOV     DPL,A
018E E4                CLR     A
018F 3400        E     ADDC    A,#HIGH g_mem+022H
0191 F583              MOV     DPH,A
0193 C083              PUSH    DPH
0195 C082              PUSH    DPL
0197 120000      E     LCALL   ?C?LLDXDATA
019A AB00        R     MOV     R3,i
019C 7400        E     MOV     A,#LOW g_mem+01FH
019E 2B                ADD     A,R3
019F F582              MOV     DPL,A
01A1 E4                CLR     A
01A2 3400        E     ADDC    A,#HIGH g_mem+01FH
01A4 F583              MOV     DPH,A
01A6 E0                MOVX    A,@DPTR
01A7 F9                MOV     R1,A
01A8 A801              MOV     R0,AR1
01AA 120000      E     LCALL   ?C?LSHL
01AD D082              POP     DPL
01AF D083              POP     DPH
01B1 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 30  

                                           ; SOURCE LINE # 272
01B4 AF00        R     MOV     R7,i
01B6 7400        E     MOV     A,#LOW g_meas+010H
01B8 2F                ADD     A,R7
01B9 F582              MOV     DPL,A
01BB E4                CLR     A
01BC 3400        E     ADDC    A,#HIGH g_meas+010H
01BE F583              MOV     DPH,A
01C0 E4                CLR     A
01C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
01C2 0500        R     INC     i
01C4 808A              SJMP    ?C0049
01C6         ?C0050:
                                           ; SOURCE LINE # 274
01C6 D200        E     SETB    reset_last_value_flag
                                           ; SOURCE LINE # 275
01C8 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 278
01CB         ?C0052:
                                           ; SOURCE LINE # 279
01CB 750000      R     MOV     i,#00H
01CE         ?C0053:
01CE E500        R     MOV     A,i
01D0 C3                CLR     C
01D1 9403              SUBB    A,#03H
01D3 4003              JC      $ + 5H
01D5 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 282
01D8 AF00        R     MOV     R7,i
01DA EF                MOV     A,R7
01DB 25E0              ADD     A,ACC
01DD 25E0              ADD     A,ACC
01DF 2400        E     ADD     A,#LOW g_rx+03H
01E1 F582              MOV     DPL,A
01E3 E4                CLR     A
01E4 3400        E     ADDC    A,#HIGH g_rx+03H
01E6 F583              MOV     DPH,A
01E8 120000      E     LCALL   ?C?LLDXDATA
01EB AB00        R     MOV     R3,i
01ED EB                MOV     A,R3
01EE 25E0              ADD     A,ACC
01F0 25E0              ADD     A,ACC
01F2 2400        E     ADD     A,#LOW g_mem+02EH
01F4 F582              MOV     DPL,A
01F6 E4                CLR     A
01F7 3400        E     ADDC    A,#HIGH g_mem+02EH
01F9 F583              MOV     DPH,A
01FB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 283
01FE 0500        R     INC     i
0200 80CC              SJMP    ?C0053
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 287
0202         ?C0056:
                                           ; SOURCE LINE # 288
0202 900000      E     MOV     DPTR,#g_rx+03H
0205 E0                MOVX    A,@DPTR
0206 FF                MOV     R7,A
0207 900000      E     MOV     DPTR,#g_mem+03AH
020A EF                MOV     A,R7
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 31  

020B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
020C 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 292
020F         ?C0057:
                                           ; SOURCE LINE # 293
020F 750000      R     MOV     i,#00H
0212         ?C0058:
0212 E500        R     MOV     A,i
0214 C3                CLR     C
0215 9402              SUBB    A,#02H
0217 4003              JC      $ + 5H
0219 020000      R     LJMP    ?C0037
                                           ; SOURCE LINE # 294
021C AF00        R     MOV     R7,i
021E EF                MOV     A,R7
021F 25E0              ADD     A,ACC
0221 25E0              ADD     A,ACC
0223 2400        E     ADD     A,#LOW g_rx+03H
0225 F582              MOV     DPL,A
0227 E4                CLR     A
0228 3400        E     ADDC    A,#HIGH g_rx+03H
022A F583              MOV     DPH,A
022C E0                MOVX    A,@DPTR
022D FE                MOV     R6,A
022E A3                INC     DPTR
022F E0                MOVX    A,@DPTR
0230 FF                MOV     R7,A
0231 EE                MOV     A,R6
0232 33                RLC     A
0233 95E0              SUBB    A,ACC
0235 FD                MOV     R5,A
0236 FC                MOV     R4,A
0237 AB00        R     MOV     R3,i
0239 EB                MOV     A,R3
023A 25E0              ADD     A,ACC
023C 25E0              ADD     A,ACC
023E 2400        E     ADD     A,#LOW g_mem+03BH
0240 F582              MOV     DPL,A
0242 E4                CLR     A
0243 3400        E     ADDC    A,#HIGH g_mem+03BH
0245 F583              MOV     DPH,A
0247 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 295
024A AF00        R     MOV     R7,i
024C EF                MOV     A,R7
024D 25E0              ADD     A,ACC
024F 25E0              ADD     A,ACC
0251 2400        E     ADD     A,#LOW g_rx+05H
0253 F582              MOV     DPL,A
0255 E4                CLR     A
0256 3400        E     ADDC    A,#HIGH g_rx+05H
0258 F583              MOV     DPH,A
025A E0                MOVX    A,@DPTR
025B FE                MOV     R6,A
025C A3                INC     DPTR
025D E0                MOVX    A,@DPTR
025E FF                MOV     R7,A
025F EE                MOV     A,R6
0260 33                RLC     A
0261 95E0              SUBB    A,ACC
0263 FD                MOV     R5,A
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 32  

0264 FC                MOV     R4,A
0265 AB00        R     MOV     R3,i
0267 EB                MOV     A,R3
0268 25E0              ADD     A,ACC
026A 25E0              ADD     A,ACC
026C 2400        E     ADD     A,#LOW g_mem+043H
026E F582              MOV     DPL,A
0270 E4                CLR     A
0271 3400        E     ADDC    A,#HIGH g_mem+043H
0273 F583              MOV     DPH,A
0275 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 297
0278 AF00        R     MOV     R7,i
027A EF                MOV     A,R7
027B 25E0              ADD     A,ACC
027D 25E0              ADD     A,ACC
027F 2400        E     ADD     A,#LOW g_mem+03BH
0281 F582              MOV     DPL,A
0283 E4                CLR     A
0284 3400        E     ADDC    A,#HIGH g_mem+03BH
0286 F583              MOV     DPH,A
0288 C083              PUSH    DPH
028A C082              PUSH    DPL
028C 120000      E     LCALL   ?C?LLDXDATA
028F AB00        R     MOV     R3,i
0291 7400        E     MOV     A,#LOW g_mem+01FH
0293 2B                ADD     A,R3
0294 F582              MOV     DPL,A
0296 E4                CLR     A
0297 3400        E     ADDC    A,#HIGH g_mem+01FH
0299 F583              MOV     DPH,A
029B E0                MOVX    A,@DPTR
029C F9                MOV     R1,A
029D A801              MOV     R0,AR1
029F 120000      E     LCALL   ?C?LSHL
02A2 D082              POP     DPL
02A4 D083              POP     DPH
02A6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 298
02A9 AF00        R     MOV     R7,i
02AB EF                MOV     A,R7
02AC 25E0              ADD     A,ACC
02AE 25E0              ADD     A,ACC
02B0 2400        E     ADD     A,#LOW g_mem+043H
02B2 F582              MOV     DPL,A
02B4 E4                CLR     A
02B5 3400        E     ADDC    A,#HIGH g_mem+043H
02B7 F583              MOV     DPH,A
02B9 C083              PUSH    DPH
02BB C082              PUSH    DPL
02BD 120000      E     LCALL   ?C?LLDXDATA
02C0 AB00        R     MOV     R3,i
02C2 7400        E     MOV     A,#LOW g_mem+01FH
02C4 2B                ADD     A,R3
02C5 F582              MOV     DPL,A
02C7 E4                CLR     A
02C8 3400        E     ADDC    A,#HIGH g_mem+01FH
02CA F583              MOV     DPH,A
02CC E0                MOVX    A,@DPTR
02CD F9                MOV     R1,A
02CE A801              MOV     R0,AR1
02D0 120000      E     LCALL   ?C?LSHL
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 33  

02D3 D082              POP     DPL
02D5 D083              POP     DPH
02D7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 300
02DA 0500        R     INC     i
02DC 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 304
02DF         ?C0061:
                                           ; SOURCE LINE # 305
02DF 900000      E     MOV     DPTR,#g_rx+03H
02E2 E0                MOVX    A,@DPTR
02E3 FE                MOV     R6,A
02E4 A3                INC     DPTR
02E5 E0                MOVX    A,@DPTR
02E6 FF                MOV     R7,A
02E7 900000      E     MOV     DPTR,#g_mem+01AH
02EA EE                MOV     A,R6
02EB F0                MOVX    @DPTR,A
02EC A3                INC     DPTR
02ED EF                MOV     A,R7
02EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 308
02EF         ?C0037:
                                           ; SOURCE LINE # 309
02EF 7F01              MOV     R7,#01H
02F1 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 310
02F4 22                RET     
             ; FUNCTION _paramSet (END)

             ; FUNCTION _paramGet (BEGIN)
                                           ; SOURCE LINE # 316
0000 900000      R     MOV     DPTR,#param_type
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 322
0008 900000      R     MOV     DPTR,#packet_data
000B 7402              MOV     A,#02H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
000E 900000      R     MOV     DPTR,#param_type
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 8EF0              MOV     B,R6
0019 120000      E     LCALL   ?C?ICASE
001C 0000        R     DW      ?C0064
001E 0000              DW      00H
0020 0000        R     DW      ?C0065
0022 0001              DW      01H
0024 0000        R     DW      ?C0067
0026 0002              DW      02H
0028 0000        R     DW      ?C0068
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 34  

002A 0003              DW      03H
002C 0000        R     DW      ?C0069
002E 0004              DW      04H
0030 0000        R     DW      ?C0074
0032 0005              DW      05H
0034 0000        R     DW      ?C0078
0036 0006              DW      06H
0038 0000        R     DW      ?C0082
003A 0007              DW      07H
003C 0000        R     DW      ?C0083
003E 0008              DW      08H
0040 0000        R     DW      ?C0070
0042 000B              DW      0BH
0044 0000        R     DW      ?C0087
0046 000C              DW      0CH
0048 0000        R     DW      ?C0066
004A 0012              DW      012H
004C 0000              DW      00H
004E 0000        R     DW      ?C0063
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 327
0050         ?C0064:
                                           ; SOURCE LINE # 328
0050 900000      E     MOV     DPTR,#c_mem+01H
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#packet_data+01H
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
005A 900000      R     MOV     DPTR,#packet_lenght
005D E4                CLR     A
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 7403              MOV     A,#03H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
0063 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 333
0066         ?C0065:
                                           ; SOURCE LINE # 334
0066 900000      E     MOV     DPTR,#c_mem+02H
0069 120000      E     LCALL   ?C?LLDXDATA
006C EC                MOV     A,R4
006D 120000      E     LCALL   ?C?FCASTL
0070 7B00              MOV     R3,#00H
0072 7A00              MOV     R2,#00H
0074 7980              MOV     R1,#080H
0076 7847              MOV     R0,#047H
0078 120000      E     LCALL   ?C?FPDIV
007B 900000      R     MOV     DPTR,#packet_data+01H
007E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 335
0081 900000      E     MOV     DPTR,#c_mem+06H
0084 120000      E     LCALL   ?C?LLDXDATA
0087 EC                MOV     A,R4
0088 120000      E     LCALL   ?C?FCASTL
008B 7B00              MOV     R3,#00H
008D 7A00              MOV     R2,#00H
008F 7980              MOV     R1,#080H
0091 7847              MOV     R0,#047H
0093 120000      E     LCALL   ?C?FPDIV
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 35  

0096 900000      R     MOV     DPTR,#packet_data+05H
0099 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 336
009C 900000      E     MOV     DPTR,#c_mem+0AH
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 EC                MOV     A,R4
00A3 120000      E     LCALL   ?C?FCASTL
00A6 7B00              MOV     R3,#00H
00A8 7A00              MOV     R2,#00H
00AA 7980              MOV     R1,#080H
00AC 7847              MOV     R0,#047H
00AE 120000      E     LCALL   ?C?FPDIV
00B1 900000      R     MOV     DPTR,#packet_data+09H
00B4 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 337
00B7 900000      R     MOV     DPTR,#packet_lenght
00BA E4                CLR     A
00BB F0                MOVX    @DPTR,A
00BC A3                INC     DPTR
00BD 740E              MOV     A,#0EH
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
00C0 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 341
00C3         ?C0066:
                                           ; SOURCE LINE # 342
00C3 900000      E     MOV     DPTR,#c_mem+0EH
00C6 120000      E     LCALL   ?C?LLDXDATA
00C9 EC                MOV     A,R4
00CA 120000      E     LCALL   ?C?FCASTL
00CD 7B00              MOV     R3,#00H
00CF 7A00              MOV     R2,#00H
00D1 7980              MOV     R1,#080H
00D3 7847              MOV     R0,#047H
00D5 120000      E     LCALL   ?C?FPDIV
00D8 900000      R     MOV     DPTR,#packet_data+01H
00DB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 343
00DE 900000      E     MOV     DPTR,#c_mem+012H
00E1 120000      E     LCALL   ?C?LLDXDATA
00E4 EC                MOV     A,R4
00E5 120000      E     LCALL   ?C?FCASTL
00E8 7B00              MOV     R3,#00H
00EA 7A00              MOV     R2,#00H
00EC 7980              MOV     R1,#080H
00EE 7847              MOV     R0,#047H
00F0 120000      E     LCALL   ?C?FPDIV
00F3 900000      R     MOV     DPTR,#packet_data+05H
00F6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 344
00F9 900000      E     MOV     DPTR,#c_mem+016H
00FC 120000      E     LCALL   ?C?LLDXDATA
00FF EC                MOV     A,R4
0100 120000      E     LCALL   ?C?FCASTL
0103 7B00              MOV     R3,#00H
0105 7A00              MOV     R2,#00H
0107 7980              MOV     R1,#080H
0109 7847              MOV     R0,#047H
010B 120000      E     LCALL   ?C?FPDIV
010E 900000      R     MOV     DPTR,#packet_data+09H
0111 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 345
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 36  

0114 900000      R     MOV     DPTR,#packet_lenght
0117 E4                CLR     A
0118 F0                MOVX    @DPTR,A
0119 A3                INC     DPTR
011A 740E              MOV     A,#0EH
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
011D 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 349
0120         ?C0067:
                                           ; SOURCE LINE # 350
0120 900000      E     MOV     DPTR,#c_mem+01CH
0123 E0                MOVX    A,@DPTR
0124 FF                MOV     R7,A
0125 900000      R     MOV     DPTR,#packet_data+01H
0128 EF                MOV     A,R7
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
012A 900000      R     MOV     DPTR,#packet_lenght
012D E4                CLR     A
012E F0                MOVX    @DPTR,A
012F A3                INC     DPTR
0130 7403              MOV     A,#03H
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0133 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 355
0136         ?C0068:
                                           ; SOURCE LINE # 356
0136 900000      E     MOV     DPTR,#c_mem+01DH
0139 E0                MOVX    A,@DPTR
013A FF                MOV     R7,A
013B 900000      R     MOV     DPTR,#packet_data+01H
013E EF                MOV     A,R7
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
0140 900000      R     MOV     DPTR,#packet_lenght
0143 E4                CLR     A
0144 F0                MOVX    @DPTR,A
0145 A3                INC     DPTR
0146 7403              MOV     A,#03H
0148 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
0149 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 361
014C         ?C0069:
                                           ; SOURCE LINE # 362
014C 900000      E     MOV     DPTR,#c_mem+01EH
014F E0                MOVX    A,@DPTR
0150 FF                MOV     R7,A
0151 900000      R     MOV     DPTR,#packet_data+01H
0154 EF                MOV     A,R7
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0156 900000      R     MOV     DPTR,#packet_lenght
0159 E4                CLR     A
015A F0                MOVX    @DPTR,A
015B A3                INC     DPTR
015C 7403              MOV     A,#03H
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
015F 020000      R     LJMP    ?C0063
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 37  

                                           ; SOURCE LINE # 367
0162         ?C0070:
                                           ; SOURCE LINE # 368
0162 900000      R     MOV     DPTR,#i
0165 E4                CLR     A
0166 F0                MOVX    @DPTR,A
0167         ?C0071:
0167 900000      R     MOV     DPTR,#i
016A E0                MOVX    A,@DPTR
016B FF                MOV     R7,A
016C EF                MOV     A,R7
016D C3                CLR     C
016E 9403              SUBB    A,#03H
0170 502A              JNC     ?C0072
                                           ; SOURCE LINE # 369
0172 900000      R     MOV     DPTR,#i
0175 E0                MOVX    A,@DPTR
0176 FF                MOV     R7,A
0177 7400        E     MOV     A,#LOW c_mem+01FH
0179 2F                ADD     A,R7
017A F582              MOV     DPL,A
017C E4                CLR     A
017D 3400        E     ADDC    A,#HIGH c_mem+01FH
017F F583              MOV     DPH,A
0181 E0                MOVX    A,@DPTR
0182 FF                MOV     R7,A
0183 900000      R     MOV     DPTR,#i
0186 E0                MOVX    A,@DPTR
0187 FE                MOV     R6,A
0188 7400        R     MOV     A,#LOW packet_data+01H
018A 2E                ADD     A,R6
018B F582              MOV     DPL,A
018D E4                CLR     A
018E 3400        R     ADDC    A,#HIGH packet_data+01H
0190 F583              MOV     DPH,A
0192 EF                MOV     A,R7
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0194 900000      R     MOV     DPTR,#i
0197 E0                MOVX    A,@DPTR
0198 04                INC     A
0199 F0                MOVX    @DPTR,A
019A 80CB              SJMP    ?C0071
019C         ?C0072:
                                           ; SOURCE LINE # 371
019C 900000      R     MOV     DPTR,#packet_lenght
019F E4                CLR     A
01A0 F0                MOVX    @DPTR,A
01A1 A3                INC     DPTR
01A2 7405              MOV     A,#05H
01A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
01A5 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 375
01A8         ?C0074:
                                           ; SOURCE LINE # 376
01A8 900000      R     MOV     DPTR,#i
01AB E4                CLR     A
01AC F0                MOVX    @DPTR,A
01AD         ?C0075:
01AD 900000      R     MOV     DPTR,#i
01B0 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 38  

01B1 FF                MOV     R7,A
01B2 EF                MOV     A,R7
01B3 C3                CLR     C
01B4 9403              SUBB    A,#03H
01B6 504A              JNC     ?C0076
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
01B8 900000      R     MOV     DPTR,#i
01BB E0                MOVX    A,@DPTR
01BC FF                MOV     R7,A
01BD EF                MOV     A,R7
01BE 25E0              ADD     A,ACC
01C0 25E0              ADD     A,ACC
01C2 2400        E     ADD     A,#LOW c_mem+022H
01C4 F582              MOV     DPL,A
01C6 E4                CLR     A
01C7 3400        E     ADDC    A,#HIGH c_mem+022H
01C9 F583              MOV     DPH,A
01CB 120000      E     LCALL   ?C?LLDXDATA
01CE 900000      R     MOV     DPTR,#i
01D1 E0                MOVX    A,@DPTR
01D2 FB                MOV     R3,A
01D3 7400        E     MOV     A,#LOW c_mem+01FH
01D5 2B                ADD     A,R3
01D6 F582              MOV     DPL,A
01D8 E4                CLR     A
01D9 3400        E     ADDC    A,#HIGH c_mem+01FH
01DB F583              MOV     DPH,A
01DD E0                MOVX    A,@DPTR
01DE F9                MOV     R1,A
01DF A801              MOV     R0,AR1
01E1 120000      E     LCALL   ?C?SLSHR
01E4 900000      R     MOV     DPTR,#i
01E7 E0                MOVX    A,@DPTR
01E8 FD                MOV     R5,A
01E9 ED                MOV     A,R5
01EA 25E0              ADD     A,ACC
01EC 2400        R     ADD     A,#LOW packet_data+01H
01EE F582              MOV     DPL,A
01F0 E4                CLR     A
01F1 3400        R     ADDC    A,#HIGH packet_data+01H
01F3 F583              MOV     DPH,A
01F5 EE                MOV     A,R6
01F6 F0                MOVX    @DPTR,A
01F7 A3                INC     DPTR
01F8 EF                MOV     A,R7
01F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
01FA 900000      R     MOV     DPTR,#i
01FD E0                MOVX    A,@DPTR
01FE 04                INC     A
01FF F0                MOVX    @DPTR,A
0200 80AB              SJMP    ?C0075
0202         ?C0076:
                                           ; SOURCE LINE # 382
0202 900000      R     MOV     DPTR,#packet_lenght
0205 E4                CLR     A
0206 F0                MOVX    @DPTR,A
0207 A3                INC     DPTR
0208 7408              MOV     A,#08H
020A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 39  

020B 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 386
020E         ?C0078:
                                           ; SOURCE LINE # 387
020E 900000      R     MOV     DPTR,#i
0211 E4                CLR     A
0212 F0                MOVX    @DPTR,A
0213         ?C0079:
0213 900000      R     MOV     DPTR,#i
0216 E0                MOVX    A,@DPTR
0217 FF                MOV     R7,A
0218 EF                MOV     A,R7
0219 C3                CLR     C
021A 9403              SUBB    A,#03H
021C 5034              JNC     ?C0080
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
021E 900000      R     MOV     DPTR,#i
0221 E0                MOVX    A,@DPTR
0222 FF                MOV     R7,A
0223 EF                MOV     A,R7
0224 25E0              ADD     A,ACC
0226 25E0              ADD     A,ACC
0228 2400        E     ADD     A,#LOW c_mem+02EH
022A F582              MOV     DPL,A
022C E4                CLR     A
022D 3400        E     ADDC    A,#HIGH c_mem+02EH
022F F583              MOV     DPH,A
0231 120000      E     LCALL   ?C?LLDXDATA
0234 900000      R     MOV     DPTR,#i
0237 E0                MOVX    A,@DPTR
0238 FB                MOV     R3,A
0239 EB                MOV     A,R3
023A 25E0              ADD     A,ACC
023C 25E0              ADD     A,ACC
023E 2400        R     ADD     A,#LOW packet_data+01H
0240 F582              MOV     DPL,A
0242 E4                CLR     A
0243 3400        R     ADDC    A,#HIGH packet_data+01H
0245 F583              MOV     DPH,A
0247 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 391
024A 900000      R     MOV     DPTR,#i
024D E0                MOVX    A,@DPTR
024E 04                INC     A
024F F0                MOVX    @DPTR,A
0250 80C1              SJMP    ?C0079
0252         ?C0080:
                                           ; SOURCE LINE # 393
0252 900000      R     MOV     DPTR,#packet_lenght
0255 E4                CLR     A
0256 F0                MOVX    @DPTR,A
0257 A3                INC     DPTR
0258 740E              MOV     A,#0EH
025A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
025B 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 397
025E         ?C0082:
                                           ; SOURCE LINE # 398
025E 900000      E     MOV     DPTR,#c_mem+03AH
0261 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 40  

0262 FF                MOV     R7,A
0263 900000      R     MOV     DPTR,#packet_data+01H
0266 EF                MOV     A,R7
0267 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0268 900000      R     MOV     DPTR,#packet_lenght
026B E4                CLR     A
026C F0                MOVX    @DPTR,A
026D A3                INC     DPTR
026E 7403              MOV     A,#03H
0270 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0271 020000      R     LJMP    ?C0063
                                           ; SOURCE LINE # 403
0274         ?C0083:
                                           ; SOURCE LINE # 404
0274 900000      R     MOV     DPTR,#i
0277 E4                CLR     A
0278 F0                MOVX    @DPTR,A
0279         ?C0084:
0279 900000      R     MOV     DPTR,#i
027C E0                MOVX    A,@DPTR
027D FF                MOV     R7,A
027E EF                MOV     A,R7
027F C3                CLR     C
0280 9402              SUBB    A,#02H
0282 5060              JNC     ?C0085
                                           ; SOURCE LINE # 405
0284 900000      R     MOV     DPTR,#i
0287 E0                MOVX    A,@DPTR
0288 FF                MOV     R7,A
0289 EF                MOV     A,R7
028A 25E0              ADD     A,ACC
028C 25E0              ADD     A,ACC
028E 2400        E     ADD     A,#LOW c_mem+03BH
0290 F582              MOV     DPL,A
0292 E4                CLR     A
0293 3400        E     ADDC    A,#HIGH c_mem+03BH
0295 F583              MOV     DPH,A
0297 120000      E     LCALL   ?C?LLDXDATA
029A 900000      R     MOV     DPTR,#i
029D E0                MOVX    A,@DPTR
029E FB                MOV     R3,A
029F EB                MOV     A,R3
02A0 75F008            MOV     B,#08H
02A3 A4                MUL     AB
02A4 2400        R     ADD     A,#LOW packet_data+01H
02A6 F582              MOV     DPL,A
02A8 E4                CLR     A
02A9 3400        R     ADDC    A,#HIGH packet_data+01H
02AB F583              MOV     DPH,A
02AD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 407
02B0 900000      R     MOV     DPTR,#i
02B3 E0                MOVX    A,@DPTR
02B4 FF                MOV     R7,A
02B5 EF                MOV     A,R7
02B6 25E0              ADD     A,ACC
02B8 25E0              ADD     A,ACC
02BA 2400        E     ADD     A,#LOW c_mem+043H
02BC F582              MOV     DPL,A
02BE E4                CLR     A
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 41  

02BF 3400        E     ADDC    A,#HIGH c_mem+043H
02C1 F583              MOV     DPH,A
02C3 120000      E     LCALL   ?C?LLDXDATA
02C6 900000      R     MOV     DPTR,#i
02C9 E0                MOVX    A,@DPTR
02CA FB                MOV     R3,A
02CB EB                MOV     A,R3
02CC 75F008            MOV     B,#08H
02CF A4                MUL     AB
02D0 2400        R     ADD     A,#LOW packet_data+05H
02D2 F582              MOV     DPL,A
02D4 E4                CLR     A
02D5 3400        R     ADDC    A,#HIGH packet_data+05H
02D7 F583              MOV     DPH,A
02D9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 409
02DC 900000      R     MOV     DPTR,#i
02DF E0                MOVX    A,@DPTR
02E0 04                INC     A
02E1 F0                MOVX    @DPTR,A
02E2 8095              SJMP    ?C0084
02E4         ?C0085:
                                           ; SOURCE LINE # 410
02E4 900000      R     MOV     DPTR,#packet_lenght
02E7 E4                CLR     A
02E8 F0                MOVX    @DPTR,A
02E9 A3                INC     DPTR
02EA 7412              MOV     A,#012H
02EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
02ED 8019              SJMP    ?C0063
                                           ; SOURCE LINE # 414
02EF         ?C0087:
                                           ; SOURCE LINE # 415
02EF 900000      E     MOV     DPTR,#c_mem+01AH
02F2 E0                MOVX    A,@DPTR
02F3 FE                MOV     R6,A
02F4 A3                INC     DPTR
02F5 E0                MOVX    A,@DPTR
02F6 FF                MOV     R7,A
02F7 900000      R     MOV     DPTR,#packet_data+01H
02FA EE                MOV     A,R6
02FB F0                MOVX    @DPTR,A
02FC A3                INC     DPTR
02FD EF                MOV     A,R7
02FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
02FF 900000      R     MOV     DPTR,#packet_lenght
0302 E4                CLR     A
0303 F0                MOVX    @DPTR,A
0304 A3                INC     DPTR
0305 7404              MOV     A,#04H
0307 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 419
0308         ?C0063:
                                           ; SOURCE LINE # 421
0308 7B01              MOV     R3,#01H
030A 7A00        R     MOV     R2,#HIGH packet_data
030C 7900        R     MOV     R1,#LOW packet_data
030E 900000      R     MOV     DPTR,#packet_lenght
0311 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 42  

0312 FE                MOV     R6,A
0313 A3                INC     DPTR
0314 E0                MOVX    A,@DPTR
0315 FF                MOV     R7,A
0316 EF                MOV     A,R7
0317 14                DEC     A
0318 FD                MOV     R5,A
0319 120000      E     LCALL   _LCRChecksum
031C 900000      R     MOV     DPTR,#packet_lenght
031F E0                MOVX    A,@DPTR
0320 FC                MOV     R4,A
0321 A3                INC     DPTR
0322 E0                MOVX    A,@DPTR
0323 FD                MOV     R5,A
0324 7400        R     MOV     A,#LOW packet_data+0FFFFH
0326 2D                ADD     A,R5
0327 F582              MOV     DPL,A
0329 7400        R     MOV     A,#HIGH packet_data+0FFFFH
032B 3C                ADDC    A,R4
032C F583              MOV     DPH,A
032E EF                MOV     A,R7
032F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
0330 7B01              MOV     R3,#01H
0332 7A00        R     MOV     R2,#HIGH packet_data
0334 7900        R     MOV     R1,#LOW packet_data
0336 900000      R     MOV     DPTR,#packet_lenght
0339 E0                MOVX    A,@DPTR
033A FE                MOV     R6,A
033B A3                INC     DPTR
033C E0                MOVX    A,@DPTR
033D FF                MOV     R7,A
033E AD07              MOV     R5,AR7
0340 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 424
0343 22                RET     
             ; FUNCTION _paramGet (END)

             ; FUNCTION _infoPrepare (BEGIN)
                                           ; SOURCE LINE # 430
0000 900000      R     MOV     DPTR,#info_string
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 436
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH ?SC_0
000A 7900        R     MOV     R1,#LOW ?SC_0
000C C003              PUSH    AR3
000E C002              PUSH    AR2
0010 C001              PUSH    AR1
0012 900000      R     MOV     DPTR,#info_string
0015 120000      E     LCALL   ?C?PLDXDATA
0018 A801              MOV     R0,AR1
001A AC02              MOV     R4,AR2
001C AD03              MOV     R5,AR3
001E D001              POP     AR1
0020 D002              POP     AR2
0022 D003              POP     AR3
0024 120000      E     LCALL   ?C?STRCPYAMD
                                           ; SOURCE LINE # 437
0027 900000      R     MOV     DPTR,#info_string
002A 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 43  

002D C003              PUSH    AR3
002F C002              PUSH    AR2
0031 C001              PUSH    AR1
0033 7BFF              MOV     R3,#0FFH
0035 7A00        R     MOV     R2,#HIGH ?SC_1
0037 7900        R     MOV     R1,#LOW ?SC_1
0039 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
003C 120000      E     LCALL   ?C?PSTXDATA
003F D001              POP     AR1
0041 D002              POP     AR2
0043 D003              POP     AR3
0045 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 438
0048 900000      R     MOV     DPTR,#info_string
004B 120000      E     LCALL   ?C?PLDXDATA
004E C003              PUSH    AR3
0050 C002              PUSH    AR2
0052 C001              PUSH    AR1
0054 7BFF              MOV     R3,#0FFH
0056 7A00        R     MOV     R2,#HIGH ?SC_4
0058 7900        R     MOV     R1,#LOW ?SC_4
005A 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
005D 120000      E     LCALL   ?C?PSTXDATA
0060 D001              POP     AR1
0062 D002              POP     AR2
0064 D003              POP     AR3
0066 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 439
0069 900000      R     MOV     DPTR,#info_string
006C 120000      E     LCALL   ?C?PLDXDATA
006F C003              PUSH    AR3
0071 C002              PUSH    AR2
0073 C001              PUSH    AR1
0075 7BFF              MOV     R3,#0FFH
0077 7A00        R     MOV     R2,#HIGH ?SC_23
0079 7900        R     MOV     R1,#LOW ?SC_23
007B 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
007E 120000      E     LCALL   ?C?PSTXDATA
0081 D001              POP     AR1
0083 D002              POP     AR2
0085 D003              POP     AR3
0087 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 440
008A 900000      R     MOV     DPTR,#info_string
008D 120000      E     LCALL   ?C?PLDXDATA
0090 C003              PUSH    AR3
0092 C002              PUSH    AR2
0094 C001              PUSH    AR1
0096 7BFF              MOV     R3,#0FFH
0098 7A00        R     MOV     R2,#HIGH ?SC_36
009A 7900        R     MOV     R1,#LOW ?SC_36
009C 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
009F 120000      E     LCALL   ?C?PSTXDATA
00A2 D001              POP     AR1
00A4 D002              POP     AR2
00A6 D003              POP     AR3
00A8 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 442
00AB 900000      R     MOV     DPTR,#info_string
00AE 120000      E     LCALL   ?C?PLDXDATA
00B1 C003              PUSH    AR3
00B3 C002              PUSH    AR2
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 44  

00B5 C001              PUSH    AR1
00B7 7BFF              MOV     R3,#0FFH
00B9 7A00        R     MOV     R2,#HIGH ?SC_42
00BB 7900        R     MOV     R1,#LOW ?SC_42
00BD 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
00C0 120000      E     LCALL   ?C?PSTXDATA
00C3 D001              POP     AR1
00C5 D002              POP     AR2
00C7 D003              POP     AR3
00C9 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 443
00CC 7B01              MOV     R3,#01H
00CE 7A00        R     MOV     R2,#HIGH str
00D0 7900        R     MOV     R1,#LOW str
00D2 C003              PUSH    AR3
00D4 C002              PUSH    AR2
00D6 C001              PUSH    AR1
00D8 7BFF              MOV     R3,#0FFH
00DA 7A00        R     MOV     R2,#HIGH ?SC_56
00DC 7900        R     MOV     R1,#LOW ?SC_56
00DE 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
00E1 120000      E     LCALL   ?C?PSTXDATA
00E4 900000      E     MOV     DPTR,#c_mem+01H
00E7 E0                MOVX    A,@DPTR
00E8 FF                MOV     R7,A
00E9 7E00              MOV     R6,#00H
00EB 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
00EE EE                MOV     A,R6
00EF F0                MOVX    @DPTR,A
00F0 A3                INC     DPTR
00F1 EF                MOV     A,R7
00F2 F0                MOVX    @DPTR,A
00F3 D001              POP     AR1
00F5 D002              POP     AR2
00F7 D003              POP     AR3
00F9 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 444
00FC 900000      R     MOV     DPTR,#info_string
00FF 120000      E     LCALL   ?C?PLDXDATA
0102 C003              PUSH    AR3
0104 C002              PUSH    AR2
0106 C001              PUSH    AR1
0108 7B01              MOV     R3,#01H
010A 7A00        R     MOV     R2,#HIGH str
010C 7900        R     MOV     R1,#LOW str
010E 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0111 120000      E     LCALL   ?C?PSTXDATA
0114 D001              POP     AR1
0116 D002              POP     AR2
0118 D003              POP     AR3
011A 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 445
011D 7B01              MOV     R3,#01H
011F 7A00        R     MOV     R2,#HIGH str
0121 7900        R     MOV     R1,#LOW str
0123 C003              PUSH    AR3
0125 C002              PUSH    AR2
0127 C001              PUSH    AR1
0129 7BFF              MOV     R3,#0FFH
012B 7A00        R     MOV     R2,#HIGH ?SC_65
012D 7900        R     MOV     R1,#LOW ?SC_65
012F 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 45  

0132 120000      E     LCALL   ?C?PSTXDATA
0135 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0138 E4                CLR     A
0139 F0                MOVX    @DPTR,A
013A A3                INC     DPTR
013B 7403              MOV     A,#03H
013D F0                MOVX    @DPTR,A
013E D001              POP     AR1
0140 D002              POP     AR2
0142 D003              POP     AR3
0144 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 446
0147 900000      R     MOV     DPTR,#info_string
014A 120000      E     LCALL   ?C?PLDXDATA
014D C003              PUSH    AR3
014F C002              PUSH    AR2
0151 C001              PUSH    AR1
0153 7B01              MOV     R3,#01H
0155 7A00        R     MOV     R2,#HIGH str
0157 7900        R     MOV     R1,#LOW str
0159 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
015C 120000      E     LCALL   ?C?PSTXDATA
015F D001              POP     AR1
0161 D002              POP     AR2
0163 D003              POP     AR3
0165 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 447
0168 7B01              MOV     R3,#01H
016A 7A00        R     MOV     R2,#HIGH str
016C 7900        R     MOV     R1,#LOW str
016E C003              PUSH    AR3
0170 C002              PUSH    AR2
0172 C001              PUSH    AR1
0174 7BFF              MOV     R3,#0FFH
0176 7A00        R     MOV     R2,#HIGH ?SC_89
0178 7900        R     MOV     R1,#LOW ?SC_89
017A 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
017D 120000      E     LCALL   ?C?PSTXDATA
0180 900000      E     MOV     DPTR,#dev_pwm_limit
0183 E0                MOVX    A,@DPTR
0184 FF                MOV     R7,A
0185 7E00              MOV     R6,#00H
0187 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
018A EE                MOV     A,R6
018B F0                MOVX    @DPTR,A
018C A3                INC     DPTR
018D EF                MOV     A,R7
018E F0                MOVX    @DPTR,A
018F D001              POP     AR1
0191 D002              POP     AR2
0193 D003              POP     AR3
0195 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 448
0198 900000      R     MOV     DPTR,#info_string
019B 120000      E     LCALL   ?C?PLDXDATA
019E C003              PUSH    AR3
01A0 C002              PUSH    AR2
01A2 C001              PUSH    AR1
01A4 7B01              MOV     R3,#01H
01A6 7A00        R     MOV     R2,#HIGH str
01A8 7900        R     MOV     R1,#LOW str
01AA 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 46  

01AD 120000      E     LCALL   ?C?PSTXDATA
01B0 D001              POP     AR1
01B2 D002              POP     AR2
01B4 D003              POP     AR3
01B6 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 449
01B9 900000      R     MOV     DPTR,#info_string
01BC 120000      E     LCALL   ?C?PLDXDATA
01BF C003              PUSH    AR3
01C1 C002              PUSH    AR2
01C3 C001              PUSH    AR1
01C5 7BFF              MOV     R3,#0FFH
01C7 7A00        R     MOV     R2,#HIGH ?SC_1
01C9 7900        R     MOV     R1,#LOW ?SC_1
01CB 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
01CE 120000      E     LCALL   ?C?PSTXDATA
01D1 D001              POP     AR1
01D3 D002              POP     AR2
01D5 D003              POP     AR3
01D7 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 451
01DA 900000      R     MOV     DPTR,#info_string
01DD 120000      E     LCALL   ?C?PLDXDATA
01E0 C003              PUSH    AR3
01E2 C002              PUSH    AR2
01E4 C001              PUSH    AR1
01E6 7BFF              MOV     R3,#0FFH
01E8 7A00        R     MOV     R2,#HIGH ?SC_105
01EA 7900        R     MOV     R1,#LOW ?SC_105
01EC 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
01EF 120000      E     LCALL   ?C?PSTXDATA
01F2 D001              POP     AR1
01F4 D002              POP     AR2
01F6 D003              POP     AR3
01F8 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 452
01FB 900000      R     MOV     DPTR,#info_string
01FE 120000      E     LCALL   ?C?PLDXDATA
0201 C003              PUSH    AR3
0203 C002              PUSH    AR2
0205 C001              PUSH    AR1
0207 7BFF              MOV     R3,#0FFH
0209 7A00        R     MOV     R2,#HIGH ?SC_118
020B 7900        R     MOV     R1,#LOW ?SC_118
020D 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0210 120000      E     LCALL   ?C?PSTXDATA
0213 D001              POP     AR1
0215 D002              POP     AR2
0217 D003              POP     AR3
0219 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 454
021C 750000      R     MOV     i,#00H
021F 750000      R     MOV     i+01H,#00H
0222         ?C0089:
0222 C3                CLR     C
0223 E500        R     MOV     A,i+01H
0225 9402              SUBB    A,#02H
0227 E500        R     MOV     A,i
0229 6480              XRL     A,#080H
022B 9480              SUBB    A,#080H
022D 4003              JC      $ + 5H
022F 020000      R     LJMP    ?C0090
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 47  

                                           ; SOURCE LINE # 455
0232 7B01              MOV     R3,#01H
0234 7A00        R     MOV     R2,#HIGH str
0236 7900        R     MOV     R1,#LOW str
0238 C003              PUSH    AR3
023A C002              PUSH    AR2
023C C001              PUSH    AR1
023E 7BFF              MOV     R3,#0FFH
0240 7A00        R     MOV     R2,#HIGH ?SC_137
0242 7900        R     MOV     R1,#LOW ?SC_137
0244 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0247 120000      E     LCALL   ?C?PSTXDATA
024A E500        R     MOV     A,i+01H
024C AE00        R     MOV     R6,i
024E 7802              MOV     R0,#02H
0250         ?C0200:
0250 C3                CLR     C
0251 33                RLC     A
0252 CE                XCH     A,R6
0253 33                RLC     A
0254 CE                XCH     A,R6
0255 D8F9              DJNZ    R0,?C0200
0257 FF                MOV     R7,A
0258 7400        E     MOV     A,#LOW g_refOld
025A 2F                ADD     A,R7
025B F582              MOV     DPL,A
025D 7400        E     MOV     A,#HIGH g_refOld
025F 3E                ADDC    A,R6
0260 F583              MOV     DPH,A
0262 120000      E     LCALL   ?C?LLDXDATA
0265 AA00        R     MOV     R2,i
0267 AB00        R     MOV     R3,i+01H
0269 7400        E     MOV     A,#LOW c_mem+01FH
026B 2B                ADD     A,R3
026C F582              MOV     DPL,A
026E 7400        E     MOV     A,#HIGH c_mem+01FH
0270 3A                ADDC    A,R2
0271 F583              MOV     DPH,A
0273 E0                MOVX    A,@DPTR
0274 F9                MOV     R1,A
0275 A801              MOV     R0,AR1
0277 120000      E     LCALL   ?C?SLSHR
027A 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
027D EE                MOV     A,R6
027E F0                MOVX    @DPTR,A
027F A3                INC     DPTR
0280 EF                MOV     A,R7
0281 F0                MOVX    @DPTR,A
0282 D001              POP     AR1
0284 D002              POP     AR2
0286 D003              POP     AR3
0288 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 456
028B 900000      R     MOV     DPTR,#info_string
028E 120000      E     LCALL   ?C?PLDXDATA
0291 C003              PUSH    AR3
0293 C002              PUSH    AR2
0295 C001              PUSH    AR1
0297 7B01              MOV     R3,#01H
0299 7A00        R     MOV     R2,#HIGH str
029B 7900        R     MOV     R1,#LOW str
029D 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 48  

02A0 120000      E     LCALL   ?C?PSTXDATA
02A3 D001              POP     AR1
02A5 D002              POP     AR2
02A7 D003              POP     AR3
02A9 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 457
02AC 0500        R     INC     i+01H
02AE E500        R     MOV     A,i+01H
02B0 7002              JNZ     ?C0201
02B2 0500        R     INC     i
02B4         ?C0201:
02B4 020000      R     LJMP    ?C0089
02B7         ?C0090:
                                           ; SOURCE LINE # 458
02B7 900000      R     MOV     DPTR,#info_string
02BA 120000      E     LCALL   ?C?PLDXDATA
02BD C003              PUSH    AR3
02BF C002              PUSH    AR2
02C1 C001              PUSH    AR1
02C3 7BFF              MOV     R3,#0FFH
02C5 7A00        R     MOV     R2,#HIGH ?SC_1
02C7 7900        R     MOV     R1,#LOW ?SC_1
02C9 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
02CC 120000      E     LCALL   ?C?PSTXDATA
02CF D001              POP     AR1
02D1 D002              POP     AR2
02D3 D003              POP     AR3
02D5 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 460
02D8 7B01              MOV     R3,#01H
02DA 7A00        R     MOV     R2,#HIGH str
02DC 7900        R     MOV     R1,#LOW str
02DE C003              PUSH    AR3
02E0 C002              PUSH    AR2
02E2 C001              PUSH    AR1
02E4 7BFF              MOV     R3,#0FFH
02E6 7A00        R     MOV     R2,#HIGH ?SC_141
02E8 7900        R     MOV     R1,#LOW ?SC_141
02EA 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
02ED 120000      E     LCALL   ?C?PSTXDATA
02F0 D001              POP     AR1
02F2 D002              POP     AR2
02F4 D003              POP     AR3
02F6 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 462
02F9 900000      E     MOV     DPTR,#g_refOld+08H
02FC E0                MOVX    A,@DPTR
02FD FF                MOV     R7,A
02FE EF                MOV     A,R7
02FF 5403              ANL     A,#03H
0301 FF                MOV     R7,A
0302 EF                MOV     A,R7
0303 6023              JZ      ?C0092
                                           ; SOURCE LINE # 463
0305 7B01              MOV     R3,#01H
0307 7A00        R     MOV     R2,#HIGH str
0309 7900        R     MOV     R1,#LOW str
030B C003              PUSH    AR3
030D C002              PUSH    AR2
030F C001              PUSH    AR1
0311 7BFF              MOV     R3,#0FFH
0313 7A00        R     MOV     R2,#HIGH ?SC_157
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 49  

0315 7900        R     MOV     R1,#LOW ?SC_157
0317 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
031A 120000      E     LCALL   ?C?PSTXDATA
031D D001              POP     AR1
031F D002              POP     AR2
0321 D003              POP     AR3
0323 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 464
0326 8021              SJMP    ?C0093
0328         ?C0092:
                                           ; SOURCE LINE # 465
0328 7B01              MOV     R3,#01H
032A 7A00        R     MOV     R2,#HIGH str
032C 7900        R     MOV     R1,#LOW str
032E C003              PUSH    AR3
0330 C002              PUSH    AR2
0332 C001              PUSH    AR1
0334 7BFF              MOV     R3,#0FFH
0336 7A00        R     MOV     R2,#HIGH ?SC_163
0338 7900        R     MOV     R1,#LOW ?SC_163
033A 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
033D 120000      E     LCALL   ?C?PSTXDATA
0340 D001              POP     AR1
0342 D002              POP     AR2
0344 D003              POP     AR3
0346 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 466
0349         ?C0093:
                                           ; SOURCE LINE # 467
0349 900000      R     MOV     DPTR,#info_string
034C 120000      E     LCALL   ?C?PLDXDATA
034F C003              PUSH    AR3
0351 C002              PUSH    AR2
0353 C001              PUSH    AR1
0355 7B01              MOV     R3,#01H
0357 7A00        R     MOV     R2,#HIGH str
0359 7900        R     MOV     R1,#LOW str
035B 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
035E 120000      E     LCALL   ?C?PSTXDATA
0361 D001              POP     AR1
0363 D002              POP     AR2
0365 D003              POP     AR3
0367 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 470
036A 900000      R     MOV     DPTR,#info_string
036D 120000      E     LCALL   ?C?PLDXDATA
0370 C003              PUSH    AR3
0372 C002              PUSH    AR2
0374 C001              PUSH    AR1
0376 7BFF              MOV     R3,#0FFH
0378 7A00        R     MOV     R2,#HIGH ?SC_168
037A 7900        R     MOV     R1,#LOW ?SC_168
037C 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
037F 120000      E     LCALL   ?C?PSTXDATA
0382 D001              POP     AR1
0384 D002              POP     AR2
0386 D003              POP     AR3
0388 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 471
038B 900000      R     MOV     DPTR,#info_string
038E 120000      E     LCALL   ?C?PLDXDATA
0391 C003              PUSH    AR3
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 50  

0393 C002              PUSH    AR2
0395 C001              PUSH    AR1
0397 7BFF              MOV     R3,#0FFH
0399 7A00        R     MOV     R2,#HIGH ?SC_190
039B 7900        R     MOV     R1,#LOW ?SC_190
039D 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
03A0 120000      E     LCALL   ?C?PSTXDATA
03A3 D001              POP     AR1
03A5 D002              POP     AR2
03A7 D003              POP     AR3
03A9 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 472
03AC 750000      R     MOV     i,#00H
03AF 750000      R     MOV     i+01H,#00H
03B2         ?C0094:
03B2 C3                CLR     C
03B3 E500        R     MOV     A,i+01H
03B5 9403              SUBB    A,#03H
03B7 E500        R     MOV     A,i
03B9 6480              XRL     A,#080H
03BB 9480              SUBB    A,#080H
03BD 4003              JC      $ + 5H
03BF 020000      R     LJMP    ?C0095
                                           ; SOURCE LINE # 474
03C2 7B01              MOV     R3,#01H
03C4 7A00        R     MOV     R2,#HIGH str
03C6 7900        R     MOV     R1,#LOW str
03C8 C003              PUSH    AR3
03CA C002              PUSH    AR2
03CC C001              PUSH    AR1
03CE 7BFF              MOV     R3,#0FFH
03D0 7A00        R     MOV     R2,#HIGH ?SC_206
03D2 7900        R     MOV     R1,#LOW ?SC_206
03D4 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
03D7 120000      E     LCALL   ?C?PSTXDATA
03DA E500        R     MOV     A,i+01H
03DC 2401              ADD     A,#01H
03DE FF                MOV     R7,A
03DF E500        R     MOV     A,i
03E1 3400              ADDC    A,#00H
03E3 FE                MOV     R6,A
03E4 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
03E7 EE                MOV     A,R6
03E8 F0                MOVX    @DPTR,A
03E9 A3                INC     DPTR
03EA EF                MOV     A,R7
03EB F0                MOVX    @DPTR,A
03EC E500        R     MOV     A,i+01H
03EE AE00        R     MOV     R6,i
03F0 7802              MOV     R0,#02H
03F2         ?C0202:
03F2 C3                CLR     C
03F3 33                RLC     A
03F4 CE                XCH     A,R6
03F5 33                RLC     A
03F6 CE                XCH     A,R6
03F7 D8F9              DJNZ    R0,?C0202
03F9 FF                MOV     R7,A
03FA 7400        E     MOV     A,#LOW g_measOld
03FC 2F                ADD     A,R7
03FD F582              MOV     DPL,A
03FF 7400        E     MOV     A,#HIGH g_measOld
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 51  

0401 3E                ADDC    A,R6
0402 F583              MOV     DPH,A
0404 120000      E     LCALL   ?C?LLDXDATA
0407 AA00        R     MOV     R2,i
0409 AB00        R     MOV     R3,i+01H
040B 7400        E     MOV     A,#LOW c_mem+01FH
040D 2B                ADD     A,R3
040E F582              MOV     DPL,A
0410 7400        E     MOV     A,#HIGH c_mem+01FH
0412 3A                ADDC    A,R2
0413 F583              MOV     DPH,A
0415 E0                MOVX    A,@DPTR
0416 F9                MOV     R1,A
0417 A801              MOV     R0,AR1
0419 120000      E     LCALL   ?C?SLSHR
041C 900000      E     MOV     DPTR,#?_sprintf?BYTE+08H
041F EE                MOV     A,R6
0420 F0                MOVX    @DPTR,A
0421 A3                INC     DPTR
0422 EF                MOV     A,R7
0423 F0                MOVX    @DPTR,A
0424 D001              POP     AR1
0426 D002              POP     AR2
0428 D003              POP     AR3
042A 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 475
042D 900000      R     MOV     DPTR,#info_string
0430 120000      E     LCALL   ?C?PLDXDATA
0433 C003              PUSH    AR3
0435 C002              PUSH    AR2
0437 C001              PUSH    AR1
0439 7B01              MOV     R3,#01H
043B 7A00        R     MOV     R2,#HIGH str
043D 7900        R     MOV     R1,#LOW str
043F 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0442 120000      E     LCALL   ?C?PSTXDATA
0445 D001              POP     AR1
0447 D002              POP     AR2
0449 D003              POP     AR3
044B 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 476
044E 900000      R     MOV     DPTR,#info_string
0451 120000      E     LCALL   ?C?PLDXDATA
0454 C003              PUSH    AR3
0456 C002              PUSH    AR2
0458 C001              PUSH    AR1
045A 7BFF              MOV     R3,#0FFH
045C 7A00        R     MOV     R2,#HIGH ?SC_1
045E 7900        R     MOV     R1,#LOW ?SC_1
0460 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0463 120000      E     LCALL   ?C?PSTXDATA
0466 D001              POP     AR1
0468 D002              POP     AR2
046A D003              POP     AR3
046C 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 477
046F 0500        R     INC     i+01H
0471 E500        R     MOV     A,i+01H
0473 7002              JNZ     ?C0203
0475 0500        R     INC     i
0477         ?C0203:
0477 020000      R     LJMP    ?C0094
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 52  

047A         ?C0095:
                                           ; SOURCE LINE # 478
047A 7B01              MOV     R3,#01H
047C 7A00        R     MOV     R2,#HIGH str
047E 7900        R     MOV     R1,#LOW str
0480 C003              PUSH    AR3
0482 C002              PUSH    AR2
0484 C001              PUSH    AR1
0486 7BFF              MOV     R3,#0FFH
0488 7A00        R     MOV     R2,#HIGH ?SC_215
048A 7900        R     MOV     R1,#LOW ?SC_215
048C 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
048F 120000      E     LCALL   ?C?PSTXDATA
0492 900000      E     MOV     DPTR,#dev_tension
0495 120000      E     LCALL   ?C?LLDXDATA
0498 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
049B 120000      E     LCALL   ?C?LSTXDATA
049E D001              POP     AR1
04A0 D002              POP     AR2
04A2 D003              POP     AR3
04A4 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 479
04A7 900000      R     MOV     DPTR,#info_string
04AA 120000      E     LCALL   ?C?PLDXDATA
04AD C003              PUSH    AR3
04AF C002              PUSH    AR2
04B1 C001              PUSH    AR1
04B3 7B01              MOV     R3,#01H
04B5 7A00        R     MOV     R2,#HIGH str
04B7 7900        R     MOV     R1,#LOW str
04B9 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
04BC 120000      E     LCALL   ?C?PSTXDATA
04BF D001              POP     AR1
04C1 D002              POP     AR2
04C3 D003              POP     AR3
04C5 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 480
04C8 900000      R     MOV     DPTR,#info_string
04CB 120000      E     LCALL   ?C?PLDXDATA
04CE C003              PUSH    AR3
04D0 C002              PUSH    AR2
04D2 C001              PUSH    AR1
04D4 7BFF              MOV     R3,#0FFH
04D6 7A00        R     MOV     R2,#HIGH ?SC_1
04D8 7900        R     MOV     R1,#LOW ?SC_1
04DA 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
04DD 120000      E     LCALL   ?C?PSTXDATA
04E0 D001              POP     AR1
04E2 D002              POP     AR2
04E4 D003              POP     AR3
04E6 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 482
04E9 7B01              MOV     R3,#01H
04EB 7A00        R     MOV     R2,#HIGH str
04ED 7900        R     MOV     R1,#LOW str
04EF C003              PUSH    AR3
04F1 C002              PUSH    AR2
04F3 C001              PUSH    AR1
04F5 7BFF              MOV     R3,#0FFH
04F7 7A00        R     MOV     R2,#HIGH ?SC_233
04F9 7900        R     MOV     R1,#LOW ?SC_233
04FB 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 53  

04FE 120000      E     LCALL   ?C?PSTXDATA
0501 900000      E     MOV     DPTR,#g_measOld+0CH
0504 E0                MOVX    A,@DPTR
0505 FE                MOV     R6,A
0506 A3                INC     DPTR
0507 E0                MOVX    A,@DPTR
0508 FF                MOV     R7,A
0509 EE                MOV     A,R6
050A 33                RLC     A
050B 95E0              SUBB    A,ACC
050D FD                MOV     R5,A
050E FC                MOV     R4,A
050F 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0512 120000      E     LCALL   ?C?LSTXDATA
0515 D001              POP     AR1
0517 D002              POP     AR2
0519 D003              POP     AR3
051B 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 483
051E 900000      R     MOV     DPTR,#info_string
0521 120000      E     LCALL   ?C?PLDXDATA
0524 C003              PUSH    AR3
0526 C002              PUSH    AR2
0528 C001              PUSH    AR1
052A 7B01              MOV     R3,#01H
052C 7A00        R     MOV     R2,#HIGH str
052E 7900        R     MOV     R1,#LOW str
0530 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0533 120000      E     LCALL   ?C?PSTXDATA
0536 D001              POP     AR1
0538 D002              POP     AR2
053A D003              POP     AR3
053C 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 484
053F 900000      R     MOV     DPTR,#info_string
0542 120000      E     LCALL   ?C?PLDXDATA
0545 C003              PUSH    AR3
0547 C002              PUSH    AR2
0549 C001              PUSH    AR1
054B 7BFF              MOV     R3,#0FFH
054D 7A00        R     MOV     R2,#HIGH ?SC_1
054F 7900        R     MOV     R1,#LOW ?SC_1
0551 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0554 120000      E     LCALL   ?C?PSTXDATA
0557 D001              POP     AR1
0559 D002              POP     AR2
055B D003              POP     AR3
055D 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 486
0560 7B01              MOV     R3,#01H
0562 7A00        R     MOV     R2,#HIGH str
0564 7900        R     MOV     R1,#LOW str
0566 C003              PUSH    AR3
0568 C002              PUSH    AR2
056A C001              PUSH    AR1
056C 7BFF              MOV     R3,#0FFH
056E 7A00        R     MOV     R2,#HIGH ?SC_253
0570 7900        R     MOV     R1,#LOW ?SC_253
0572 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0575 120000      E     LCALL   ?C?PSTXDATA
0578 900000      E     MOV     DPTR,#g_measOld+0EH
057B E0                MOVX    A,@DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 54  

057C FE                MOV     R6,A
057D A3                INC     DPTR
057E E0                MOVX    A,@DPTR
057F FF                MOV     R7,A
0580 EE                MOV     A,R6
0581 33                RLC     A
0582 95E0              SUBB    A,ACC
0584 FD                MOV     R5,A
0585 FC                MOV     R4,A
0586 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0589 120000      E     LCALL   ?C?LSTXDATA
058C D001              POP     AR1
058E D002              POP     AR2
0590 D003              POP     AR3
0592 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 487
0595 900000      R     MOV     DPTR,#info_string
0598 120000      E     LCALL   ?C?PLDXDATA
059B C003              PUSH    AR3
059D C002              PUSH    AR2
059F C001              PUSH    AR1
05A1 7B01              MOV     R3,#01H
05A3 7A00        R     MOV     R2,#HIGH str
05A5 7900        R     MOV     R1,#LOW str
05A7 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
05AA 120000      E     LCALL   ?C?PSTXDATA
05AD D001              POP     AR1
05AF D002              POP     AR2
05B1 D003              POP     AR3
05B3 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 488
05B6 900000      R     MOV     DPTR,#info_string
05B9 120000      E     LCALL   ?C?PLDXDATA
05BC C003              PUSH    AR3
05BE C002              PUSH    AR2
05C0 C001              PUSH    AR1
05C2 7BFF              MOV     R3,#0FFH
05C4 7A00        R     MOV     R2,#HIGH ?SC_1
05C6 7900        R     MOV     R1,#LOW ?SC_1
05C8 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
05CB 120000      E     LCALL   ?C?PSTXDATA
05CE D001              POP     AR1
05D0 D002              POP     AR2
05D2 D003              POP     AR3
05D4 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 491
05D7 900000      R     MOV     DPTR,#info_string
05DA 120000      E     LCALL   ?C?PLDXDATA
05DD C003              PUSH    AR3
05DF C002              PUSH    AR2
05E1 C001              PUSH    AR1
05E3 7BFF              MOV     R3,#0FFH
05E5 7A00        R     MOV     R2,#HIGH ?SC_273
05E7 7900        R     MOV     R1,#LOW ?SC_273
05E9 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
05EC 120000      E     LCALL   ?C?PSTXDATA
05EF D001              POP     AR1
05F1 D002              POP     AR2
05F3 D003              POP     AR3
05F5 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 493
05F8 900000      R     MOV     DPTR,#info_string
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 55  

05FB 120000      E     LCALL   ?C?PLDXDATA
05FE C003              PUSH    AR3
0600 C002              PUSH    AR2
0602 C001              PUSH    AR1
0604 7BFF              MOV     R3,#0FFH
0606 7A00        R     MOV     R2,#HIGH ?SC_295
0608 7900        R     MOV     R1,#LOW ?SC_295
060A 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
060D 120000      E     LCALL   ?C?PSTXDATA
0610 D001              POP     AR1
0612 D002              POP     AR2
0614 D003              POP     AR3
0616 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 494
0619 7B01              MOV     R3,#01H
061B 7A00        R     MOV     R2,#HIGH str
061D 7900        R     MOV     R1,#LOW str
061F C003              PUSH    AR3
0621 C002              PUSH    AR2
0623 C001              PUSH    AR1
0625 7BFF              MOV     R3,#0FFH
0627 7A00        R     MOV     R2,#HIGH ?SC_313
0629 7900        R     MOV     R1,#LOW ?SC_313
062B 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
062E 120000      E     LCALL   ?C?PSTXDATA
0631 900000      E     MOV     DPTR,#c_mem+02H
0634 120000      E     LCALL   ?C?LLDXDATA
0637 EC                MOV     A,R4
0638 120000      E     LCALL   ?C?FCASTL
063B 7B00              MOV     R3,#00H
063D 7A00              MOV     R2,#00H
063F 7980              MOV     R1,#080H
0641 7847              MOV     R0,#047H
0643 120000      E     LCALL   ?C?FPDIV
0646 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0649 120000      E     LCALL   ?C?LSTXDATA
064C D001              POP     AR1
064E D002              POP     AR2
0650 D003              POP     AR3
0652 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 495
0655 900000      R     MOV     DPTR,#info_string
0658 120000      E     LCALL   ?C?PLDXDATA
065B C003              PUSH    AR3
065D C002              PUSH    AR2
065F C001              PUSH    AR1
0661 7B01              MOV     R3,#01H
0663 7A00        R     MOV     R2,#HIGH str
0665 7900        R     MOV     R1,#LOW str
0667 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
066A 120000      E     LCALL   ?C?PSTXDATA
066D D001              POP     AR1
066F D002              POP     AR2
0671 D003              POP     AR3
0673 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 496
0676 7B01              MOV     R3,#01H
0678 7A00        R     MOV     R2,#HIGH str
067A 7900        R     MOV     R1,#LOW str
067C C003              PUSH    AR3
067E C002              PUSH    AR2
0680 C001              PUSH    AR1
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 56  

0682 7BFF              MOV     R3,#0FFH
0684 7A00        R     MOV     R2,#HIGH ?SC_323
0686 7900        R     MOV     R1,#LOW ?SC_323
0688 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
068B 120000      E     LCALL   ?C?PSTXDATA
068E 900000      E     MOV     DPTR,#c_mem+06H
0691 120000      E     LCALL   ?C?LLDXDATA
0694 EC                MOV     A,R4
0695 120000      E     LCALL   ?C?FCASTL
0698 7B00              MOV     R3,#00H
069A 7A00              MOV     R2,#00H
069C 7980              MOV     R1,#080H
069E 7847              MOV     R0,#047H
06A0 120000      E     LCALL   ?C?FPDIV
06A3 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
06A6 120000      E     LCALL   ?C?LSTXDATA
06A9 D001              POP     AR1
06AB D002              POP     AR2
06AD D003              POP     AR3
06AF 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 497
06B2 900000      R     MOV     DPTR,#info_string
06B5 120000      E     LCALL   ?C?PLDXDATA
06B8 C003              PUSH    AR3
06BA C002              PUSH    AR2
06BC C001              PUSH    AR1
06BE 7B01              MOV     R3,#01H
06C0 7A00        R     MOV     R2,#HIGH str
06C2 7900        R     MOV     R1,#LOW str
06C4 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
06C7 120000      E     LCALL   ?C?PSTXDATA
06CA D001              POP     AR1
06CC D002              POP     AR2
06CE D003              POP     AR3
06D0 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 498
06D3 7B01              MOV     R3,#01H
06D5 7A00        R     MOV     R2,#HIGH str
06D7 7900        R     MOV     R1,#LOW str
06D9 C003              PUSH    AR3
06DB C002              PUSH    AR2
06DD C001              PUSH    AR1
06DF 7BFF              MOV     R3,#0FFH
06E1 7A00        R     MOV     R2,#HIGH ?SC_333
06E3 7900        R     MOV     R1,#LOW ?SC_333
06E5 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
06E8 120000      E     LCALL   ?C?PSTXDATA
06EB 900000      E     MOV     DPTR,#c_mem+0AH
06EE 120000      E     LCALL   ?C?LLDXDATA
06F1 EC                MOV     A,R4
06F2 120000      E     LCALL   ?C?FCASTL
06F5 7B00              MOV     R3,#00H
06F7 7A00              MOV     R2,#00H
06F9 7980              MOV     R1,#080H
06FB 7847              MOV     R0,#047H
06FD 120000      E     LCALL   ?C?FPDIV
0700 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0703 120000      E     LCALL   ?C?LSTXDATA
0706 D001              POP     AR1
0708 D002              POP     AR2
070A D003              POP     AR3
070C 120000      E     LCALL   _sprintf
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 57  

                                           ; SOURCE LINE # 499
070F 900000      R     MOV     DPTR,#info_string
0712 120000      E     LCALL   ?C?PLDXDATA
0715 C003              PUSH    AR3
0717 C002              PUSH    AR2
0719 C001              PUSH    AR1
071B 7B01              MOV     R3,#01H
071D 7A00        R     MOV     R2,#HIGH str
071F 7900        R     MOV     R1,#LOW str
0721 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0724 120000      E     LCALL   ?C?PSTXDATA
0727 D001              POP     AR1
0729 D002              POP     AR2
072B D003              POP     AR3
072D 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 501
0730 900000      R     MOV     DPTR,#info_string
0733 120000      E     LCALL   ?C?PLDXDATA
0736 C003              PUSH    AR3
0738 C002              PUSH    AR2
073A C001              PUSH    AR1
073C 7BFF              MOV     R3,#0FFH
073E 7A00        R     MOV     R2,#HIGH ?SC_343
0740 7900        R     MOV     R1,#LOW ?SC_343
0742 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0745 120000      E     LCALL   ?C?PSTXDATA
0748 D001              POP     AR1
074A D002              POP     AR2
074C D003              POP     AR3
074E 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 502
0751 7B01              MOV     R3,#01H
0753 7A00        R     MOV     R2,#HIGH str
0755 7900        R     MOV     R1,#LOW str
0757 C003              PUSH    AR3
0759 C002              PUSH    AR2
075B C001              PUSH    AR1
075D 7BFF              MOV     R3,#0FFH
075F 7A00        R     MOV     R2,#HIGH ?SC_313
0761 7900        R     MOV     R1,#LOW ?SC_313
0763 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0766 120000      E     LCALL   ?C?PSTXDATA
0769 900000      E     MOV     DPTR,#c_mem+0EH
076C 120000      E     LCALL   ?C?LLDXDATA
076F EC                MOV     A,R4
0770 120000      E     LCALL   ?C?FCASTL
0773 7B00              MOV     R3,#00H
0775 7A00              MOV     R2,#00H
0777 7980              MOV     R1,#080H
0779 7847              MOV     R0,#047H
077B 120000      E     LCALL   ?C?FPDIV
077E 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0781 120000      E     LCALL   ?C?LSTXDATA
0784 D001              POP     AR1
0786 D002              POP     AR2
0788 D003              POP     AR3
078A 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 503
078D 900000      R     MOV     DPTR,#info_string
0790 120000      E     LCALL   ?C?PLDXDATA
0793 C003              PUSH    AR3
0795 C002              PUSH    AR2
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 58  

0797 C001              PUSH    AR1
0799 7B01              MOV     R3,#01H
079B 7A00        R     MOV     R2,#HIGH str
079D 7900        R     MOV     R1,#LOW str
079F 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
07A2 120000      E     LCALL   ?C?PSTXDATA
07A5 D001              POP     AR1
07A7 D002              POP     AR2
07A9 D003              POP     AR3
07AB 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 504
07AE 7B01              MOV     R3,#01H
07B0 7A00        R     MOV     R2,#HIGH str
07B2 7900        R     MOV     R1,#LOW str
07B4 C003              PUSH    AR3
07B6 C002              PUSH    AR2
07B8 C001              PUSH    AR1
07BA 7BFF              MOV     R3,#0FFH
07BC 7A00        R     MOV     R2,#HIGH ?SC_323
07BE 7900        R     MOV     R1,#LOW ?SC_323
07C0 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
07C3 120000      E     LCALL   ?C?PSTXDATA
07C6 900000      E     MOV     DPTR,#c_mem+012H
07C9 120000      E     LCALL   ?C?LLDXDATA
07CC EC                MOV     A,R4
07CD 120000      E     LCALL   ?C?FCASTL
07D0 7B00              MOV     R3,#00H
07D2 7A00              MOV     R2,#00H
07D4 7980              MOV     R1,#080H
07D6 7847              MOV     R0,#047H
07D8 120000      E     LCALL   ?C?FPDIV
07DB 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
07DE 120000      E     LCALL   ?C?LSTXDATA
07E1 D001              POP     AR1
07E3 D002              POP     AR2
07E5 D003              POP     AR3
07E7 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 505
07EA 900000      R     MOV     DPTR,#info_string
07ED 120000      E     LCALL   ?C?PLDXDATA
07F0 C003              PUSH    AR3
07F2 C002              PUSH    AR2
07F4 C001              PUSH    AR1
07F6 7B01              MOV     R3,#01H
07F8 7A00        R     MOV     R2,#HIGH str
07FA 7900        R     MOV     R1,#LOW str
07FC 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
07FF 120000      E     LCALL   ?C?PSTXDATA
0802 D001              POP     AR1
0804 D002              POP     AR2
0806 D003              POP     AR3
0808 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 506
080B 7B01              MOV     R3,#01H
080D 7A00        R     MOV     R2,#HIGH str
080F 7900        R     MOV     R1,#LOW str
0811 C003              PUSH    AR3
0813 C002              PUSH    AR2
0815 C001              PUSH    AR1
0817 7BFF              MOV     R3,#0FFH
0819 7A00        R     MOV     R2,#HIGH ?SC_333
081B 7900        R     MOV     R1,#LOW ?SC_333
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 59  

081D 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0820 120000      E     LCALL   ?C?PSTXDATA
0823 900000      E     MOV     DPTR,#c_mem+016H
0826 120000      E     LCALL   ?C?LLDXDATA
0829 EC                MOV     A,R4
082A 120000      E     LCALL   ?C?FCASTL
082D 7B00              MOV     R3,#00H
082F 7A00              MOV     R2,#00H
0831 7980              MOV     R1,#080H
0833 7847              MOV     R0,#047H
0835 120000      E     LCALL   ?C?FPDIV
0838 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
083B 120000      E     LCALL   ?C?LSTXDATA
083E D001              POP     AR1
0840 D002              POP     AR2
0842 D003              POP     AR3
0844 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 507
0847 900000      R     MOV     DPTR,#info_string
084A 120000      E     LCALL   ?C?PLDXDATA
084D C003              PUSH    AR3
084F C002              PUSH    AR2
0851 C001              PUSH    AR1
0853 7B01              MOV     R3,#01H
0855 7A00        R     MOV     R2,#HIGH str
0857 7900        R     MOV     R1,#LOW str
0859 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
085C 120000      E     LCALL   ?C?PSTXDATA
085F D001              POP     AR1
0861 D002              POP     AR2
0863 D003              POP     AR3
0865 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 509
0868 900000      R     MOV     DPTR,#info_string
086B 120000      E     LCALL   ?C?PLDXDATA
086E C003              PUSH    AR3
0870 C002              PUSH    AR2
0872 C001              PUSH    AR1
0874 7BFF              MOV     R3,#0FFH
0876 7A00        R     MOV     R2,#HIGH ?SC_1
0878 7900        R     MOV     R1,#LOW ?SC_1
087A 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
087D 120000      E     LCALL   ?C?PSTXDATA
0880 D001              POP     AR1
0882 D002              POP     AR2
0884 D003              POP     AR3
0886 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 511
0889 900000      E     MOV     DPTR,#c_mem+01CH
088C E0                MOVX    A,@DPTR
088D FF                MOV     R7,A
088E EF                MOV     A,R7
088F B40323            CJNE    A,#03H,?C0097
                                           ; SOURCE LINE # 512
0892 900000      R     MOV     DPTR,#info_string
0895 120000      E     LCALL   ?C?PLDXDATA
0898 C003              PUSH    AR3
089A C002              PUSH    AR2
089C C001              PUSH    AR1
089E 7BFF              MOV     R3,#0FFH
08A0 7A00        R     MOV     R2,#HIGH ?SC_369
08A2 7900        R     MOV     R1,#LOW ?SC_369
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 60  

08A4 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
08A7 120000      E     LCALL   ?C?PSTXDATA
08AA D001              POP     AR1
08AC D002              POP     AR2
08AE D003              POP     AR3
08B0 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 513
08B3 8021              SJMP    ?C0098
08B5         ?C0097:
                                           ; SOURCE LINE # 514
08B5 900000      R     MOV     DPTR,#info_string
08B8 120000      E     LCALL   ?C?PLDXDATA
08BB C003              PUSH    AR3
08BD C002              PUSH    AR2
08BF C001              PUSH    AR1
08C1 7BFF              MOV     R3,#0FFH
08C3 7A00        R     MOV     R2,#HIGH ?SC_395
08C5 7900        R     MOV     R1,#LOW ?SC_395
08C7 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
08CA 120000      E     LCALL   ?C?PSTXDATA
08CD D001              POP     AR1
08CF D002              POP     AR2
08D1 D003              POP     AR3
08D3 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 515
08D6         ?C0098:
                                           ; SOURCE LINE # 517
08D6 900000      E     MOV     DPTR,#c_mem+01DH
08D9 E0                MOVX    A,@DPTR
08DA FF                MOV     R7,A
08DB EF                MOV     A,R7
08DC 120000      E     LCALL   ?C?CCASE
08DF 0000        R     DW      ?C0100
08E1 00                DB      00H
08E2 0000        R     DW      ?C0101
08E4 01                DB      01H
08E5 0000              DW      00H
08E7 0000        R     DW      ?C0099
                                           ; SOURCE LINE # 518
08E9         ?C0100:
                                           ; SOURCE LINE # 519
08E9 900000      R     MOV     DPTR,#info_string
08EC 120000      E     LCALL   ?C?PLDXDATA
08EF C003              PUSH    AR3
08F1 C002              PUSH    AR2
08F3 C001              PUSH    AR1
08F5 7BFF              MOV     R3,#0FFH
08F7 7A00        R     MOV     R2,#HIGH ?SC_420
08F9 7900        R     MOV     R1,#LOW ?SC_420
08FB 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
08FE 120000      E     LCALL   ?C?PSTXDATA
0901 D001              POP     AR1
0903 D002              POP     AR2
0905 D003              POP     AR3
0907 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 520
090A 8021              SJMP    ?C0099
                                           ; SOURCE LINE # 521
090C         ?C0101:
                                           ; SOURCE LINE # 522
090C 900000      R     MOV     DPTR,#info_string
090F 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 61  

0912 C003              PUSH    AR3
0914 C002              PUSH    AR2
0916 C001              PUSH    AR1
0918 7BFF              MOV     R3,#0FFH
091A 7A00        R     MOV     R2,#HIGH ?SC_438
091C 7900        R     MOV     R1,#LOW ?SC_438
091E 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0921 120000      E     LCALL   ?C?PSTXDATA
0924 D001              POP     AR1
0926 D002              POP     AR2
0928 D003              POP     AR3
092A 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
092D         ?C0099:
                                           ; SOURCE LINE # 526
092D 900000      R     MOV     DPTR,#info_string
0930 120000      E     LCALL   ?C?PLDXDATA
0933 C003              PUSH    AR3
0935 C002              PUSH    AR2
0937 C001              PUSH    AR1
0939 7BFF              MOV     R3,#0FFH
093B 7A00        R     MOV     R2,#HIGH ?SC_461
093D 7900        R     MOV     R1,#LOW ?SC_461
093F 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0942 120000      E     LCALL   ?C?PSTXDATA
0945 D001              POP     AR1
0947 D002              POP     AR2
0949 D003              POP     AR3
094B 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 527
094E 900000      E     MOV     DPTR,#c_mem+01EH
0951 E0                MOVX    A,@DPTR
0952 FF                MOV     R7,A
0953 EF                MOV     A,R7
0954 120000      E     LCALL   ?C?CCASE
0957 0000        R     DW      ?C0103
0959 00                DB      00H
095A 0000        R     DW      ?C0104
095C 01                DB      01H
095D 0000        R     DW      ?C0105
095F 02                DB      02H
0960 0000        R     DW      ?C0106
0962 03                DB      03H
0963 0000              DW      00H
0965 0000        R     DW      ?C0102
                                           ; SOURCE LINE # 528
0967         ?C0103:
                                           ; SOURCE LINE # 529
0967 900000      R     MOV     DPTR,#info_string
096A 120000      E     LCALL   ?C?PLDXDATA
096D C003              PUSH    AR3
096F C002              PUSH    AR2
0971 C001              PUSH    AR1
0973 7BFF              MOV     R3,#0FFH
0975 7A00        R     MOV     R2,#HIGH ?SC_476
0977 7900        R     MOV     R1,#LOW ?SC_476
0979 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
097C 120000      E     LCALL   ?C?PSTXDATA
097F D001              POP     AR1
0981 D002              POP     AR2
0983 D003              POP     AR3
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 62  

0985 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 530
0988 8067              SJMP    ?C0102
                                           ; SOURCE LINE # 531
098A         ?C0104:
                                           ; SOURCE LINE # 532
098A 900000      R     MOV     DPTR,#info_string
098D 120000      E     LCALL   ?C?PLDXDATA
0990 C003              PUSH    AR3
0992 C002              PUSH    AR2
0994 C001              PUSH    AR1
0996 7BFF              MOV     R3,#0FFH
0998 7A00        R     MOV     R2,#HIGH ?SC_487
099A 7900        R     MOV     R1,#LOW ?SC_487
099C 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
099F 120000      E     LCALL   ?C?PSTXDATA
09A2 D001              POP     AR1
09A4 D002              POP     AR2
09A6 D003              POP     AR3
09A8 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 533
09AB 8044              SJMP    ?C0102
                                           ; SOURCE LINE # 534
09AD         ?C0105:
                                           ; SOURCE LINE # 535
09AD 900000      R     MOV     DPTR,#info_string
09B0 120000      E     LCALL   ?C?PLDXDATA
09B3 C003              PUSH    AR3
09B5 C002              PUSH    AR2
09B7 C001              PUSH    AR1
09B9 7BFF              MOV     R3,#0FFH
09BB 7A00        R     MOV     R2,#HIGH ?SC_493
09BD 7900        R     MOV     R1,#LOW ?SC_493
09BF 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
09C2 120000      E     LCALL   ?C?PSTXDATA
09C5 D001              POP     AR1
09C7 D002              POP     AR2
09C9 D003              POP     AR3
09CB 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 536
09CE 8021              SJMP    ?C0102
                                           ; SOURCE LINE # 537
09D0         ?C0106:
                                           ; SOURCE LINE # 538
09D0 900000      R     MOV     DPTR,#info_string
09D3 120000      E     LCALL   ?C?PLDXDATA
09D6 C003              PUSH    AR3
09D8 C002              PUSH    AR2
09DA C001              PUSH    AR1
09DC 7BFF              MOV     R3,#0FFH
09DE 7A00        R     MOV     R2,#HIGH ?SC_503
09E0 7900        R     MOV     R1,#LOW ?SC_503
09E2 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
09E5 120000      E     LCALL   ?C?PSTXDATA
09E8 D001              POP     AR1
09EA D002              POP     AR2
09EC D003              POP     AR3
09EE 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
09F1         ?C0102:
                                           ; SOURCE LINE # 544
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 63  

09F1 900000      R     MOV     DPTR,#info_string
09F4 120000      E     LCALL   ?C?PLDXDATA
09F7 C003              PUSH    AR3
09F9 C002              PUSH    AR2
09FB C001              PUSH    AR1
09FD 7BFF              MOV     R3,#0FFH
09FF 7A00        R     MOV     R2,#HIGH ?SC_526
0A01 7900        R     MOV     R1,#LOW ?SC_526
0A03 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0A06 120000      E     LCALL   ?C?PSTXDATA
0A09 D001              POP     AR1
0A0B D002              POP     AR2
0A0D D003              POP     AR3
0A0F 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 545
0A12 750000      R     MOV     i,#00H
0A15 750000      R     MOV     i+01H,#00H
0A18         ?C0107:
0A18 C3                CLR     C
0A19 E500        R     MOV     A,i+01H
0A1B 9403              SUBB    A,#03H
0A1D E500        R     MOV     A,i
0A1F 6480              XRL     A,#080H
0A21 9480              SUBB    A,#080H
0A23 4003              JC      $ + 5H
0A25 020000      R     LJMP    ?C0108
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 548
0A28 7B01              MOV     R3,#01H
0A2A 7A00        R     MOV     R2,#HIGH str
0A2C 7900        R     MOV     R1,#LOW str
0A2E C003              PUSH    AR3
0A30 C002              PUSH    AR2
0A32 C001              PUSH    AR1
0A34 7BFF              MOV     R3,#0FFH
0A36 7A00        R     MOV     R2,#HIGH ?SC_206
0A38 7900        R     MOV     R1,#LOW ?SC_206
0A3A 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0A3D 120000      E     LCALL   ?C?PSTXDATA
0A40 E500        R     MOV     A,i+01H
0A42 2401              ADD     A,#01H
0A44 FF                MOV     R7,A
0A45 E500        R     MOV     A,i
0A47 3400              ADDC    A,#00H
0A49 FE                MOV     R6,A
0A4A 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0A4D EE                MOV     A,R6
0A4E F0                MOVX    @DPTR,A
0A4F A3                INC     DPTR
0A50 EF                MOV     A,R7
0A51 F0                MOVX    @DPTR,A
0A52 AE00        R     MOV     R6,i
0A54 AF00        R     MOV     R7,i+01H
0A56 7400        E     MOV     A,#LOW c_mem+01FH
0A58 2F                ADD     A,R7
0A59 F582              MOV     DPL,A
0A5B 7400        E     MOV     A,#HIGH c_mem+01FH
0A5D 3E                ADDC    A,R6
0A5E F583              MOV     DPH,A
0A60 E0                MOVX    A,@DPTR
0A61 FF                MOV     R7,A
0A62 7E00              MOV     R6,#00H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 64  

0A64 900000      E     MOV     DPTR,#?_sprintf?BYTE+08H
0A67 EE                MOV     A,R6
0A68 F0                MOVX    @DPTR,A
0A69 A3                INC     DPTR
0A6A EF                MOV     A,R7
0A6B F0                MOVX    @DPTR,A
0A6C D001              POP     AR1
0A6E D002              POP     AR2
0A70 D003              POP     AR3
0A72 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 549
0A75 900000      R     MOV     DPTR,#info_string
0A78 120000      E     LCALL   ?C?PLDXDATA
0A7B C003              PUSH    AR3
0A7D C002              PUSH    AR2
0A7F C001              PUSH    AR1
0A81 7B01              MOV     R3,#01H
0A83 7A00        R     MOV     R2,#HIGH str
0A85 7900        R     MOV     R1,#LOW str
0A87 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0A8A 120000      E     LCALL   ?C?PSTXDATA
0A8D D001              POP     AR1
0A8F D002              POP     AR2
0A91 D003              POP     AR3
0A93 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 550
0A96 900000      R     MOV     DPTR,#info_string
0A99 120000      E     LCALL   ?C?PLDXDATA
0A9C C003              PUSH    AR3
0A9E C002              PUSH    AR2
0AA0 C001              PUSH    AR1
0AA2 7BFF              MOV     R3,#0FFH
0AA4 7A00        R     MOV     R2,#HIGH ?SC_1
0AA6 7900        R     MOV     R1,#LOW ?SC_1
0AA8 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0AAB 120000      E     LCALL   ?C?PSTXDATA
0AAE D001              POP     AR1
0AB0 D002              POP     AR2
0AB2 D003              POP     AR3
0AB4 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 551
0AB7 0500        R     INC     i+01H
0AB9 E500        R     MOV     A,i+01H
0ABB 7002              JNZ     ?C0204
0ABD 0500        R     INC     i
0ABF         ?C0204:
0ABF 020000      R     LJMP    ?C0107
0AC2         ?C0108:
                                           ; SOURCE LINE # 554
0AC2 900000      R     MOV     DPTR,#info_string
0AC5 120000      E     LCALL   ?C?PLDXDATA
0AC8 C003              PUSH    AR3
0ACA C002              PUSH    AR2
0ACC C001              PUSH    AR1
0ACE 7BFF              MOV     R3,#0FFH
0AD0 7A00        R     MOV     R2,#HIGH ?SC_547
0AD2 7900        R     MOV     R1,#LOW ?SC_547
0AD4 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0AD7 120000      E     LCALL   ?C?PSTXDATA
0ADA D001              POP     AR1
0ADC D002              POP     AR2
0ADE D003              POP     AR3
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 65  

0AE0 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 555
0AE3 750000      R     MOV     i,#00H
0AE6 750000      R     MOV     i+01H,#00H
0AE9         ?C0110:
0AE9 C3                CLR     C
0AEA E500        R     MOV     A,i+01H
0AEC 9403              SUBB    A,#03H
0AEE E500        R     MOV     A,i
0AF0 6480              XRL     A,#080H
0AF2 9480              SUBB    A,#080H
0AF4 4003              JC      $ + 5H
0AF6 020000      R     LJMP    ?C0111
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 558
0AF9 7B01              MOV     R3,#01H
0AFB 7A00        R     MOV     R2,#HIGH str
0AFD 7900        R     MOV     R1,#LOW str
0AFF C003              PUSH    AR3
0B01 C002              PUSH    AR2
0B03 C001              PUSH    AR1
0B05 7BFF              MOV     R3,#0FFH
0B07 7A00        R     MOV     R2,#HIGH ?SC_569
0B09 7900        R     MOV     R1,#LOW ?SC_569
0B0B 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0B0E 120000      E     LCALL   ?C?PSTXDATA
0B11 E500        R     MOV     A,i+01H
0B13 2401              ADD     A,#01H
0B15 FF                MOV     R7,A
0B16 E500        R     MOV     A,i
0B18 3400              ADDC    A,#00H
0B1A FE                MOV     R6,A
0B1B 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0B1E EE                MOV     A,R6
0B1F F0                MOVX    @DPTR,A
0B20 A3                INC     DPTR
0B21 EF                MOV     A,R7
0B22 F0                MOVX    @DPTR,A
0B23 E500        R     MOV     A,i+01H
0B25 AE00        R     MOV     R6,i
0B27 7802              MOV     R0,#02H
0B29         ?C0205:
0B29 C3                CLR     C
0B2A 33                RLC     A
0B2B CE                XCH     A,R6
0B2C 33                RLC     A
0B2D CE                XCH     A,R6
0B2E D8F9              DJNZ    R0,?C0205
0B30 FF                MOV     R7,A
0B31 7400        E     MOV     A,#LOW c_mem+022H
0B33 2F                ADD     A,R7
0B34 F582              MOV     DPL,A
0B36 7400        E     MOV     A,#HIGH c_mem+022H
0B38 3E                ADDC    A,R6
0B39 F583              MOV     DPH,A
0B3B 120000      E     LCALL   ?C?LLDXDATA
0B3E AA00        R     MOV     R2,i
0B40 AB00        R     MOV     R3,i+01H
0B42 7400        E     MOV     A,#LOW c_mem+01FH
0B44 2B                ADD     A,R3
0B45 F582              MOV     DPL,A
0B47 7400        E     MOV     A,#HIGH c_mem+01FH
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 66  

0B49 3A                ADDC    A,R2
0B4A F583              MOV     DPH,A
0B4C E0                MOVX    A,@DPTR
0B4D F9                MOV     R1,A
0B4E A801              MOV     R0,AR1
0B50 120000      E     LCALL   ?C?SLSHR
0B53 900000      E     MOV     DPTR,#?_sprintf?BYTE+08H
0B56 120000      E     LCALL   ?C?LSTXDATA
0B59 D001              POP     AR1
0B5B D002              POP     AR2
0B5D D003              POP     AR3
0B5F 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 559
0B62 900000      R     MOV     DPTR,#info_string
0B65 120000      E     LCALL   ?C?PLDXDATA
0B68 C003              PUSH    AR3
0B6A C002              PUSH    AR2
0B6C C001              PUSH    AR1
0B6E 7B01              MOV     R3,#01H
0B70 7A00        R     MOV     R2,#HIGH str
0B72 7900        R     MOV     R1,#LOW str
0B74 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0B77 120000      E     LCALL   ?C?PSTXDATA
0B7A D001              POP     AR1
0B7C D002              POP     AR2
0B7E D003              POP     AR3
0B80 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 560
0B83 900000      R     MOV     DPTR,#info_string
0B86 120000      E     LCALL   ?C?PLDXDATA
0B89 C003              PUSH    AR3
0B8B C002              PUSH    AR2
0B8D C001              PUSH    AR1
0B8F 7BFF              MOV     R3,#0FFH
0B91 7A00        R     MOV     R2,#HIGH ?SC_1
0B93 7900        R     MOV     R1,#LOW ?SC_1
0B95 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0B98 120000      E     LCALL   ?C?PSTXDATA
0B9B D001              POP     AR1
0B9D D002              POP     AR2
0B9F D003              POP     AR3
0BA1 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 561
0BA4 0500        R     INC     i+01H
0BA6 E500        R     MOV     A,i+01H
0BA8 7002              JNZ     ?C0206
0BAA 0500        R     INC     i
0BAC         ?C0206:
0BAC 020000      R     LJMP    ?C0110
0BAF         ?C0111:
                                           ; SOURCE LINE # 563
0BAF 900000      R     MOV     DPTR,#info_string
0BB2 120000      E     LCALL   ?C?PLDXDATA
0BB5 C003              PUSH    AR3
0BB7 C002              PUSH    AR2
0BB9 C001              PUSH    AR1
0BBB 7BFF              MOV     R3,#0FFH
0BBD 7A00        R     MOV     R2,#HIGH ?SC_579
0BBF 7900        R     MOV     R1,#LOW ?SC_579
0BC1 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0BC4 120000      E     LCALL   ?C?PSTXDATA
0BC7 D001              POP     AR1
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 67  

0BC9 D002              POP     AR2
0BCB D003              POP     AR3
0BCD 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 564
0BD0 750000      R     MOV     i,#00H
0BD3 750000      R     MOV     i+01H,#00H
0BD6         ?C0113:
0BD6 C3                CLR     C
0BD7 E500        R     MOV     A,i+01H
0BD9 9403              SUBB    A,#03H
0BDB E500        R     MOV     A,i
0BDD 6480              XRL     A,#080H
0BDF 9480              SUBB    A,#080H
0BE1 4003              JC      $ + 5H
0BE3 020000      R     LJMP    ?C0114
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 567
0BE6 7B01              MOV     R3,#01H
0BE8 7A00        R     MOV     R2,#HIGH str
0BEA 7900        R     MOV     R1,#LOW str
0BEC C003              PUSH    AR3
0BEE C002              PUSH    AR2
0BF0 C001              PUSH    AR1
0BF2 7BFF              MOV     R3,#0FFH
0BF4 7A00        R     MOV     R2,#HIGH ?SC_605
0BF6 7900        R     MOV     R1,#LOW ?SC_605
0BF8 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0BFB 120000      E     LCALL   ?C?PSTXDATA
0BFE E500        R     MOV     A,i+01H
0C00 2401              ADD     A,#01H
0C02 FF                MOV     R7,A
0C03 E500        R     MOV     A,i
0C05 3400              ADDC    A,#00H
0C07 FE                MOV     R6,A
0C08 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0C0B EE                MOV     A,R6
0C0C F0                MOVX    @DPTR,A
0C0D A3                INC     DPTR
0C0E EF                MOV     A,R7
0C0F F0                MOVX    @DPTR,A
0C10 E500        R     MOV     A,i+01H
0C12 AE00        R     MOV     R6,i
0C14 7802              MOV     R0,#02H
0C16         ?C0207:
0C16 C3                CLR     C
0C17 33                RLC     A
0C18 CE                XCH     A,R6
0C19 33                RLC     A
0C1A CE                XCH     A,R6
0C1B D8F9              DJNZ    R0,?C0207
0C1D FF                MOV     R7,A
0C1E 7400        E     MOV     A,#LOW c_mem+02EH
0C20 2F                ADD     A,R7
0C21 F582              MOV     DPL,A
0C23 7400        E     MOV     A,#HIGH c_mem+02EH
0C25 3E                ADDC    A,R6
0C26 F583              MOV     DPH,A
0C28 120000      E     LCALL   ?C?LLDXDATA
0C2B 900000      E     MOV     DPTR,#?_sprintf?BYTE+08H
0C2E 120000      E     LCALL   ?C?LSTXDATA
0C31 D001              POP     AR1
0C33 D002              POP     AR2
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 68  

0C35 D003              POP     AR3
0C37 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 568
0C3A 900000      R     MOV     DPTR,#info_string
0C3D 120000      E     LCALL   ?C?PLDXDATA
0C40 C003              PUSH    AR3
0C42 C002              PUSH    AR2
0C44 C001              PUSH    AR1
0C46 7B01              MOV     R3,#01H
0C48 7A00        R     MOV     R2,#HIGH str
0C4A 7900        R     MOV     R1,#LOW str
0C4C 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0C4F 120000      E     LCALL   ?C?PSTXDATA
0C52 D001              POP     AR1
0C54 D002              POP     AR2
0C56 D003              POP     AR3
0C58 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 569
0C5B 900000      R     MOV     DPTR,#info_string
0C5E 120000      E     LCALL   ?C?PLDXDATA
0C61 C003              PUSH    AR3
0C63 C002              PUSH    AR2
0C65 C001              PUSH    AR1
0C67 7BFF              MOV     R3,#0FFH
0C69 7A00        R     MOV     R2,#HIGH ?SC_1
0C6B 7900        R     MOV     R1,#LOW ?SC_1
0C6D 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0C70 120000      E     LCALL   ?C?PSTXDATA
0C73 D001              POP     AR1
0C75 D002              POP     AR2
0C77 D003              POP     AR3
0C79 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 570
0C7C 0500        R     INC     i+01H
0C7E E500        R     MOV     A,i+01H
0C80 7002              JNZ     ?C0208
0C82 0500        R     INC     i
0C84         ?C0208:
0C84 020000      R     LJMP    ?C0113
0C87         ?C0114:
                                           ; SOURCE LINE # 572
0C87 7B01              MOV     R3,#01H
0C89 7A00        R     MOV     R2,#HIGH str
0C8B 7900        R     MOV     R1,#LOW str
0C8D C003              PUSH    AR3
0C8F C002              PUSH    AR2
0C91 C001              PUSH    AR1
0C93 7BFF              MOV     R3,#0FFH
0C95 7A00        R     MOV     R2,#HIGH ?SC_614
0C97 7900        R     MOV     R1,#LOW ?SC_614
0C99 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0C9C 120000      E     LCALL   ?C?PSTXDATA
0C9F 900000      E     MOV     DPTR,#g_mem+03AH
0CA2 E0                MOVX    A,@DPTR
0CA3 FF                MOV     R7,A
0CA4 7E00              MOV     R6,#00H
0CA6 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0CA9 EE                MOV     A,R6
0CAA F0                MOVX    @DPTR,A
0CAB A3                INC     DPTR
0CAC EF                MOV     A,R7
0CAD F0                MOVX    @DPTR,A
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 69  

0CAE D001              POP     AR1
0CB0 D002              POP     AR2
0CB2 D003              POP     AR3
0CB4 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 573
0CB7 900000      R     MOV     DPTR,#info_string
0CBA 120000      E     LCALL   ?C?PLDXDATA
0CBD C003              PUSH    AR3
0CBF C002              PUSH    AR2
0CC1 C001              PUSH    AR1
0CC3 7B01              MOV     R3,#01H
0CC5 7A00        R     MOV     R2,#HIGH str
0CC7 7900        R     MOV     R1,#LOW str
0CC9 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0CCC 120000      E     LCALL   ?C?PSTXDATA
0CCF D001              POP     AR1
0CD1 D002              POP     AR2
0CD3 D003              POP     AR3
0CD5 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 574
0CD8 900000      R     MOV     DPTR,#info_string
0CDB 120000      E     LCALL   ?C?PLDXDATA
0CDE C003              PUSH    AR3
0CE0 C002              PUSH    AR2
0CE2 C001              PUSH    AR1
0CE4 7BFF              MOV     R3,#0FFH
0CE6 7A00        R     MOV     R2,#HIGH ?SC_1
0CE8 7900        R     MOV     R1,#LOW ?SC_1
0CEA 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0CED 120000      E     LCALL   ?C?PSTXDATA
0CF0 D001              POP     AR1
0CF2 D002              POP     AR2
0CF4 D003              POP     AR3
0CF6 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 576
0CF9 750000      R     MOV     i,#00H
0CFC 750000      R     MOV     i+01H,#00H
0CFF         ?C0116:
0CFF C3                CLR     C
0D00 E500        R     MOV     A,i+01H
0D02 9402              SUBB    A,#02H
0D04 E500        R     MOV     A,i
0D06 6480              XRL     A,#080H
0D08 9480              SUBB    A,#080H
0D0A 4003              JC      $ + 5H
0D0C 020000      R     LJMP    ?C0117
                                           ; SOURCE LINE # 578
0D0F 7B01              MOV     R3,#01H
0D11 7A00        R     MOV     R2,#HIGH str
0D13 7900        R     MOV     R1,#LOW str
0D15 C003              PUSH    AR3
0D17 C002              PUSH    AR2
0D19 C001              PUSH    AR1
0D1B 7BFF              MOV     R3,#0FFH
0D1D 7A00        R     MOV     R2,#HIGH ?SC_640
0D1F 7900        R     MOV     R1,#LOW ?SC_640
0D21 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0D24 120000      E     LCALL   ?C?PSTXDATA
0D27 E500        R     MOV     A,i+01H
0D29 2401              ADD     A,#01H
0D2B FF                MOV     R7,A
0D2C E500        R     MOV     A,i
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 70  

0D2E 3400              ADDC    A,#00H
0D30 FE                MOV     R6,A
0D31 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0D34 EE                MOV     A,R6
0D35 F0                MOVX    @DPTR,A
0D36 A3                INC     DPTR
0D37 EF                MOV     A,R7
0D38 F0                MOVX    @DPTR,A
0D39 E500        R     MOV     A,i+01H
0D3B AE00        R     MOV     R6,i
0D3D 7802              MOV     R0,#02H
0D3F         ?C0209:
0D3F C3                CLR     C
0D40 33                RLC     A
0D41 CE                XCH     A,R6
0D42 33                RLC     A
0D43 CE                XCH     A,R6
0D44 D8F9              DJNZ    R0,?C0209
0D46 FF                MOV     R7,A
0D47 7400        E     MOV     A,#LOW g_mem+03BH
0D49 2F                ADD     A,R7
0D4A F582              MOV     DPL,A
0D4C 7400        E     MOV     A,#HIGH g_mem+03BH
0D4E 3E                ADDC    A,R6
0D4F F583              MOV     DPH,A
0D51 120000      E     LCALL   ?C?LLDXDATA
0D54 AA00        R     MOV     R2,i
0D56 AB00        R     MOV     R3,i+01H
0D58 7400        E     MOV     A,#LOW g_mem+01FH
0D5A 2B                ADD     A,R3
0D5B F582              MOV     DPL,A
0D5D 7400        E     MOV     A,#HIGH g_mem+01FH
0D5F 3A                ADDC    A,R2
0D60 F583              MOV     DPH,A
0D62 E0                MOVX    A,@DPTR
0D63 F9                MOV     R1,A
0D64 A801              MOV     R0,AR1
0D66 120000      E     LCALL   ?C?SLSHR
0D69 900000      E     MOV     DPTR,#?_sprintf?BYTE+08H
0D6C 120000      E     LCALL   ?C?LSTXDATA
0D6F D001              POP     AR1
0D71 D002              POP     AR2
0D73 D003              POP     AR3
0D75 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 579
0D78 900000      R     MOV     DPTR,#info_string
0D7B 120000      E     LCALL   ?C?PLDXDATA
0D7E C003              PUSH    AR3
0D80 C002              PUSH    AR2
0D82 C001              PUSH    AR1
0D84 7B01              MOV     R3,#01H
0D86 7A00        R     MOV     R2,#HIGH str
0D88 7900        R     MOV     R1,#LOW str
0D8A 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0D8D 120000      E     LCALL   ?C?PSTXDATA
0D90 D001              POP     AR1
0D92 D002              POP     AR2
0D94 D003              POP     AR3
0D96 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 582
0D99 7B01              MOV     R3,#01H
0D9B 7A00        R     MOV     R2,#HIGH str
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 71  

0D9D 7900        R     MOV     R1,#LOW str
0D9F C003              PUSH    AR3
0DA1 C002              PUSH    AR2
0DA3 C001              PUSH    AR1
0DA5 7BFF              MOV     R3,#0FFH
0DA7 7A00        R     MOV     R2,#HIGH ?SC_678
0DA9 7900        R     MOV     R1,#LOW ?SC_678
0DAB 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0DAE 120000      E     LCALL   ?C?PSTXDATA
0DB1 E500        R     MOV     A,i+01H
0DB3 AE00        R     MOV     R6,i
0DB5 7802              MOV     R0,#02H
0DB7         ?C0210:
0DB7 C3                CLR     C
0DB8 33                RLC     A
0DB9 CE                XCH     A,R6
0DBA 33                RLC     A
0DBB CE                XCH     A,R6
0DBC D8F9              DJNZ    R0,?C0210
0DBE FF                MOV     R7,A
0DBF 7400        E     MOV     A,#LOW g_mem+043H
0DC1 2F                ADD     A,R7
0DC2 F582              MOV     DPL,A
0DC4 7400        E     MOV     A,#HIGH g_mem+043H
0DC6 3E                ADDC    A,R6
0DC7 F583              MOV     DPH,A
0DC9 120000      E     LCALL   ?C?LLDXDATA
0DCC AA00        R     MOV     R2,i
0DCE AB00        R     MOV     R3,i+01H
0DD0 7400        E     MOV     A,#LOW g_mem+01FH
0DD2 2B                ADD     A,R3
0DD3 F582              MOV     DPL,A
0DD5 7400        E     MOV     A,#HIGH g_mem+01FH
0DD7 3A                ADDC    A,R2
0DD8 F583              MOV     DPH,A
0DDA E0                MOVX    A,@DPTR
0DDB F9                MOV     R1,A
0DDC A801              MOV     R0,AR1
0DDE 120000      E     LCALL   ?C?SLSHR
0DE1 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0DE4 120000      E     LCALL   ?C?LSTXDATA
0DE7 D001              POP     AR1
0DE9 D002              POP     AR2
0DEB D003              POP     AR3
0DED 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 583
0DF0 900000      R     MOV     DPTR,#info_string
0DF3 120000      E     LCALL   ?C?PLDXDATA
0DF6 C003              PUSH    AR3
0DF8 C002              PUSH    AR2
0DFA C001              PUSH    AR1
0DFC 7B01              MOV     R3,#01H
0DFE 7A00        R     MOV     R2,#HIGH str
0E00 7900        R     MOV     R1,#LOW str
0E02 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0E05 120000      E     LCALL   ?C?PSTXDATA
0E08 D001              POP     AR1
0E0A D002              POP     AR2
0E0C D003              POP     AR3
0E0E 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 584
0E11 0500        R     INC     i+01H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 72  

0E13 E500        R     MOV     A,i+01H
0E15 7002              JNZ     ?C0211
0E17 0500        R     INC     i
0E19         ?C0211:
0E19 020000      R     LJMP    ?C0116
0E1C         ?C0117:
                                           ; SOURCE LINE # 586
0E1C 7B01              MOV     R3,#01H
0E1E 7A00        R     MOV     R2,#HIGH str
0E20 7900        R     MOV     R1,#LOW str
0E22 C003              PUSH    AR3
0E24 C002              PUSH    AR2
0E26 C001              PUSH    AR1
0E28 7BFF              MOV     R3,#0FFH
0E2A 7A00        R     MOV     R2,#HIGH ?SC_691
0E2C 7900        R     MOV     R1,#LOW ?SC_691
0E2E 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0E31 120000      E     LCALL   ?C?PSTXDATA
0E34 900000      E     MOV     DPTR,#g_mem+04BH
0E37 E0                MOVX    A,@DPTR
0E38 FE                MOV     R6,A
0E39 A3                INC     DPTR
0E3A E0                MOVX    A,@DPTR
0E3B FF                MOV     R7,A
0E3C 900000      E     MOV     DPTR,#g_mem+01FH
0E3F E0                MOVX    A,@DPTR
0E40 FD                MOV     R5,A
0E41 EF                MOV     A,R7
0E42 A805              MOV     R0,AR5
0E44 08                INC     R0
0E45 8006              SJMP    ?C0213
0E47         ?C0212:
0E47 CE                XCH     A,R6
0E48 A2E7              MOV     C,ACC.7
0E4A 13                RRC     A
0E4B CE                XCH     A,R6
0E4C 13                RRC     A
0E4D         ?C0213:
0E4D D8F8              DJNZ    R0,?C0212
0E4F FF                MOV     R7,A
0E50 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0E53 EE                MOV     A,R6
0E54 F0                MOVX    @DPTR,A
0E55 A3                INC     DPTR
0E56 EF                MOV     A,R7
0E57 F0                MOVX    @DPTR,A
0E58 D001              POP     AR1
0E5A D002              POP     AR2
0E5C D003              POP     AR3
0E5E 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 587
0E61 900000      R     MOV     DPTR,#info_string
0E64 120000      E     LCALL   ?C?PLDXDATA
0E67 C003              PUSH    AR3
0E69 C002              PUSH    AR2
0E6B C001              PUSH    AR1
0E6D 7B01              MOV     R3,#01H
0E6F 7A00        R     MOV     R2,#HIGH str
0E71 7900        R     MOV     R1,#LOW str
0E73 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0E76 120000      E     LCALL   ?C?PSTXDATA
0E79 D001              POP     AR1
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 73  

0E7B D002              POP     AR2
0E7D D003              POP     AR3
0E7F 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 588
0E82 900000      R     MOV     DPTR,#info_string
0E85 120000      E     LCALL   ?C?PLDXDATA
0E88 C003              PUSH    AR3
0E8A C002              PUSH    AR2
0E8C C001              PUSH    AR1
0E8E 7BFF              MOV     R3,#0FFH
0E90 7A00        R     MOV     R2,#HIGH ?SC_1
0E92 7900        R     MOV     R1,#LOW ?SC_1
0E94 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0E97 120000      E     LCALL   ?C?PSTXDATA
0E9A D001              POP     AR1
0E9C D002              POP     AR2
0E9E D003              POP     AR3
0EA0 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 590
0EA3 7B01              MOV     R3,#01H
0EA5 7A00        R     MOV     R2,#HIGH str
0EA7 7900        R     MOV     R1,#LOW str
0EA9 C003              PUSH    AR3
0EAB C002              PUSH    AR2
0EAD C001              PUSH    AR1
0EAF 7BFF              MOV     R3,#0FFH
0EB1 7A00        R     MOV     R2,#HIGH ?SC_709
0EB3 7900        R     MOV     R1,#LOW ?SC_709
0EB5 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0EB8 120000      E     LCALL   ?C?PSTXDATA
0EBB 900000      E     MOV     DPTR,#g_mem+01AH
0EBE E0                MOVX    A,@DPTR
0EBF FE                MOV     R6,A
0EC0 A3                INC     DPTR
0EC1 E0                MOVX    A,@DPTR
0EC2 FF                MOV     R7,A
0EC3 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0EC6 EE                MOV     A,R6
0EC7 F0                MOVX    @DPTR,A
0EC8 A3                INC     DPTR
0EC9 EF                MOV     A,R7
0ECA F0                MOVX    @DPTR,A
0ECB D001              POP     AR1
0ECD D002              POP     AR2
0ECF D003              POP     AR3
0ED1 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 591
0ED4 900000      R     MOV     DPTR,#info_string
0ED7 120000      E     LCALL   ?C?PLDXDATA
0EDA C003              PUSH    AR3
0EDC C002              PUSH    AR2
0EDE C001              PUSH    AR1
0EE0 7B01              MOV     R3,#01H
0EE2 7A00        R     MOV     R2,#HIGH str
0EE4 7900        R     MOV     R1,#LOW str
0EE6 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0EE9 120000      E     LCALL   ?C?PSTXDATA
0EEC D001              POP     AR1
0EEE D002              POP     AR2
0EF0 D003              POP     AR3
0EF2 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 592
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 74  

0EF5 900000      R     MOV     DPTR,#info_string
0EF8 120000      E     LCALL   ?C?PLDXDATA
0EFB C003              PUSH    AR3
0EFD C002              PUSH    AR2
0EFF C001              PUSH    AR1
0F01 7BFF              MOV     R3,#0FFH
0F03 7A00        R     MOV     R2,#HIGH ?SC_1
0F05 7900        R     MOV     R1,#LOW ?SC_1
0F07 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0F0A 120000      E     LCALL   ?C?PSTXDATA
0F0D D001              POP     AR1
0F0F D002              POP     AR2
0F11 D003              POP     AR3
0F13 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 594
0F16 7B01              MOV     R3,#01H
0F18 7A00        R     MOV     R2,#HIGH str
0F1A 7900        R     MOV     R1,#LOW str
0F1C C003              PUSH    AR3
0F1E C002              PUSH    AR2
0F20 C001              PUSH    AR1
0F22 7BFF              MOV     R3,#0FFH
0F24 7A00        R     MOV     R2,#HIGH ?SC_727
0F26 7900        R     MOV     R1,#LOW ?SC_727
0F28 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0F2B 120000      E     LCALL   ?C?PSTXDATA
0F2E 900000      E     MOV     DPTR,#timer_value
0F31 120000      E     LCALL   ?C?LLDXDATA0
0F34 900000      E     MOV     DPTR,#timer_value0
0F37 120000      E     LCALL   ?C?LLDXDATA
0F3A 120000      E     LCALL   ?C?LSUB
0F3D 900000      E     MOV     DPTR,#?_sprintf?BYTE+06H
0F40 120000      E     LCALL   ?C?LSTXDATA
0F43 D001              POP     AR1
0F45 D002              POP     AR2
0F47 D003              POP     AR3
0F49 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 595
0F4C 900000      R     MOV     DPTR,#info_string
0F4F 120000      E     LCALL   ?C?PLDXDATA
0F52 C003              PUSH    AR3
0F54 C002              PUSH    AR2
0F56 C001              PUSH    AR1
0F58 7B01              MOV     R3,#01H
0F5A 7A00        R     MOV     R2,#HIGH str
0F5C 7900        R     MOV     R1,#LOW str
0F5E 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
0F61 120000      E     LCALL   ?C?PSTXDATA
0F64 D001              POP     AR1
0F66 D002              POP     AR2
0F68 D003              POP     AR3
0F6A 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 596
0F6D 900000      R     MOV     DPTR,#info_string
0F70 120000      E     LCALL   ?C?PLDXDATA
0F73 C003              PUSH    AR3
0F75 C002              PUSH    AR2
0F77 C001              PUSH    AR1
0F79 7BFF              MOV     R3,#0FFH
0F7B 7A00        R     MOV     R2,#HIGH ?SC_1
0F7D 7900        R     MOV     R1,#LOW ?SC_1
0F7F 900000      E     MOV     DPTR,#?_strcat?BYTE+03H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 75  

0F82 120000      E     LCALL   ?C?PSTXDATA
0F85 D001              POP     AR1
0F87 D002              POP     AR2
0F89 D003              POP     AR3
0F8B 120000      E     LCALL   _strcat
                                           ; SOURCE LINE # 597
0F8E 22                RET     
             ; FUNCTION _infoPrepare (END)

             ; FUNCTION _commWrite (BEGIN)
                                           ; SOURCE LINE # 603
0000 900000      R     MOV     DPTR,#packet_data
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#packet_lenght
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 608
000B 7F3A              MOV     R7,#03AH
000D 120000      E     LCALL   _UART_RS485_PutChar
                                           ; SOURCE LINE # 609
0010 7F3A              MOV     R7,#03AH
0012 120000      E     LCALL   _UART_RS485_PutChar
                                           ; SOURCE LINE # 612
0015 900000      E     MOV     DPTR,#g_mem+01H
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _UART_RS485_PutChar
                                           ; SOURCE LINE # 615
001D 900000      R     MOV     DPTR,#packet_lenght
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 120000      E     LCALL   _UART_RS485_PutChar
                                           ; SOURCE LINE # 618
0025 750000      R     MOV     index,#00H
0028 750000      R     MOV     index+01H,#00H
002B         ?C0120:
002B 900000      R     MOV     DPTR,#packet_lenght
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7E00              MOV     R6,#00H
0032 C3                CLR     C
0033 E500        R     MOV     A,index+01H
0035 9F                SUBB    A,R7
0036 E500        R     MOV     A,index
0038 9E                SUBB    A,R6
0039 5021              JNC     ?C0121
                                           ; SOURCE LINE # 619
003B 900000      R     MOV     DPTR,#packet_data
003E 120000      E     LCALL   ?C?PLDXDATA
0041 AE00        R     MOV     R6,index
0043 AF00        R     MOV     R7,index+01H
0045 E9                MOV     A,R1
0046 2F                ADD     A,R7
0047 F9                MOV     R1,A
0048 EA                MOV     A,R2
0049 3E                ADDC    A,R6
004A FA                MOV     R2,A
004B 120000      E     LCALL   ?C?CLDPTR
004E FF                MOV     R7,A
004F 120000      E     LCALL   _UART_RS485_PutChar
0052 0500        R     INC     index+01H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 76  

0054 E500        R     MOV     A,index+01H
0056 7002              JNZ     ?C0214
0058 0500        R     INC     index
005A         ?C0214:
005A 80CF              SJMP    ?C0120
005C         ?C0121:
                                           ; SOURCE LINE # 621
005C 750000      R     MOV     index,#00H
005F 750000      R     MOV     index+01H,#00H
0062         ?C0123:
                                           ; SOURCE LINE # 623
0062 120000      E     LCALL   UART_RS485_ReadTxStatus
0065 EF                MOV     A,R7
0066 20E015            JB      ACC.0,?C0124
0069 0500        R     INC     index+01H
006B E500        R     MOV     A,index+01H
006D AE00        R     MOV     R6,index
006F 7002              JNZ     ?C0215
0071 0500        R     INC     index
0073         ?C0215:
0073 14                DEC     A
0074 FF                MOV     R7,A
0075 D3                SETB    C
0076 EF                MOV     A,R7
0077 94E8              SUBB    A,#0E8H
0079 EE                MOV     A,R6
007A 9403              SUBB    A,#03H
007C 40E4              JC      ?C0123
007E         ?C0124:
                                           ; SOURCE LINE # 625
007E 7F01              MOV     R7,#01H
0080 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 626
0083 7F00              MOV     R7,#00H
0085 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 627
0088 22                RET     
             ; FUNCTION _commWrite (END)

             ; FUNCTION _sendAcknowledgment (BEGIN)
                                           ; SOURCE LINE # 633
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
0005 900000      R     MOV     DPTR,#value
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 8F00        R     MOV     packet_data,R7
                                           ; SOURCE LINE # 643
000C 900000      R     MOV     DPTR,#value
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 8F00        R     MOV     packet_data+01H,R7
                                           ; SOURCE LINE # 645
0013 7B00              MOV     R3,#00H
0015 7A00        R     MOV     R2,#HIGH packet_data
0017 7900        R     MOV     R1,#LOW packet_data
0019 7D02              MOV     R5,#02H
001B 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 646
001E 22                RET     
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 77  

             ; FUNCTION _sendAcknowledgment (END)

             ; FUNCTION _memStore (BEGIN)
                                           ; SOURCE LINE # 656
0000 900000      R     MOV     DPTR,#displacement
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
0008 900000      R     MOV     DPTR,#ret_val
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 663
000E 7F00              MOV     R7,#00H
0010 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
                                           ; SOURCE LINE # 664
0013 7F00              MOV     R7,#00H
0015 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
                                           ; SOURCE LINE # 667
0018 120000      E     LCALL   EEPROM_UpdateTemperature
                                           ; SOURCE LINE # 669
001B 7B01              MOV     R3,#01H
001D 7A00        E     MOV     R2,#HIGH g_mem
001F 7900        E     MOV     R1,#LOW g_mem
0021 C003              PUSH    AR3
0023 C002              PUSH    AR2
0025 C001              PUSH    AR1
0027 7B01              MOV     R3,#01H
0029 7A00        E     MOV     R2,#HIGH c_mem
002B 7900        E     MOV     R1,#LOW c_mem
002D A801              MOV     R0,AR1
002F AC02              MOV     R4,AR2
0031 AD03              MOV     R5,AR3
0033 D001              POP     AR1
0035 D002              POP     AR2
0037 D003              POP     AR3
0039 7E00              MOV     R6,#00H
003B 7F4F              MOV     R7,#04FH
003D 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 671
0040 900000      R     MOV     DPTR,#pages
0043 E4                CLR     A
0044 F0                MOVX    @DPTR,A
0045 A3                INC     DPTR
0046 7405              MOV     A,#05H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 673
0049 900000      R     MOV     DPTR,#i
004C E4                CLR     A
004D F0                MOVX    @DPTR,A
004E A3                INC     DPTR
004F E4                CLR     A
0050 F0                MOVX    @DPTR,A
0051         ?C0127:
0051 900000      R     MOV     DPTR,#pages
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 78  

0059 900000      R     MOV     DPTR,#i
005C E0                MOVX    A,@DPTR
005D FC                MOV     R4,A
005E A3                INC     DPTR
005F E0                MOVX    A,@DPTR
0060 FD                MOV     R5,A
0061 C3                CLR     C
0062 ED                MOV     A,R5
0063 9F                SUBB    A,R7
0064 EE                MOV     A,R6
0065 6480              XRL     A,#080H
0067 F8                MOV     R0,A
0068 EC                MOV     A,R4
0069 6480              XRL     A,#080H
006B 98                SUBB    A,R0
006C 505A              JNC     ?C0128
                                           ; SOURCE LINE # 674
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 FE                MOV     R6,A
0073 A3                INC     DPTR
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 C4                SWAP    A
0078 F8                MOV     R0,A
0079 540F              ANL     A,#0FH
007B C8                XCH     A,R0
007C 68                XRL     A,R0
007D FF                MOV     R7,A
007E EE                MOV     A,R6
007F C4                SWAP    A
0080 54F0              ANL     A,#0F0H
0082 48                ORL     A,R0
0083 FE                MOV     R6,A
0084 7B01              MOV     R3,#01H
0086 7A00        E     MOV     R2,#HIGH g_mem
0088 7900        E     MOV     R1,#LOW g_mem
008A E9                MOV     A,R1
008B 2F                ADD     A,R7
008C F9                MOV     R1,A
008D EA                MOV     A,R2
008E 3E                ADDC    A,R6
008F FA                MOV     R2,A
0090 900000      R     MOV     DPTR,#displacement
0093 E0                MOVX    A,@DPTR
0094 FE                MOV     R6,A
0095 A3                INC     DPTR
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
0098 900000      R     MOV     DPTR,#i
009B E0                MOVX    A,@DPTR
009C FC                MOV     R4,A
009D A3                INC     DPTR
009E E0                MOVX    A,@DPTR
009F FD                MOV     R5,A
00A0 AE05              MOV     R6,AR5
00A2 EE                MOV     A,R6
00A3 2F                ADD     A,R7
00A4 FD                MOV     R5,A
00A5 120000      E     LCALL   _EEPROM_Write
00A8 900000      R     MOV     DPTR,#writeStatus
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 79  

00AB EF                MOV     A,R7
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
00AD 900000      R     MOV     DPTR,#writeStatus
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
00B2 EF                MOV     A,R7
00B3 6007              JZ      ?C0129
                                           ; SOURCE LINE # 676
00B5 900000      R     MOV     DPTR,#ret_val
00B8 E4                CLR     A
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 677
00BA 800C              SJMP    ?C0128
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
00BC         ?C0129:
00BC 900000      R     MOV     DPTR,#i
00BF E4                CLR     A
00C0 75F001            MOV     B,#01H
00C3 120000      E     LCALL   ?C?IILDX
00C6 8089              SJMP    ?C0127
00C8         ?C0128:
                                           ; SOURCE LINE # 681
00C8 7B01              MOV     R3,#01H
00CA 7A00        E     MOV     R2,#HIGH c_mem
00CC 7900        E     MOV     R1,#LOW c_mem
00CE C003              PUSH    AR3
00D0 C002              PUSH    AR2
00D2 C001              PUSH    AR1
00D4 7B01              MOV     R3,#01H
00D6 7A00        E     MOV     R2,#HIGH g_mem
00D8 7900        E     MOV     R1,#LOW g_mem
00DA A801              MOV     R0,AR1
00DC AC02              MOV     R4,AR2
00DE AD03              MOV     R5,AR3
00E0 D001              POP     AR1
00E2 D002              POP     AR2
00E4 D003              POP     AR3
00E6 7E00              MOV     R6,#00H
00E8 7F4F              MOV     R7,#04FH
00EA 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 683
00ED 900000      R     MOV     DPTR,#ret_val
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
                                           ; SOURCE LINE # 684
00F2         ?C0131:
00F2 22                RET     
             ; FUNCTION _memStore (END)

             ; FUNCTION memRecall (BEGIN)
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 698
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
0008         ?C0132:
0008 900000      R     MOV     DPTR,#i
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 80  

000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 C3                CLR     C
0011 EF                MOV     A,R7
0012 944F              SUBB    A,#04FH
0014 EE                MOV     A,R6
0015 9400              SUBB    A,#00H
0017 5040              JNC     ?C0133
                                           ; SOURCE LINE # 699
0019 900000      R     MOV     DPTR,#i
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#EEPROM_ADDR
0024 E0                MOVX    A,@DPTR
0025 FC                MOV     R4,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FD                MOV     R5,A
0029 8D82              MOV     DPL,R5
002B 8C83              MOV     DPH,R4
002D E582              MOV     A,DPL
002F 2F                ADD     A,R7
0030 F582              MOV     DPL,A
0032 E583              MOV     A,DPH
0034 3E                ADDC    A,R6
0035 F583              MOV     DPH,A
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#i
003C E0                MOVX    A,@DPTR
003D FC                MOV     R4,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FD                MOV     R5,A
0041 7400        E     MOV     A,#LOW g_mem
0043 2D                ADD     A,R5
0044 F582              MOV     DPL,A
0046 7400        E     MOV     A,#HIGH g_mem
0048 3C                ADDC    A,R4
0049 F583              MOV     DPH,A
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
004D 900000      R     MOV     DPTR,#i
0050 E4                CLR     A
0051 75F001            MOV     B,#01H
0054 120000      E     LCALL   ?C?IILDX
0057 80AF              SJMP    ?C0132
0059         ?C0133:
                                           ; SOURCE LINE # 703
0059 900000      E     MOV     DPTR,#g_mem
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 7004              JNZ     ?C0135
                                           ; SOURCE LINE # 704
0061 120000      R     LCALL   memRestore
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 81  

0064 22                RET     
0065         ?C0135:
                                           ; SOURCE LINE # 706
0065 7B01              MOV     R3,#01H
0067 7A00        E     MOV     R2,#HIGH g_mem
0069 7900        E     MOV     R1,#LOW g_mem
006B C003              PUSH    AR3
006D C002              PUSH    AR2
006F C001              PUSH    AR1
0071 7B01              MOV     R3,#01H
0073 7A00        E     MOV     R2,#HIGH c_mem
0075 7900        E     MOV     R1,#LOW c_mem
0077 A801              MOV     R0,AR1
0079 AC02              MOV     R4,AR2
007B AD03              MOV     R5,AR3
007D D001              POP     AR1
007F D002              POP     AR2
0081 D003              POP     AR3
0083 7E00              MOV     R6,#00H
0085 7F4F              MOV     R7,#04FH
0087 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 708
008A         ?C0137:
008A 22                RET     
             ; FUNCTION memRecall (END)

             ; FUNCTION memRestore (BEGIN)
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 722
0000 900000      R     MOV     DPTR,#i
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
0008         ?C0138:
0008 900000      R     MOV     DPTR,#i
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 C3                CLR     C
0011 EF                MOV     A,R7
0012 944F              SUBB    A,#04FH
0014 EE                MOV     A,R6
0015 9400              SUBB    A,#00H
0017 5048              JNC     ?C0139
                                           ; SOURCE LINE # 723
0019 900000      R     MOV     DPTR,#i
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 2480              ADD     A,#080H
0024 FF                MOV     R7,A
0025 EE                MOV     A,R6
0026 3400              ADDC    A,#00H
0028 FE                MOV     R6,A
0029 900000      R     MOV     DPTR,#EEPROM_ADDR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 82  

002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 8D82              MOV     DPL,R5
0033 8C83              MOV     DPH,R4
0035 E582              MOV     A,DPL
0037 2F                ADD     A,R7
0038 F582              MOV     DPL,A
003A E583              MOV     A,DPH
003C 3E                ADDC    A,R6
003D F583              MOV     DPH,A
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 900000      R     MOV     DPTR,#i
0044 E0                MOVX    A,@DPTR
0045 FC                MOV     R4,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FD                MOV     R5,A
0049 7400        E     MOV     A,#LOW g_mem
004B 2D                ADD     A,R5
004C F582              MOV     DPL,A
004E 7400        E     MOV     A,#HIGH g_mem
0050 3C                ADDC    A,R4
0051 F583              MOV     DPH,A
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
0055 900000      R     MOV     DPTR,#i
0058 E4                CLR     A
0059 75F001            MOV     B,#01H
005C 120000      E     LCALL   ?C?IILDX
005F 80A7              SJMP    ?C0138
0061         ?C0139:
                                           ; SOURCE LINE # 727
0061 900000      E     MOV     DPTR,#g_mem
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 EF                MOV     A,R7
0067 7004              JNZ     ?C0141
                                           ; SOURCE LINE # 728
0069 120000      R     LCALL   memInit
006C 22                RET     
006D         ?C0141:
                                           ; SOURCE LINE # 730
006D 7F00              MOV     R7,#00H
006F 7E00              MOV     R6,#00H
0071 120000      R     LCALL   _memStore
                                           ; SOURCE LINE # 732
0074         ?C0142:
0074 22                RET     
             ; FUNCTION memRestore (END)

             ; FUNCTION memInit (BEGIN)
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 745
0000 900000      E     MOV     DPTR,#g_mem+01H
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
0006 7F99              MOV     R7,#099H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 83  

0008 7E19              MOV     R6,#019H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      E     MOV     DPTR,#g_mem+02H
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 747
0014 7F00              MOV     R7,#00H
0016 7E00              MOV     R6,#00H
0018 7D00              MOV     R5,#00H
001A 7C00              MOV     R4,#00H
001C 900000      E     MOV     DPTR,#g_mem+06H
001F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 748
0022 7FCC              MOV     R7,#0CCH
0024 7ECC              MOV     R6,#0CCH
0026 7D00              MOV     R5,#00H
0028 7C00              MOV     R4,#00H
002A 900000      E     MOV     DPTR,#g_mem+0AH
002D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 749
0030 7F00              MOV     R7,#00H
0032 7E00              MOV     R6,#00H
0034 7D05              MOV     R5,#05H
0036 7C00              MOV     R4,#00H
0038 900000      E     MOV     DPTR,#g_mem+0EH
003B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 750
003E 7F00              MOV     R7,#00H
0040 7E00              MOV     R6,#00H
0042 7D00              MOV     R5,#00H
0044 7C00              MOV     R4,#00H
0046 900000      E     MOV     DPTR,#g_mem+012H
0049 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 751
004C 7FCC              MOV     R7,#0CCH
004E 7ECC              MOV     R6,#0CCH
0050 7D00              MOV     R5,#00H
0052 7C00              MOV     R4,#00H
0054 900000      E     MOV     DPTR,#g_mem+016H
0057 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 752
005A 900000      E     MOV     DPTR,#g_mem+01CH
005D E4                CLR     A
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
005F 900000      E     MOV     DPTR,#g_mem+01DH
0062 E4                CLR     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 754
0064 900000      E     MOV     DPTR,#g_mem+01EH
0067 E4                CLR     A
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 755
0069 900000      E     MOV     DPTR,#g_mem+04EH
006C 74FA              MOV     A,#0FAH
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 757
006F 900000      E     MOV     DPTR,#g_mem+03AH
0072 7401              MOV     A,#01H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 759
0075 750000      R     MOV     i,#00H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 84  

0078         ?C0144:
0078 E500        R     MOV     A,i
007A C3                CLR     C
007B 9402              SUBB    A,#02H
007D 503A              JNC     ?C0145
                                           ; SOURCE LINE # 760
007F 7FD0              MOV     R7,#0D0H
0081 7E8A              MOV     R6,#08AH
0083 7DFF              MOV     R5,#0FFH
0085 7CFF              MOV     R4,#0FFH
0087 AB00        R     MOV     R3,i
0089 EB                MOV     A,R3
008A 25E0              ADD     A,ACC
008C 25E0              ADD     A,ACC
008E 2400        E     ADD     A,#LOW g_mem+03BH
0090 F582              MOV     DPL,A
0092 E4                CLR     A
0093 3400        E     ADDC    A,#HIGH g_mem+03BH
0095 F583              MOV     DPH,A
0097 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 761
009A 7F30              MOV     R7,#030H
009C 7E75              MOV     R6,#075H
009E 7D00              MOV     R5,#00H
00A0 7C00              MOV     R4,#00H
00A2 AB00        R     MOV     R3,i
00A4 EB                MOV     A,R3
00A5 25E0              ADD     A,ACC
00A7 25E0              ADD     A,ACC
00A9 2400        E     ADD     A,#LOW g_mem+043H
00AB F582              MOV     DPL,A
00AD E4                CLR     A
00AE 3400        E     ADDC    A,#HIGH g_mem+043H
00B0 F583              MOV     DPH,A
00B2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 762
00B5 0500        R     INC     i
00B7 80BF              SJMP    ?C0144
00B9         ?C0145:
                                           ; SOURCE LINE # 764
00B9 750000      R     MOV     i,#00H
00BC         ?C0147:
00BC E500        R     MOV     A,i
00BE C3                CLR     C
00BF 9403              SUBB    A,#03H
00C1 502E              JNC     ?C0148
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
00C3 7F00              MOV     R7,#00H
00C5 7E00              MOV     R6,#00H
00C7 7D80              MOV     R5,#080H
00C9 7C3F              MOV     R4,#03FH
00CB AB00        R     MOV     R3,i
00CD EB                MOV     A,R3
00CE 25E0              ADD     A,ACC
00D0 25E0              ADD     A,ACC
00D2 2400        E     ADD     A,#LOW g_mem+02EH
00D4 F582              MOV     DPL,A
00D6 E4                CLR     A
00D7 3400        E     ADDC    A,#HIGH g_mem+02EH
00D9 F583              MOV     DPH,A
00DB 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 85  

                                           ; SOURCE LINE # 767
00DE AF00        R     MOV     R7,i
00E0 7400        E     MOV     A,#LOW g_mem+01FH
00E2 2F                ADD     A,R7
00E3 F582              MOV     DPL,A
00E5 E4                CLR     A
00E6 3400        E     ADDC    A,#HIGH g_mem+01FH
00E8 F583              MOV     DPH,A
00EA 7401              MOV     A,#01H
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
00ED 0500        R     INC     i
00EF 80CB              SJMP    ?C0147
00F1         ?C0148:
                                           ; SOURCE LINE # 770
00F1 7F00              MOV     R7,#00H
00F3 7E00              MOV     R6,#00H
00F5 7D00              MOV     R5,#00H
00F7 7C00              MOV     R4,#00H
00F9 900000      E     MOV     DPTR,#g_mem+01FH
00FC E0                MOVX    A,@DPTR
00FD F9                MOV     R1,A
00FE A801              MOV     R0,AR1
0100 120000      E     LCALL   ?C?LSHL
0103 900000      E     MOV     DPTR,#g_mem+022H
0106 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 771
0109 7F00              MOV     R7,#00H
010B 7E00              MOV     R6,#00H
010D 7D00              MOV     R5,#00H
010F 7C00              MOV     R4,#00H
0111 900000      E     MOV     DPTR,#g_mem+020H
0114 E0                MOVX    A,@DPTR
0115 F9                MOV     R1,A
0116 A801              MOV     R0,AR1
0118 120000      E     LCALL   ?C?LSHL
011B 900000      E     MOV     DPTR,#g_mem+026H
011E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 772
0121 7F00              MOV     R7,#00H
0123 7E00              MOV     R6,#00H
0125 7D00              MOV     R5,#00H
0127 7C00              MOV     R4,#00H
0129 900000      E     MOV     DPTR,#g_mem+021H
012C E0                MOVX    A,@DPTR
012D F9                MOV     R1,A
012E A801              MOV     R0,AR1
0130 120000      E     LCALL   ?C?LSHL
0133 900000      E     MOV     DPTR,#g_mem+02AH
0136 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 774
0139 7FB8              MOV     R7,#0B8H
013B 7E0B              MOV     R6,#0BH
013D 7D00              MOV     R5,#00H
013F 7C00              MOV     R4,#00H
0141 900000      E     MOV     DPTR,#g_mem+01FH
0144 E0                MOVX    A,@DPTR
0145 F9                MOV     R1,A
0146 A801              MOV     R0,AR1
0148 120000      E     LCALL   ?C?LSHL
014B 900000      E     MOV     DPTR,#g_mem+04BH
014E EE                MOV     A,R6
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 86  

014F F0                MOVX    @DPTR,A
0150 A3                INC     DPTR
0151 EF                MOV     A,R7
0152 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 776
0153 900000      E     MOV     DPTR,#g_mem+01AH
0156 7405              MOV     A,#05H
0158 F0                MOVX    @DPTR,A
0159 A3                INC     DPTR
015A 74DC              MOV     A,#0DCH
015C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
015D 900000      E     MOV     DPTR,#g_mem
0160 7401              MOV     A,#01H
0162 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
0163 7F00              MOV     R7,#00H
0165 7E00              MOV     R6,#00H
0167 120000      R     LCALL   _memStore
016A EF                MOV     A,R7
016B 600E              JZ      ?C0150
016D 7F08              MOV     R7,#08H
016F 7E00              MOV     R6,#00H
0171 120000      R     LCALL   _memStore
0174 EF                MOV     A,R7
0175 6004              JZ      ?C0150
0177 7F01              MOV     R7,#01H
0179 8002              SJMP    ?C0151
017B         ?C0150:
017B 7F00              MOV     R7,#00H
017D         ?C0151:
                                           ; SOURCE LINE # 783
017D         ?C0152:
017D 22                RET     
             ; FUNCTION memInit (END)

             ; FUNCTION cmd_get_measurements (BEGIN)
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 807
0000 900000      R     MOV     DPTR,#packet_data
0003 7484              MOV     A,#084H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
0006 750003      R     MOV     index,#03H
0009         ?C0153:
0009 AF00        R     MOV     R7,index
000B 1500        R     DEC     index
000D EF                MOV     A,R7
000E 603C              JZ      ?C0154
                                           ; SOURCE LINE # 810
0010 AF00        R     MOV     R7,index
0012 EF                MOV     A,R7
0013 25E0              ADD     A,ACC
0015 25E0              ADD     A,ACC
0017 2400        E     ADD     A,#LOW g_measOld
0019 F582              MOV     DPL,A
001B E4                CLR     A
001C 3400        E     ADDC    A,#HIGH g_measOld
001E F583              MOV     DPH,A
0020 120000      E     LCALL   ?C?LLDXDATA
0023 AB00        R     MOV     R3,index
0025 7400        E     MOV     A,#LOW g_mem+01FH
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 87  

0027 2B                ADD     A,R3
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        E     ADDC    A,#HIGH g_mem+01FH
002D F583              MOV     DPH,A
002F E0                MOVX    A,@DPTR
0030 F9                MOV     R1,A
0031 A801              MOV     R0,AR1
0033 120000      E     LCALL   ?C?SLSHR
0036 E500        R     MOV     A,index
0038 25E0              ADD     A,ACC
003A FD                MOV     R5,A
003B 7400        R     MOV     A,#LOW packet_data+01H
003D 2D                ADD     A,R5
003E F582              MOV     DPL,A
0040 E4                CLR     A
0041 3400        R     ADDC    A,#HIGH packet_data+01H
0043 F583              MOV     DPH,A
0045 EE                MOV     A,R6
0046 F0                MOVX    @DPTR,A
0047 A3                INC     DPTR
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
004A 80BD              SJMP    ?C0153
004C         ?C0154:
                                           ; SOURCE LINE # 819
004C 7B01              MOV     R3,#01H
004E 7A00        R     MOV     R2,#HIGH packet_data
0050 7900        R     MOV     R1,#LOW packet_data
0052 7D07              MOV     R5,#07H
0054 120000      E     LCALL   _LCRChecksum
0057 900000      R     MOV     DPTR,#packet_data+07H
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
005C 7B01              MOV     R3,#01H
005E 7A00        R     MOV     R2,#HIGH packet_data
0060 7900        R     MOV     R1,#LOW packet_data
0062 7D08              MOV     R5,#08H
0064 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 823
0067 22                RET     
             ; FUNCTION cmd_get_measurements (END)

             ; FUNCTION cmd_get_inputs (BEGIN)
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 833
0000 900000      R     MOV     DPTR,#packet_data
0003 7483              MOV     A,#083H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 835
0006 900000      E     MOV     DPTR,#g_refOld
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      E     MOV     DPTR,#g_mem+01FH
000F E0                MOVX    A,@DPTR
0010 F9                MOV     R1,A
0011 A801              MOV     R0,AR1
0013 120000      E     LCALL   ?C?SLSHR
0016 900000      R     MOV     DPTR,#packet_data+01H
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 88  

001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 836
001E 900000      E     MOV     DPTR,#g_refOld+04H
0021 120000      E     LCALL   ?C?LLDXDATA
0024 900000      E     MOV     DPTR,#g_mem+020H
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 A801              MOV     R0,AR1
002B 120000      E     LCALL   ?C?SLSHR
002E 900000      R     MOV     DPTR,#packet_data+03H
0031 EE                MOV     A,R6
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 840
0036 7B01              MOV     R3,#01H
0038 7A00        R     MOV     R2,#HIGH packet_data
003A 7900        R     MOV     R1,#LOW packet_data
003C 7D05              MOV     R5,#05H
003E 120000      E     LCALL   _LCRChecksum
0041 900000      R     MOV     DPTR,#packet_data+05H
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 842
0046 7B01              MOV     R3,#01H
0048 7A00        R     MOV     R2,#HIGH packet_data
004A 7900        R     MOV     R1,#LOW packet_data
004C 7D06              MOV     R5,#06H
004E 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 844
0051 22                RET     
             ; FUNCTION cmd_get_inputs (END)

             ; FUNCTION cmd_get_currents (BEGIN)
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 854
0000 900000      R     MOV     DPTR,#packet_data
0003 7485              MOV     A,#085H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 856
0006 900000      E     MOV     DPTR,#g_measOld+0CH
0009 E0                MOVX    A,@DPTR
000A FE                MOV     R6,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#packet_data+01H
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
0016 900000      E     MOV     DPTR,#g_measOld+0EH
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 900000      R     MOV     DPTR,#packet_data+03H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 89  

0021 EE                MOV     A,R6
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 861
0026 7B01              MOV     R3,#01H
0028 7A00        R     MOV     R2,#HIGH packet_data
002A 7900        R     MOV     R1,#LOW packet_data
002C 7D05              MOV     R5,#05H
002E 120000      E     LCALL   _LCRChecksum
0031 900000      R     MOV     DPTR,#packet_data+05H
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 863
0036 7B01              MOV     R3,#01H
0038 7A00        R     MOV     R2,#HIGH packet_data
003A 7900        R     MOV     R1,#LOW packet_data
003C 7D06              MOV     R5,#06H
003E 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 864
0041 22                RET     
             ; FUNCTION cmd_get_currents (END)

             ; FUNCTION cmd_get_curr_and_meas (BEGIN)
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 880
0000 900000      R     MOV     DPTR,#packet_data
0003 7486              MOV     A,#086H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
0006 900000      E     MOV     DPTR,#g_measOld+0CH
0009 E0                MOVX    A,@DPTR
000A FE                MOV     R6,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#packet_data+01H
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 884
0016 900000      E     MOV     DPTR,#g_measOld+0EH
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 900000      R     MOV     DPTR,#packet_data+03H
0021 EE                MOV     A,R6
0022 F0                MOVX    @DPTR,A
0023 A3                INC     DPTR
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 887
0026 750003      R     MOV     index,#03H
0029         ?C0158:
0029 AF00        R     MOV     R7,index
002B 1500        R     DEC     index
002D EF                MOV     A,R7
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 90  

002E 603E              JZ      ?C0159
                                           ; SOURCE LINE # 888
0030 AF00        R     MOV     R7,index
0032 EF                MOV     A,R7
0033 25E0              ADD     A,ACC
0035 25E0              ADD     A,ACC
0037 2400        E     ADD     A,#LOW g_measOld
0039 F582              MOV     DPL,A
003B E4                CLR     A
003C 3400        E     ADDC    A,#HIGH g_measOld
003E F583              MOV     DPH,A
0040 120000      E     LCALL   ?C?LLDXDATA
0043 AB00        R     MOV     R3,index
0045 7400        E     MOV     A,#LOW g_mem+01FH
0047 2B                ADD     A,R3
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        E     ADDC    A,#HIGH g_mem+01FH
004D F583              MOV     DPH,A
004F E0                MOVX    A,@DPTR
0050 F9                MOV     R1,A
0051 A801              MOV     R0,AR1
0053 120000      E     LCALL   ?C?SLSHR
0056 E500        R     MOV     A,index
0058 25E0              ADD     A,ACC
005A 25E0              ADD     A,ACC
005C FD                MOV     R5,A
005D 7400        R     MOV     A,#LOW packet_data+05H
005F 2D                ADD     A,R5
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        R     ADDC    A,#HIGH packet_data+05H
0065 F583              MOV     DPH,A
0067 EE                MOV     A,R6
0068 F0                MOVX    @DPTR,A
0069 A3                INC     DPTR
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
006C 80BB              SJMP    ?C0158
006E         ?C0159:
                                           ; SOURCE LINE # 897
006E 7B01              MOV     R3,#01H
0070 7A00        R     MOV     R2,#HIGH packet_data
0072 7900        R     MOV     R1,#LOW packet_data
0074 7D0B              MOV     R5,#0BH
0076 120000      E     LCALL   _LCRChecksum
0079 900000      R     MOV     DPTR,#packet_data+0BH
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 898
007E 7B01              MOV     R3,#01H
0080 7A00        R     MOV     R2,#HIGH packet_data
0082 7900        R     MOV     R1,#LOW packet_data
0084 7D0C              MOV     R5,#0CH
0086 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 900
0089 22                RET     
             ; FUNCTION cmd_get_curr_and_meas (END)

             ; FUNCTION cmd_set_inputs (BEGIN)
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 905
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 91  

0000 900000      E     MOV     DPTR,#g_rx+01H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EE                MOV     A,R6
0009 33                RLC     A
000A 95E0              SUBB    A,ACC
000C FD                MOV     R5,A
000D FC                MOV     R4,A
000E 900000      E     MOV     DPTR,#g_refNew
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 906
0014 900000      E     MOV     DPTR,#g_refNew
0017 120000      E     LCALL   ?C?LLDXDATA
001A 900000      E     MOV     DPTR,#g_mem+01FH
001D E0                MOVX    A,@DPTR
001E F9                MOV     R1,A
001F A801              MOV     R0,AR1
0021 120000      E     LCALL   ?C?LSHL
0024 900000      E     MOV     DPTR,#g_refNew
0027 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 908
002A 900000      E     MOV     DPTR,#g_rx+03H
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EE                MOV     A,R6
0033 33                RLC     A
0034 95E0              SUBB    A,ACC
0036 FD                MOV     R5,A
0037 FC                MOV     R4,A
0038 900000      E     MOV     DPTR,#g_refNew+04H
003B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 909
003E 900000      E     MOV     DPTR,#g_refNew+04H
0041 120000      E     LCALL   ?C?LLDXDATA
0044 900000      E     MOV     DPTR,#g_mem+020H
0047 E0                MOVX    A,@DPTR
0048 F9                MOV     R1,A
0049 A801              MOV     R0,AR1
004B 120000      E     LCALL   ?C?LSHL
004E 900000      E     MOV     DPTR,#g_refNew+04H
0051 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 912
0054 900000      E     MOV     DPTR,#c_mem+03AH
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 6078              JZ      ?C0166
                                           ; SOURCE LINE # 914
005C 900000      E     MOV     DPTR,#c_mem+03BH
005F 120000      E     LCALL   ?C?LLDXDATA
0062 900000      E     MOV     DPTR,#g_refNew
0065 120000      E     LCALL   ?C?LLDXDATA0
0068 C3                CLR     C
0069 120000      E     LCALL   ?C?SLCMP
006C 500C              JNC     ?C0162
                                           ; SOURCE LINE # 915
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 92  

006E 900000      E     MOV     DPTR,#c_mem+03BH
0071 120000      E     LCALL   ?C?LLDXDATA
0074 900000      E     MOV     DPTR,#g_refNew
0077 120000      E     LCALL   ?C?LSTXDATA
007A         ?C0162:
                                           ; SOURCE LINE # 916
007A 900000      E     MOV     DPTR,#c_mem+03FH
007D 120000      E     LCALL   ?C?LLDXDATA
0080 900000      E     MOV     DPTR,#g_refNew+04H
0083 120000      E     LCALL   ?C?LLDXDATA0
0086 C3                CLR     C
0087 120000      E     LCALL   ?C?SLCMP
008A 500C              JNC     ?C0163
                                           ; SOURCE LINE # 917
008C 900000      E     MOV     DPTR,#c_mem+03FH
008F 120000      E     LCALL   ?C?LLDXDATA
0092 900000      E     MOV     DPTR,#g_refNew+04H
0095 120000      E     LCALL   ?C?LSTXDATA
0098         ?C0163:
                                           ; SOURCE LINE # 919
0098 900000      E     MOV     DPTR,#c_mem+043H
009B 120000      E     LCALL   ?C?LLDXDATA
009E 900000      E     MOV     DPTR,#g_refNew
00A1 120000      E     LCALL   ?C?LLDXDATA0
00A4 D3                SETB    C
00A5 120000      E     LCALL   ?C?SLCMP
00A8 400C              JC      ?C0164
                                           ; SOURCE LINE # 920
00AA 900000      E     MOV     DPTR,#c_mem+043H
00AD 120000      E     LCALL   ?C?LLDXDATA
00B0 900000      E     MOV     DPTR,#g_refNew
00B3 120000      E     LCALL   ?C?LSTXDATA
00B6         ?C0164:
                                           ; SOURCE LINE # 921
00B6 900000      E     MOV     DPTR,#c_mem+047H
00B9 120000      E     LCALL   ?C?LLDXDATA
00BC 900000      E     MOV     DPTR,#g_refNew+04H
00BF 120000      E     LCALL   ?C?LLDXDATA0
00C2 D3                SETB    C
00C3 120000      E     LCALL   ?C?SLCMP
00C6 400C              JC      ?C0166
                                           ; SOURCE LINE # 922
00C8 900000      E     MOV     DPTR,#c_mem+047H
00CB 120000      E     LCALL   ?C?LLDXDATA
00CE 900000      E     MOV     DPTR,#g_refNew+04H
00D1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 923
                                           ; SOURCE LINE # 924
00D4         ?C0166:
00D4 22                RET     
             ; FUNCTION cmd_set_inputs (END)

             ; FUNCTION cmd_set_pos_stiff (BEGIN)
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 932
0000 900000      E     MOV     DPTR,#g_rx+01H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EE                MOV     A,R6
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 93  

0009 33                RLC     A
000A 95E0              SUBB    A,ACC
000C FD                MOV     R5,A
000D FC                MOV     R4,A
000E 8F00        R     MOV     pos+03H,R7
0010 8E00        R     MOV     pos+02H,R6
0012 8D00        R     MOV     pos+01H,R5
0014 8C00        R     MOV     pos,R4
                                           ; SOURCE LINE # 933
0016 900000      E     MOV     DPTR,#g_rx+03H
0019 E0                MOVX    A,@DPTR
001A FE                MOV     R6,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EE                MOV     A,R6
001F 33                RLC     A
0020 95E0              SUBB    A,ACC
0022 FD                MOV     R5,A
0023 FC                MOV     R4,A
0024 8F00        R     MOV     stiff+03H,R7
0026 8E00        R     MOV     stiff+02H,R6
0028 8D00        R     MOV     stiff+01H,R5
002A 8C00        R     MOV     stiff,R4
                                           ; SOURCE LINE # 936
002C AF00        R     MOV     R7,pos+03H
002E AE00        R     MOV     R6,pos+02H
0030 AD00        R     MOV     R5,pos+01H
0032 AC00        R     MOV     R4,pos
0034 900000      E     MOV     DPTR,#g_mem+01FH
0037 E0                MOVX    A,@DPTR
0038 F9                MOV     R1,A
0039 A801              MOV     R0,AR1
003B 120000      E     LCALL   ?C?LSHL
003E 8F00        R     MOV     pos+03H,R7
0040 8E00        R     MOV     pos+02H,R6
0042 8D00        R     MOV     pos+01H,R5
0044 8C00        R     MOV     pos,R4
                                           ; SOURCE LINE # 939
0046 900000      E     MOV     DPTR,#c_mem+04BH
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E AB07              MOV     R3,AR7
0050 AA06              MOV     R2,AR6
0052 E4                CLR     A
0053 F9                MOV     R1,A
0054 F8                MOV     R0,A
0055 900000      E     MOV     DPTR,#c_mem+043H
0058 120000      E     LCALL   ?C?LLDXDATA
005B 120000      E     LCALL   ?C?LSUB
005E AB00        R     MOV     R3,pos+03H
0060 AA00        R     MOV     R2,pos+02H
0062 A900        R     MOV     R1,pos+01H
0064 A800        R     MOV     R0,pos
0066 D3                SETB    C
0067 120000      E     LCALL   ?C?SLCMP
006A 4020              JC      ?C0167
                                           ; SOURCE LINE # 940
006C 900000      E     MOV     DPTR,#c_mem+04BH
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 94  

006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 AB07              MOV     R3,AR7
0076 AA06              MOV     R2,AR6
0078 E4                CLR     A
0079 F9                MOV     R1,A
007A F8                MOV     R0,A
007B 900000      E     MOV     DPTR,#c_mem+043H
007E 120000      E     LCALL   ?C?LLDXDATA
0081 120000      E     LCALL   ?C?LSUB
0084 8F00        R     MOV     pos+03H,R7
0086 8E00        R     MOV     pos+02H,R6
0088 8D00        R     MOV     pos+01H,R5
008A 8C00        R     MOV     pos,R4
008C         ?C0167:
                                           ; SOURCE LINE # 942
008C 900000      E     MOV     DPTR,#c_mem+04BH
008F E0                MOVX    A,@DPTR
0090 FE                MOV     R6,A
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 E4                CLR     A
0095 FC                MOV     R4,A
0096 FD                MOV     R5,A
0097 900000      E     MOV     DPTR,#c_mem+03BH
009A 120000      E     LCALL   ?C?LLDXDATA0
009D 120000      E     LCALL   ?C?LADD
00A0 AB00        R     MOV     R3,pos+03H
00A2 AA00        R     MOV     R2,pos+02H
00A4 A900        R     MOV     R1,pos+01H
00A6 A800        R     MOV     R0,pos
00A8 C3                CLR     C
00A9 120000      E     LCALL   ?C?SLCMP
00AC 501C              JNC     ?C0168
                                           ; SOURCE LINE # 943
00AE 900000      E     MOV     DPTR,#c_mem+04BH
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 E4                CLR     A
00B7 FC                MOV     R4,A
00B8 FD                MOV     R5,A
00B9 900000      E     MOV     DPTR,#c_mem+03BH
00BC 120000      E     LCALL   ?C?LLDXDATA0
00BF 120000      E     LCALL   ?C?LADD
00C2 8F00        R     MOV     pos+03H,R7
00C4 8E00        R     MOV     pos+02H,R6
00C6 8D00        R     MOV     pos+01H,R5
00C8 8C00        R     MOV     pos,R4
00CA         ?C0168:
                                           ; SOURCE LINE # 948
00CA 900000      E     MOV     DPTR,#c_mem+04BH
00CD E0                MOVX    A,@DPTR
00CE FC                MOV     R4,A
00CF A3                INC     DPTR
00D0 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 95  

00D1 FD                MOV     R5,A
00D2 E4                CLR     A
00D3 120000      E     LCALL   ?C?FCASTI
00D6 7B00              MOV     R3,#00H
00D8 7A00              MOV     R2,#00H
00DA 7900              MOV     R1,#00H
00DC 7847              MOV     R0,#047H
00DE 120000      E     LCALL   ?C?FPDIV
00E1 C004              PUSH    AR4
00E3 C005              PUSH    AR5
00E5 C006              PUSH    AR6
00E7 C007              PUSH    AR7
00E9 AF00        R     MOV     R7,stiff+03H
00EB AE00        R     MOV     R6,stiff+02H
00ED AD00        R     MOV     R5,stiff+01H
00EF AC00        R     MOV     R4,stiff
00F1 EC                MOV     A,R4
00F2 120000      E     LCALL   ?C?FCASTL
00F5 A804              MOV     R0,AR4
00F7 A905              MOV     R1,AR5
00F9 AA06              MOV     R2,AR6
00FB AB07              MOV     R3,AR7
00FD D007              POP     AR7
00FF D006              POP     AR6
0101 D005              POP     AR5
0103 D004              POP     AR4
0105 120000      E     LCALL   ?C?FPMUL
0108 120000      E     LCALL   ?C?CASTF
010B 8F00        R     MOV     stiff+03H,R7
010D 8E00        R     MOV     stiff+02H,R6
010F 8D00        R     MOV     stiff+01H,R5
0111 8C00        R     MOV     stiff,R4
                                           ; SOURCE LINE # 951
0113 E500        R     MOV     A,pos+03H
0115 2500        R     ADD     A,stiff+03H
0117 FF                MOV     R7,A
0118 E500        R     MOV     A,pos+02H
011A 3500        R     ADDC    A,stiff+02H
011C FE                MOV     R6,A
011D E500        R     MOV     A,pos+01H
011F 3500        R     ADDC    A,stiff+01H
0121 FD                MOV     R5,A
0122 E500        R     MOV     A,pos
0124 3500        R     ADDC    A,stiff
0126 FC                MOV     R4,A
0127 900000      E     MOV     DPTR,#g_refNew
012A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 952
012D C3                CLR     C
012E E500        R     MOV     A,pos+03H
0130 9500        R     SUBB    A,stiff+03H
0132 FF                MOV     R7,A
0133 E500        R     MOV     A,pos+02H
0135 9500        R     SUBB    A,stiff+02H
0137 FE                MOV     R6,A
0138 E500        R     MOV     A,pos+01H
013A 9500        R     SUBB    A,stiff+01H
013C FD                MOV     R5,A
013D E500        R     MOV     A,pos
013F 9500        R     SUBB    A,stiff
0141 FC                MOV     R4,A
0142 900000      E     MOV     DPTR,#g_refNew+04H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 96  

0145 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 953
0148 22                RET     
             ; FUNCTION cmd_set_pos_stiff (END)

             ; FUNCTION cmd_get_velocities (BEGIN)
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 970
0000 900000      R     MOV     DPTR,#packet_data
0003 7489              MOV     A,#089H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 972
0006 750003      R     MOV     index,#03H
0009         ?C0170:
0009 AF00        R     MOV     R7,index
000B 1500        R     DEC     index
000D EF                MOV     A,R7
000E 602B              JZ      ?C0171
                                           ; SOURCE LINE # 973
0010 AF00        R     MOV     R7,index
0012 EF                MOV     A,R7
0013 25E0              ADD     A,ACC
0015 2400        E     ADD     A,#LOW g_measOld+013H
0017 F582              MOV     DPL,A
0019 E4                CLR     A
001A 3400        E     ADDC    A,#HIGH g_measOld+013H
001C F583              MOV     DPH,A
001E E0                MOVX    A,@DPTR
001F FE                MOV     R6,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 E500        R     MOV     A,index
0025 25E0              ADD     A,ACC
0027 25E0              ADD     A,ACC
0029 FD                MOV     R5,A
002A 7400        R     MOV     A,#LOW packet_data+01H
002C 2D                ADD     A,R5
002D F582              MOV     DPL,A
002F E4                CLR     A
0030 3400        R     ADDC    A,#HIGH packet_data+01H
0032 F583              MOV     DPH,A
0034 EE                MOV     A,R6
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
0039 80CE              SJMP    ?C0170
003B         ?C0171:
                                           ; SOURCE LINE # 982
003B 7B01              MOV     R3,#01H
003D 7A00        R     MOV     R2,#HIGH packet_data
003F 7900        R     MOV     R1,#LOW packet_data
0041 7D07              MOV     R5,#07H
0043 120000      E     LCALL   _LCRChecksum
0046 900000      R     MOV     DPTR,#packet_data+07H
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 983
004B 7B01              MOV     R3,#01H
004D 7A00        R     MOV     R2,#HIGH packet_data
004F 7900        R     MOV     R1,#LOW packet_data
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 97  

0051 7D08              MOV     R5,#08H
0053 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 985
0056 22                RET     
             ; FUNCTION cmd_get_velocities (END)

             ; FUNCTION cmd_activate (BEGIN)
                                           ; SOURCE LINE # 987
                                           ; SOURCE LINE # 990
0000 900000      E     MOV     DPTR,#g_rx+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      E     MOV     DPTR,#g_refNew+08H
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 993
000A 900000      E     MOV     DPTR,#g_mem+01EH
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 7018              JNZ     ?C0173
                                           ; SOURCE LINE # 994
0012 900000      E     MOV     DPTR,#g_meas
0015 120000      E     LCALL   ?C?LLDXDATA
0018 900000      E     MOV     DPTR,#g_refNew
001B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 995
001E 900000      E     MOV     DPTR,#g_meas+04H
0021 120000      E     LCALL   ?C?LLDXDATA
0024 900000      E     MOV     DPTR,#g_refNew+04H
0027 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 996
002A         ?C0173:
                                           ; SOURCE LINE # 999
002A 7F90              MOV     R7,#090H
002C 7E65              MOV     R6,#065H
002E 7D00              MOV     R5,#00H
0030 7C00              MOV     R4,#00H
0032 900000      E     MOV     DPTR,#g_meas
0035 120000      E     LCALL   ?C?LLDXDATA0
0038 D3                SETB    C
0039 120000      E     LCALL   ?C?SLCMP
003C 5064              JNC     ?C0175
003E 7F70              MOV     R7,#070H
0040 7E9A              MOV     R6,#09AH
0042 7DFF              MOV     R5,#0FFH
0044 7CFF              MOV     R4,#0FFH
0046 900000      E     MOV     DPTR,#g_meas
0049 120000      E     LCALL   ?C?LLDXDATA0
004C C3                CLR     C
004D 120000      E     LCALL   ?C?SLCMP
0050 4050              JC      ?C0175
0052 7F90              MOV     R7,#090H
0054 7E65              MOV     R6,#065H
0056 7D00              MOV     R5,#00H
0058 7C00              MOV     R4,#00H
005A 900000      E     MOV     DPTR,#g_meas+04H
005D 120000      E     LCALL   ?C?LLDXDATA0
0060 D3                SETB    C
0061 120000      E     LCALL   ?C?SLCMP
0064 503C              JNC     ?C0175
0066 7F70              MOV     R7,#070H
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 98  

0068 7E9A              MOV     R6,#09AH
006A 7DFF              MOV     R5,#0FFH
006C 7CFF              MOV     R4,#0FFH
006E 900000      E     MOV     DPTR,#g_meas+04H
0071 120000      E     LCALL   ?C?LLDXDATA0
0074 C3                CLR     C
0075 120000      E     LCALL   ?C?SLCMP
0078 4028              JC      ?C0175
007A 7F90              MOV     R7,#090H
007C 7E65              MOV     R6,#065H
007E 7D00              MOV     R5,#00H
0080 7C00              MOV     R4,#00H
0082 900000      E     MOV     DPTR,#g_meas+08H
0085 120000      E     LCALL   ?C?LLDXDATA0
0088 D3                SETB    C
0089 120000      E     LCALL   ?C?SLCMP
008C 5014              JNC     ?C0175
008E 7F70              MOV     R7,#070H
0090 7E9A              MOV     R6,#09AH
0092 7DFF              MOV     R5,#0FFH
0094 7CFF              MOV     R4,#0FFH
0096 900000      E     MOV     DPTR,#g_meas+08H
0099 120000      E     LCALL   ?C?LLDXDATA0
009C C3                CLR     C
009D 120000      E     LCALL   ?C?SLCMP
00A0 5005              JNC     ?C0174
00A2         ?C0175:
                                           ; SOURCE LINE # 1002
00A2 900000      E     MOV     DPTR,#g_refNew+08H
00A5 E4                CLR     A
00A6 F0                MOVX    @DPTR,A
00A7         ?C0174:
                                           ; SOURCE LINE # 1005
00A7 900000      E     MOV     DPTR,#g_refNew+08H
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 1007
00AF 22                RET     
             ; FUNCTION cmd_activate (END)

             ; FUNCTION cmd_set_watchdog (BEGIN)
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1011
0000 900000      E     MOV     DPTR,#g_rx+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 D3                SETB    C
0007 9400              SUBB    A,#00H
0009 500B              JNC     ?C0177
                                           ; SOURCE LINE # 1013
000B 7F01              MOV     R7,#01H
000D 120000      E     LCALL   _WATCHDOG_ENABLER_Write
                                           ; SOURCE LINE # 1014
0010 900000      E     MOV     DPTR,#g_mem+04EH
0013 E4                CLR     A
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
0015 22                RET     
0016         ?C0177:
                                           ; SOURCE LINE # 1016
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 99  

                                           ; SOURCE LINE # 1018
0016 900000      E     MOV     DPTR,#g_rx+01H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C D3                SETB    C
001D 94FA              SUBB    A,#0FAH
001F 4006              JC      ?C0179
                                           ; SOURCE LINE # 1019
0021 900000      E     MOV     DPTR,#g_rx+01H
0024 74FA              MOV     A,#0FAH
0026 F0                MOVX    @DPTR,A
0027         ?C0179:
                                           ; SOURCE LINE # 1024
0027 900000      E     MOV     DPTR,#g_rx+01H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 7E00              MOV     R6,#00H
002E 7C01              MOV     R4,#01H
0030 7DF4              MOV     R5,#0F4H
0032 120000      E     LCALL   ?C?LIMUL
0035 780A              MOV     R0,#0AH
0037 120000      E     LCALL   ?C?ULSHR
003A 900000      E     MOV     DPTR,#g_mem+04EH
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1025
003F 900000      E     MOV     DPTR,#g_mem+04EH
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 120000      E     LCALL   _WATCHDOG_COUNTER_WritePeriod
                                           ; SOURCE LINE # 1026
0047 7F00              MOV     R7,#00H
0049 120000      E     LCALL   _WATCHDOG_ENABLER_Write
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
004C         ?C0180:
004C 22                RET     
             ; FUNCTION cmd_set_watchdog (END)

             ; FUNCTION cmd_get_activate (BEGIN)
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1035
0000 900000      R     MOV     DPTR,#packet_data
0003 7481              MOV     A,#081H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1038
0006 900000      E     MOV     DPTR,#g_ref+08H
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#packet_data+01H
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1041
0010 7B01              MOV     R3,#01H
0012 7A00        R     MOV     R2,#HIGH packet_data
0014 7900        R     MOV     R1,#LOW packet_data
0016 7D02              MOV     R5,#02H
0018 120000      E     LCALL   _LCRChecksum
001B 900000      R     MOV     DPTR,#packet_data+02H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 100 

                                           ; SOURCE LINE # 1044
0020 7B01              MOV     R3,#01H
0022 7A00        R     MOV     R2,#HIGH packet_data
0024 7900        R     MOV     R1,#LOW packet_data
0026 7D03              MOV     R5,#03H
0028 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 1046
002B 22                RET     
             ; FUNCTION cmd_get_activate (END)

             ; FUNCTION cmd_ping (BEGIN)
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1053
0000 900000      R     MOV     DPTR,#packet_data
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1056
0005 900000      R     MOV     DPTR,#packet_data+01H
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1059
000A 7B01              MOV     R3,#01H
000C 7A00        R     MOV     R2,#HIGH packet_data
000E 7900        R     MOV     R1,#LOW packet_data
0010 7D02              MOV     R5,#02H
0012 120000      R     LCALL   _commWrite
                                           ; SOURCE LINE # 1060
0015 22                RET     
             ; FUNCTION cmd_ping (END)

             ; FUNCTION cmd_store_params (BEGIN)
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1066
0000 900000      E     MOV     DPTR,#c_mem+01DH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 6003              JZ      $ + 5H
0008 020000      R     LJMP    ?C0183
                                           ; SOURCE LINE # 1068
000B 900000      E     MOV     DPTR,#g_mem+02EH
000E 120000      E     LCALL   ?C?LLDXDATA
0011 900000      E     MOV     DPTR,#c_mem+02EH
0014 120000      E     LCALL   ?C?LLDXDATA0
0017 120000      E     LCALL   ?C?FPCMP3
001A 6038              JZ      ?C0184
                                           ; SOURCE LINE # 1070
001C 900000      E     MOV     DPTR,#g_refNew
001F 120000      E     LCALL   ?C?LLDXDATA
0022 EC                MOV     A,R4
0023 120000      E     LCALL   ?C?FCASTL
0026 900000      E     MOV     DPTR,#c_mem+02EH
0029 120000      E     LCALL   ?C?LLDXDATA0
002C 120000      E     LCALL   ?C?FPDIV
002F 120000      E     LCALL   ?C?CASTF
0032 900000      E     MOV     DPTR,#g_refNew
0035 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1072
0038 900000      E     MOV     DPTR,#g_refNew
003B 120000      E     LCALL   ?C?LLDXDATA
003E EC                MOV     A,R4
003F 120000      E     LCALL   ?C?FCASTL
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 101 

0042 900000      E     MOV     DPTR,#g_mem+02EH
0045 120000      E     LCALL   ?C?LLDXDATA0
0048 120000      E     LCALL   ?C?FPMUL
004B 120000      E     LCALL   ?C?CASTF
004E 900000      E     MOV     DPTR,#g_refNew
0051 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1073
0054         ?C0184:
                                           ; SOURCE LINE # 1075
0054 900000      E     MOV     DPTR,#g_mem+032H
0057 120000      E     LCALL   ?C?LLDXDATA
005A 900000      E     MOV     DPTR,#c_mem+032H
005D 120000      E     LCALL   ?C?LLDXDATA0
0060 120000      E     LCALL   ?C?FPCMP3
0063 6038              JZ      ?C0185
                                           ; SOURCE LINE # 1077
0065 900000      E     MOV     DPTR,#g_refNew+04H
0068 120000      E     LCALL   ?C?LLDXDATA
006B EC                MOV     A,R4
006C 120000      E     LCALL   ?C?FCASTL
006F 900000      E     MOV     DPTR,#c_mem+032H
0072 120000      E     LCALL   ?C?LLDXDATA0
0075 120000      E     LCALL   ?C?FPDIV
0078 120000      E     LCALL   ?C?CASTF
007B 900000      E     MOV     DPTR,#g_refNew+04H
007E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1079
0081 900000      E     MOV     DPTR,#g_refNew+04H
0084 120000      E     LCALL   ?C?LLDXDATA
0087 EC                MOV     A,R4
0088 120000      E     LCALL   ?C?FCASTL
008B 900000      E     MOV     DPTR,#g_mem+032H
008E 120000      E     LCALL   ?C?LLDXDATA0
0091 120000      E     LCALL   ?C?FPMUL
0094 120000      E     LCALL   ?C?CASTF
0097 900000      E     MOV     DPTR,#g_refNew+04H
009A 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1080
009D         ?C0185:
                                           ; SOURCE LINE # 1082
009D 900000      E     MOV     DPTR,#g_mem+022H
00A0 120000      E     LCALL   ?C?LLDXDATA
00A3 900000      E     MOV     DPTR,#c_mem+022H
00A6 120000      E     LCALL   ?C?LLDXDATA0
00A9 C3                CLR     C
00AA 120000      E     LCALL   ?C?SLCMP
00AD 6036              JZ      ?C0186
                                           ; SOURCE LINE # 1083
00AF 900000      E     MOV     DPTR,#g_refNew
00B2 120000      E     LCALL   ?C?LLDXDATA
00B5 C004              PUSH    AR4
00B7 C005              PUSH    AR5
00B9 C006              PUSH    AR6
00BB C007              PUSH    AR7
00BD 900000      E     MOV     DPTR,#c_mem+022H
00C0 120000      E     LCALL   ?C?LLDXDATA0
00C3 900000      E     MOV     DPTR,#g_mem+022H
00C6 120000      E     LCALL   ?C?LLDXDATA
00C9 120000      E     LCALL   ?C?LSUB
00CC A804              MOV     R0,AR4
00CE A905              MOV     R1,AR5
00D0 AA06              MOV     R2,AR6
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 102 

00D2 AB07              MOV     R3,AR7
00D4 D007              POP     AR7
00D6 D006              POP     AR6
00D8 D005              POP     AR5
00DA D004              POP     AR4
00DC 120000      E     LCALL   ?C?LADD
00DF 900000      E     MOV     DPTR,#g_refNew
00E2 120000      E     LCALL   ?C?LSTXDATA
00E5         ?C0186:
                                           ; SOURCE LINE # 1085
00E5 900000      E     MOV     DPTR,#g_mem+026H
00E8 120000      E     LCALL   ?C?LLDXDATA
00EB 900000      E     MOV     DPTR,#c_mem+026H
00EE 120000      E     LCALL   ?C?LLDXDATA0
00F1 C3                CLR     C
00F2 120000      E     LCALL   ?C?SLCMP
00F5 6036              JZ      ?C0187
                                           ; SOURCE LINE # 1086
00F7 900000      E     MOV     DPTR,#g_refNew+04H
00FA 120000      E     LCALL   ?C?LLDXDATA
00FD C004              PUSH    AR4
00FF C005              PUSH    AR5
0101 C006              PUSH    AR6
0103 C007              PUSH    AR7
0105 900000      E     MOV     DPTR,#c_mem+026H
0108 120000      E     LCALL   ?C?LLDXDATA0
010B 900000      E     MOV     DPTR,#g_mem+026H
010E 120000      E     LCALL   ?C?LLDXDATA
0111 120000      E     LCALL   ?C?LSUB
0114 A804              MOV     R0,AR4
0116 A905              MOV     R1,AR5
0118 AA06              MOV     R2,AR6
011A AB07              MOV     R3,AR7
011C D007              POP     AR7
011E D006              POP     AR6
0120 D005              POP     AR5
0122 D004              POP     AR4
0124 120000      E     LCALL   ?C?LADD
0127 900000      E     MOV     DPTR,#g_refNew+04H
012A 120000      E     LCALL   ?C?LSTXDATA
012D         ?C0187:
                                           ; SOURCE LINE # 1089
012D 900000      E     MOV     DPTR,#c_mem+03AH
0130 E0                MOVX    A,@DPTR
0131 FF                MOV     R7,A
0132 EF                MOV     A,R7
0133 6078              JZ      ?C0183
                                           ; SOURCE LINE # 1090
0135 900000      E     MOV     DPTR,#c_mem+03BH
0138 120000      E     LCALL   ?C?LLDXDATA
013B 900000      E     MOV     DPTR,#g_refNew
013E 120000      E     LCALL   ?C?LLDXDATA0
0141 C3                CLR     C
0142 120000      E     LCALL   ?C?SLCMP
0145 500C              JNC     ?C0189
0147 900000      E     MOV     DPTR,#c_mem+03BH
014A 120000      E     LCALL   ?C?LLDXDATA
014D 900000      E     MOV     DPTR,#g_refNew
0150 120000      E     LCALL   ?C?LSTXDATA
0153         ?C0189:
                                           ; SOURCE LINE # 1091
0153 900000      E     MOV     DPTR,#c_mem+03FH
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 103 

0156 120000      E     LCALL   ?C?LLDXDATA
0159 900000      E     MOV     DPTR,#g_refNew+04H
015C 120000      E     LCALL   ?C?LLDXDATA0
015F C3                CLR     C
0160 120000      E     LCALL   ?C?SLCMP
0163 500C              JNC     ?C0190
0165 900000      E     MOV     DPTR,#c_mem+03FH
0168 120000      E     LCALL   ?C?LLDXDATA
016B 900000      E     MOV     DPTR,#g_refNew+04H
016E 120000      E     LCALL   ?C?LSTXDATA
0171         ?C0190:
                                           ; SOURCE LINE # 1093
0171 900000      E     MOV     DPTR,#c_mem+043H
0174 120000      E     LCALL   ?C?LLDXDATA
0177 900000      E     MOV     DPTR,#g_refNew
017A 120000      E     LCALL   ?C?LLDXDATA0
017D D3                SETB    C
017E 120000      E     LCALL   ?C?SLCMP
0181 400C              JC      ?C0191
0183 900000      E     MOV     DPTR,#c_mem+043H
0186 120000      E     LCALL   ?C?LLDXDATA
0189 900000      E     MOV     DPTR,#g_refNew
018C 120000      E     LCALL   ?C?LSTXDATA
018F         ?C0191:
                                           ; SOURCE LINE # 1094
018F 900000      E     MOV     DPTR,#c_mem+047H
0192 120000      E     LCALL   ?C?LLDXDATA
0195 900000      E     MOV     DPTR,#g_refNew+04H
0198 120000      E     LCALL   ?C?LLDXDATA0
019B D3                SETB    C
019C 120000      E     LCALL   ?C?SLCMP
019F 400C              JC      ?C0183
01A1 900000      E     MOV     DPTR,#c_mem+047H
01A4 120000      E     LCALL   ?C?LLDXDATA
01A7 900000      E     MOV     DPTR,#g_refNew+04H
01AA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1096
01AD         ?C0183:
                                           ; SOURCE LINE # 1100
01AD 7F00              MOV     R7,#00H
01AF 7E00              MOV     R6,#00H
01B1 120000      R     LCALL   _memStore
01B4 EF                MOV     A,R7
01B5 6006              JZ      ?C0193
                                           ; SOURCE LINE # 1101
01B7 7F01              MOV     R7,#01H
01B9 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 1102
01BC 22                RET     
01BD         ?C0193:
                                           ; SOURCE LINE # 1103
01BD 7F00              MOV     R7,#00H
01BF 120000      R     LCALL   _sendAcknowledgment
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1105
01C2         ?C0195:
01C2 22                RET     
             ; FUNCTION cmd_store_params (END)

             ; FUNCTION cmd_set_baudrate (BEGIN)
                                           ; SOURCE LINE # 1107
C51 COMPILER V9.51   COMMAND_PROCESSING                                                    05/18/2016 12:33:07 PAGE 104 

                                           ; SOURCE LINE # 1110
0000 900000      E     MOV     DPTR,#g_rx+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      E     MOV     DPTR,#c_mem+04DH
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1112
000A 900000      E     MOV     DPTR,#g_rx+01H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 120000      E     LCALL   ?C?CCASE
0013 0000        R     DW      ?C0197
0015 0D                DB      0DH
0016 0000              DW      00H
0018 0000        R     DW      ?C0198
                                           ; SOURCE LINE # 1113
001A         ?C0197:
                                           ; SOURCE LINE # 1114
001A 7D01              MOV     R5,#01H
001C 7F0C              MOV     R7,#0CH
001E 7E00              MOV     R6,#00H
0020 120000      E     LCALL   _CLOCK_UART_SetDividerRegister
                                           ; SOURCE LINE # 1115
0023 22                RET     
                                           ; SOURCE LINE # 1116
0024         ?C0198:
                                           ; SOURCE LINE # 1117
0024 7D01              MOV     R5,#01H
0026 7F02              MOV     R7,#02H
0028 7E00              MOV     R6,#00H
002A 120000      E     LCALL   _CLOCK_UART_SetDividerRegister
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
002D         ?C0199:
002D 22                RET     
             ; FUNCTION cmd_set_baudrate (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   8879    ----
   CONSTANT SIZE    =    738    ----
   XDATA SIZE       =      2    1244
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
