C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE INTERRUPTIONS
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\interruptions.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\interruptions.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Keil_951
                    -\Debug/interruptions.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\interruptions.obj)

line level    source

   1          // ----------------------------------------------------------------------------
   2          // Copyright (C)  qbrobotics. All rights reserved.
   3          // www.qbrobotics.com
   4          // ----------------------------------------------------------------------------
   5          
   6          /**
   7          * \file         interruptions.c
   8          *
   9          * \brief        Interruption functions are in this file.
  10          * \date         Dic. 1, 2015
  11          * \author       qbrobotics
  12          * \copyright    (C)  qbrobotics. All rights reserved.
  13          */
  14          
  15          
  16          //=================================================================     includes
  17          #include <interruptions.h>
  18          #include <command_processing.h>
  19          
  20          #include "globals.h"
  21          #include "utils.h"
  22          
  23          //===================================================================     global
  24          
  25          
  26          // PWM vaules needed to obtain 8 Volts given a certain input tension
  27          // Numbers are sperimentally calculated //[index] (milliampere)
  28          CYCODE uint8 hitech_pwm_preload_values[36] = {  100,   //0 (8000)
  29                                                          76,
  30                                                          71,
  31                                                          69,
  32                                                          67,
  33                                                          65,     //5 (10500)
  34                                                          63,
  35                                                          61,
  36                                                          60,
  37                                                          58,
  38                                                          57,     //10 (13000)
  39                                                          56,
  40                                                          55,
  41                                                          54,
  42                                                          53,
  43                                                          52,     //15 (15500)
  44                                                          51,
  45                                                          50,
  46                                                          49,
  47                                                          49,
  48                                                          48,     //20 (18000)
  49                                                          47,
  50                                                          47,
  51                                                          46,
  52                                                          45,
  53                                                          45,     //25 (20500)
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 2   

  54                                                          45,
  55                                                          44,
  56                                                          44,
  57                                                          43,
  58                                                          43,     //30 (23000)
  59                                                          43,
  60                                                          43,
  61                                                          42,
  62                                                          42,
  63                                                          42};    //35 (25500)
  64          
  65          
  66          //==============================================================================
  67          //                                                            WATCHDOG INTERRUPT
  68          //==============================================================================
  69          
  70          CY_ISR(ISR_WATCHDOG_Handler){
  71   1      
  72   1          // Set WDT flag
  73   1          
  74   1          watchdog_flag = TRUE;
  75   1      
  76   1      }
  77          
  78          //==============================================================================
  79          //                                                            RS485 RX INTERRUPT
  80          //==============================================================================
  81          
  82          CY_ISR(ISR_RS485_RX_ExInterrupt) {
  83   1      
  84   1          // Set RS485 flag
  85   1          
  86   1          interrupt_flag = TRUE;
  87   1           
  88   1      }
  89          
  90          //==============================================================================
  91          //                                                             INTERRUPT MANAGER
  92          //==============================================================================
  93          // Manage interrupt from RS485 
  94          //==============================================================================
  95          // Processing RS-485 data frame:
  96          //
  97          // - WAIT_START:    Waits for beginning characters;
  98          // - WAIT_ID:       Waits for ID;
  99          // - WAIT_LENGTH:   Data length;
 100          // - RECEIVE:       Receive all bytes;
 101          // - UNLOAD:        Wait for another device end of transmission;
 102          //
 103          //==============================================================================
 104          
 105          void interrupt_manager(){
 106   1      
 107   1          
 108   1          //===========================================     local variables definition
 109   1      
 110   1          static uint8 CYDATA state = WAIT_START;                      // state
 111   1          
 112   1          //------------------------------------------------- local data packet
 113   1          static uint8 CYDATA data_packet_index;
 114   1          static uint8 CYDATA data_packet_length;
 115   1          static uint8 data_packet_buffer[128];                     
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 3   

 116   1          static uint8 CYDATA rx_queue[3];                    // last 2 bytes received
 117   1          //-------------------------------------------------
 118   1      
 119   1          uint8 CYDATA    rx_data;                            // RS485 UART rx data
 120   1          CYBIT           rx_data_type;                       // my id?
 121   1          uint8 CYDATA    package_count = 0;                     
 122   1      
 123   1          //======================================================     receive routine
 124   1          
 125   1          // Get data until buffer is not empty 
 126   1          
 127   1          while(UART_RS485_GetRxBufferSize() && (package_count < 6)){  
 128   2              // 6 stima di numero massimo di pacchetti che riesco a leggere senza bloccare l'esecuzione del fir
             -mware
 129   2              
 130   2              // Get next char
 131   2              rx_data = UART_RS485_GetChar();
 132   2              
 133   2              switch (state) {
 134   3                  //-----     wait for frame start     -------------------------------
 135   3                  case WAIT_START:
 136   3                  
 137   3                      rx_queue[0] = rx_queue[1];
 138   3                      rx_queue[1] = rx_queue[2];
 139   3                      rx_queue[2] = rx_data;
 140   3                      
 141   3                      // Check for header configuration package
 142   3                      if ((rx_queue[1] == 58) && (rx_queue[2] == 58)) {
 143   4                          rx_queue[0] = 0;
 144   4                          rx_queue[1] = 0;
 145   4                          rx_queue[2] = 0;
 146   4                          state       = WAIT_ID;                    
 147   4                      }else
 148   3                          if ((rx_queue[0] == 63) &&      //ASCII - ?
 149   3                              (rx_queue[1] == 13) &&      //ASCII - CR
 150   3                              (rx_queue[2] == 10))        //ASCII - LF)
 151   3                              infoGet(INFO_ALL);
 152   3                      break;
 153   3      
 154   3                  //-----     wait for id     ----------------------------------------
 155   3                  case  WAIT_ID:
 156   3      
 157   3                      // packet is for my ID or is broadcast
 158   3                      if (rx_data == c_mem.id || rx_data == 0)
 159   3                          rx_data_type = FALSE;
 160   3                      else                //packet is for others
 161   3                          rx_data_type = TRUE;
 162   3                      
 163   3                      data_packet_length = 0;
 164   3                      state = WAIT_LENGTH;
 165   3                      break;
 166   3      
 167   3                  //-----     wait for length     ------------------------------------
 168   3                  case  WAIT_LENGTH:
 169   3      
 170   3       
 171   3                      data_packet_length = rx_data;
 172   3                      // check validity of pack length
 173   3                      if (data_packet_length <= 1) {
 174   4                          data_packet_length = 0;
 175   4                          state = WAIT_START;
 176   4                      } else if (data_packet_length > 128) {
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 4   

 177   4                          data_packet_length = 0;
 178   4                          state = WAIT_START;
 179   4                      } else {
 180   4                          data_packet_index = 0;
 181   4                          
 182   4                          if(rx_data_type == FALSE)
 183   4                              state = RECEIVE;          // packet for me or broadcast
 184   4                          else
 185   4                              state = UNLOAD;           // packet for others
 186   4                      }
 187   3                      break;
 188   3      
 189   3                  //-----     receiving     -------------------------------------------
 190   3                  case RECEIVE:
 191   3      
 192   3                      data_packet_buffer[data_packet_index] = rx_data;
 193   3                      data_packet_index++;
 194   3                      
 195   3                      // check end of transmission
 196   3                      if (data_packet_index >= data_packet_length) {
 197   4                          // verify if frame ID corresponded to the device ID
 198   4                          if (rx_data_type == FALSE) {
 199   5                              // copying data from buffer to global packet
 200   5                              memcpy(g_rx.buffer, data_packet_buffer, data_packet_length);
 201   5                              g_rx.length = data_packet_length;
 202   5                              g_rx.ready  = 1;
 203   5                              commProcess();
 204   5                          }
 205   4                          
 206   4                          data_packet_index  = 0;
 207   4                          data_packet_length = 0;
 208   4                          state              = WAIT_START;
 209   4                          package_count++;
 210   4                      
 211   4                      }
 212   3                      break;
 213   3      
 214   3                  //-----     other device is receving     ---------------------------
 215   3                  case UNLOAD:
 216   3                      if (!(--data_packet_length)) {
 217   4                          data_packet_index  = 0;
 218   4                          data_packet_length = 0;
 219   4                          RS485_CTS_Write(1);
 220   4                          RS485_CTS_Write(0);
 221   4                          state              = WAIT_START;
 222   4                          package_count++;
 223   4                      }
 224   3                      break;
 225   3              }
 226   2          }
 227   1      }
 228          
 229          //==============================================================================
 230          //                                                            FUNCTION SCHEDULER
 231          //==============================================================================
 232          // Call all the function with the right frequency
 233          //==============================================================================
 234          // Base frequency 1000 Hz
 235          //==============================================================================
 236          
 237          void function_scheduler(void) {
 238   1       
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 5   

 239   1          static uint16 counter_calibration = DIV_INIT_VALUE;
 240   1          
 241   1          // Start ADC Conversion, SOC = 1
 242   1      
 243   1          timer_value0 = (uint32)MY_TIMER_ReadCounter();
 244   1          
 245   1          ADC_SOC_Write(0x01); 
 246   1          
 247   1          // Check Interrupt 
 248   1      
 249   1          if (interrupt_flag){
 250   2              interrupt_flag = FALSE;
 251   2              interrupt_manager();
 252   2          }
 253   1        
 254   1          //---------------------------------- Get Encoders
 255   1      
 256   1          encoder_reading(0); 
 257   1          
 258   1          // Check Interrupt     
 259   1          
 260   1          if (interrupt_flag){
 261   2              interrupt_flag = FALSE;
 262   2              interrupt_manager();
 263   2          }   
 264   1          
 265   1          encoder_reading(1);
 266   1          
 267   1          // Check Interrupt 
 268   1          
 269   1          if (interrupt_flag){
 270   2              interrupt_flag = FALSE;
 271   2              interrupt_manager();
 272   2          }
 273   1          
 274   1          encoder_reading(2);
 275   1          
 276   1          // Check Interrupt 
 277   1          
 278   1          if (interrupt_flag){
 279   2              interrupt_flag = FALSE;
 280   2              interrupt_manager();
 281   2          }
 282   1      
 283   1          //---------------------------------- Control Motors
 284   1          
 285   1          motor_control(0);
 286   1      
 287   1          // Check Interrupt 
 288   1      
 289   1          if (interrupt_flag){
 290   2              interrupt_flag = FALSE;
 291   2              interrupt_manager();
 292   2          }
 293   1          
 294   1          motor_control(1);
 295   1          
 296   1          // Check Interrupt 
 297   1          
 298   1          if (interrupt_flag){
 299   2              interrupt_flag = FALSE;
 300   2              interrupt_manager();
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 6   

 301   2          }
 302   1      
 303   1          //---------------------------------- Read conversion buffer - LOCK function
 304   1      
 305   1          analog_read_end();
 306   1      
 307   1          //---------------------------------- Calibration 
 308   1      
 309   1          // Divider 100, freq = 10 Hz
 310   1          if (!(calibration_flag == STOP)) {
 311   2              if (counter_calibration == CALIBRATION_DIV) {
 312   3                  calibration();
 313   3                  counter_calibration = 0;
 314   3              }
 315   2              counter_calibration++;
 316   2          }
 317   1          // Check Interrupt 
 318   1          
 319   1          if (interrupt_flag){
 320   2              interrupt_flag = FALSE;
 321   2              interrupt_manager();
 322   2          }
 323   1         
 324   1          //---------------------------------- Update States
 325   1          
 326   1          // Load k-1 state
 327   1          memcpy( &g_measOld, &g_meas, sizeof(g_meas) );
 328   1          memcpy( &g_refOld, &g_ref, sizeof(g_ref) );
 329   1      
 330   1          // Load k+1 state
 331   1          memcpy( &g_ref, &g_refNew, sizeof(g_ref) );
 332   1      
 333   1          if (interrupt_flag){
 334   2              interrupt_flag = FALSE;
 335   2              interrupt_manager();
 336   2          }
 337   1      
 338   1          //CyDelayUs(100);
 339   1      
 340   1          timer_value = (uint32)MY_TIMER_ReadCounter();
 341   1          MY_TIMER_WriteCounter(5000000);
 342   1      
 343   1      }
 344          
 345          
 346          //==============================================================================
 347          //                                                                MOTORS CONTROL
 348          //==============================================================================
 349          
 350          void motor_control(const uint8 idx) {
 351   1          
 352   1          uint8 CYDATA index = idx;
 353   1       
 354   1          int32 CYDATA curr_ref;
 355   1      
 356   1          int32 CYDATA pwm_input = 0;
 357   1          
 358   1          int32 CYDATA pos_error;
 359   1          int32 CYDATA curr_error;
 360   1          
 361   1          int32 CYDATA k_p = c_mem.k_p;  
 362   1          int32 CYDATA k_i = c_mem.k_i; 
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 7   

 363   1          int32 CYDATA k_d = c_mem.k_d; 
 364   1      
 365   1          int32 CYDATA k_p_c = c_mem.k_p_c;  
 366   1          int32 CYDATA k_i_c = c_mem.k_i_c; 
 367   1          int32 CYDATA k_d_c = c_mem.k_d_c;     
 368   1          
 369   1      
 370   1          // Static Variables
 371   1          
 372   1          static uint8 CYDATA direction = 0;
 373   1          static CYBIT dirM0, dirM1;
 374   1          
 375   1          static int32 prev_curr[NUM_OF_MOTORS];
 376   1      
 377   1          static int32 pos_error_sum[NUM_OF_MOTORS];
 378   1          static int32 curr_error_sum[NUM_OF_MOTORS];
 379   1          
 380   1          // check index value
 381   1          if (index >= NUM_OF_MOTORS)
 382   1              return;
 383   1      
 384   1          switch(c_mem.control_mode) {
 385   2              case CONTROL_ANGLE:
 386   2              
 387   2                  // position error
 388   2                  pos_error = g_ref.pos[index] - g_meas.pos[index]; //g_ref.pos[index] 
 389   2                 
 390   2                  if (interrupt_flag){
 391   3                      interrupt_flag = FALSE;
 392   3                      interrupt_manager();
 393   3                  }
 394   2                  
 395   2                  // error sum for integral
 396   2                  pos_error_sum[index] += pos_error;
 397   2      
 398   2                  //anti wind-up
 399   2                  if (pos_error_sum[index] > POS_INTEGRAL_SAT_LIMIT)
 400   2                      pos_error_sum[index] = POS_INTEGRAL_SAT_LIMIT;
 401   2                  else{
 402   3                      if (pos_error_sum[index] < -POS_INTEGRAL_SAT_LIMIT)
 403   3                          pos_error_sum[index] = -POS_INTEGRAL_SAT_LIMIT;
 404   3                  }
 405   2                    
 406   2                  if (interrupt_flag){
 407   3                      interrupt_flag = FALSE;
 408   3                      interrupt_manager();
 409   3                  }
 410   2                  // pwm_input init
 411   2                  pwm_input = 0;
 412   2                  // Proportional
 413   2                  if (k_p != 0) {
 414   3                          
 415   3                      if ((pos_error > 131072) || (pos_error < -131072))  //if grater than 2^17
 416   3                          pwm_input = (int32)(k_p * (pos_error >> 8)) >> 8;
 417   3                      else
 418   3                          pwm_input = (int32)(k_p * pos_error) >> 16;
 419   3                  }
 420   2                  
 421   2                  if (interrupt_flag){
 422   3                      interrupt_flag = FALSE;
 423   3                      interrupt_manager();
 424   3                  }
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 8   

 425   2                            
 426   2                  // Integral
 427   2                  if (k_i != 0) 
 428   2                      pwm_input += (int32)((k_i >> 6) * pos_error_sum[index]) >> 10;
 429   2                  
 430   2                  // Derivative
 431   2                  if (k_d != 0)
 432   2                      pwm_input += (int32)(k_d * (g_measOld.pos[index] - g_meas.pos[index])) >> 16;
 433   2               
 434   2          
 435   2                  if (interrupt_flag){
 436   3                      interrupt_flag = FALSE;
 437   3                      interrupt_manager();
 438   3                  }
 439   2                   
 440   2                  // Update measure
 441   2                  //prev_pos[index] = g_meas.pos[index];
 442   2      
 443   2                  if (index == 0){
 444   3                      if (pwm_input >= 0)
 445   3                          dirM0 = 1;
 446   3                          //direction |= 0x01;
 447   3                      else
 448   3                          dirM0 = 0;
 449   3                          //direction &= 0xFE;
 450   3                  }else{ // index == 1
 451   3                      if (pwm_input >= 0)
 452   3                          dirM1 = 1;
 453   3                         // direction |= 0x02;
 454   3                      else
 455   3                          dirM1 = 0;
 456   3                          //direction &= 0xFD;
 457   3                  }
 458   2                  
 459   2                  break;
 460   2      
 461   2              case CURR_AND_POS_CONTROL:
 462   2                  pos_error = g_ref.pos[index] - g_meas.pos[index];
 463   2      
 464   2                  // ------ position PID control -----
 465   2      
 466   2                  curr_ref = 0;
 467   2      
 468   2                  // Proportional
 469   2                  if (k_p != 0) {
 470   3                      if ((pos_error > 131072) || (pos_error < -131072))
 471   3                          curr_ref += (int32)(k_p * (pos_error >> 8)) >> 8;
 472   3                      else
 473   3                          curr_ref += (int32)(k_p * pos_error) >> 16;
 474   3                  }
 475   2      
 476   2                  // Integral
 477   2                  if (k_i != 0)
 478   2                      curr_ref += (int32)(k_i * pos_error_sum[index]) >> 16;
 479   2                  
 480   2                  // Derivative
 481   2                  if (k_d != 0)
 482   2                      curr_ref += (int32)(k_d * (g_measOld.pos[index] - g_meas.pos[index])) >> 16;
 483   2                  
 484   2                  // motor direction depends on curr_ref
 485   2                      
 486   2                  if (index == 0){
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 9   

 487   3                      if (curr_ref >= 0)
 488   3                          direction |= 0x01;
 489   3                      else
 490   3                          direction &= 0xFE;
 491   3                  }else{ // index == 1
 492   3                      if (curr_ref >= 0)
 493   3                          direction |= 0x02;
 494   3                      else
 495   3                          direction &= 0xFD;
 496   3                  }
 497   2      
 498   2                  // current ref must be positive
 499   2                  curr_ref = abs(curr_ref);
 500   2      
 501   2                  // saturate max current
 502   2                  if (curr_ref > c_mem.current_limit)
 503   2                      curr_ref = c_mem.current_limit;
 504   2      
 505   2                  // current error
 506   2                  curr_error = curr_ref - g_meas.curr[index];
 507   2      
 508   2                  // ----- current PID control -----
 509   2      
 510   2                  pwm_input = 0;
 511   2      
 512   2                  // Proportional
 513   2                  if (c_mem.k_p_c != 0)
 514   2                      pwm_input += (int32)(c_mem.k_p_c * curr_error) >> 16;
 515   2                  
 516   2                  // Integral
 517   2                  if (c_mem.k_i_c != 0)
 518   2                      pwm_input += (int32)(c_mem.k_i_c * curr_error_sum[index]) >> 16;
 519   2                  
 520   2                  // Derivative
 521   2                  if (c_mem.k_d_c != 0)
 522   2                      pwm_input += (int32)(c_mem.k_d_c * (prev_curr[index] - g_meas.curr[index])) >> 16;
 523   2                  
 524   2      
 525   2                  // pwm_input saturation
 526   2                  if (pwm_input < 0)
 527   2                      pwm_input = 0;
 528   2                  else{
 529   3                      if (pwm_input > PWM_MAX_VALUE)
 530   3                          pwm_input = PWM_MAX_VALUE;
 531   3                  }
 532   2      
 533   2                  // update error sum for both errors
 534   2                  pos_error_sum[index] += pos_error;
 535   2                  curr_error_sum[index] += curr_error;
 536   2      
 537   2                  // error_sum saturation
 538   2                  if (pos_error_sum[index] > POS_INTEGRAL_SAT_LIMIT)
 539   2                      pos_error_sum[index] = POS_INTEGRAL_SAT_LIMIT;
 540   2                  else{
 541   3                      if (pos_error_sum[index] < -POS_INTEGRAL_SAT_LIMIT)
 542   3                          pos_error_sum[index] = -POS_INTEGRAL_SAT_LIMIT;
 543   3                  }
 544   2      
 545   2                  if (curr_error_sum[index] > CURR_INTEGRAL_SAT_LIMIT)
 546   2                      curr_error_sum[index] = CURR_INTEGRAL_SAT_LIMIT;
 547   2                  else{
 548   3                      if (curr_error_sum[index] < -CURR_INTEGRAL_SAT_LIMIT)
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 10  

 549   3                          curr_error_sum[index] = -CURR_INTEGRAL_SAT_LIMIT;
 550   3                  }
 551   2      
 552   2                  // Update position
 553   2                 // prev_pos[index] = g_meas.pos[index];
 554   2      
 555   2                  // Update current
 556   2                  prev_curr[index] = g_meas.curr[index];
 557   2      
 558   2                  break;
 559   2      
 560   2              case CONTROL_CURRENT:
 561   2      
 562   2                  // Current ref from pos ref
 563   2                  curr_ref = g_ref.pos[index] >> g_mem.res[index];
 564   2      
 565   2                  // saturate max current
 566   2                  if (curr_ref > c_mem.current_limit)
 567   2                      curr_ref = c_mem.current_limit;
 568   2                  
 569   2                  // Current error
 570   2                  curr_error = abs(curr_ref) - g_meas.curr[index];
 571   2      
 572   2                  // Error sum for integral
 573   2                  curr_error_sum[index] += curr_error;
 574   2      
 575   2                  //anti wind-up
 576   2                  if (curr_error_sum[index] > CURR_INTEGRAL_SAT_LIMIT)
 577   2                      curr_error_sum[index] = CURR_INTEGRAL_SAT_LIMIT;
 578   2                  else{
 579   3                      if (curr_error_sum[index] < 0)
 580   3                          curr_error_sum[index] = 0;
 581   3                  }
 582   2      
 583   2                  // pwm_input init
 584   2                  pwm_input = 0;
 585   2      
 586   2                  // Proportional
 587   2                  if (k_p_c != 0)
 588   2                      pwm_input += (int32)(k_p * curr_error) >> 16;
 589   2      
 590   2      
 591   2                  // Integral
 592   2                  if (k_i_c != 0)
 593   2                      pwm_input += (int32)(k_i_c * (curr_error_sum[index] >> 6)) >> 10;
 594   2                  
 595   2                  // Derivative
 596   2                  if (k_d_c != 0)
 597   2                      pwm_input += (int32)(k_d_c * (prev_curr[index] - g_meas.curr[index])) >> 16;
 598   2      
 599   2                  // Saturate pwm_input
 600   2                  if (pwm_input < 0)
 601   2                      pwm_input = 0;
 602   2      
 603   2                  // Update measure
 604   2                  prev_curr[index] = g_meas.curr[index];
 605   2                  
 606   2                  if (index == 0){
 607   3                      if (curr_ref >= 0)
 608   3                          direction |= 0x01;
 609   3                      else
 610   3                          direction &= 0xFE;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 11  

 611   3                  }else { // index == 1
 612   3                      if (curr_ref >= 0)
 613   3                          direction |= 0x02;
 614   3                      else
 615   3                          direction &= 0xFD;
 616   3                  }
 617   2                  
 618   2                  break;
 619   2      
 620   2              case CONTROL_PWM:
 621   2                  // Direct PWM value
 622   2                  pwm_input = g_ref.pos[index] >> g_mem.res[index];
 623   2      
 624   2                  if (index == 0){
 625   3                      if (pwm_input >= 0)
 626   3                          direction |= 0x01;
 627   3                      else
 628   3                          direction &= 0xFE;
 629   3                  }else { // index == 1
 630   3                      if (pwm_input >= 0)
 631   3                          direction |= 0x02;
 632   3                      else
 633   3                          direction &= 0xFD;
 634   3                  }
 635   2      
 636   2                  break;
 637   2      
 638   2              default:
 639   2                  break;
 640   2          }
 641   1          
 642   1          if (interrupt_flag){
 643   2              interrupt_flag = FALSE;
 644   2              interrupt_manager();
 645   2          }
 646   1              
 647   1          // abs(pwm_input) must be lower or equal to PWM_MAX_VALUE
 648   1          if(pwm_input >  PWM_MAX_VALUE) 
 649   1              pwm_input =  PWM_MAX_VALUE;
 650   1          if(pwm_input < -PWM_MAX_VALUE) 
 651   1              pwm_input = -PWM_MAX_VALUE;
 652   1          
 653   1          if (interrupt_flag){
 654   2              interrupt_flag = FALSE;
 655   2              interrupt_manager();
 656   2          }   
 657   1      
 658   1          // remap pwm_input on pwm_limit based on input tension to have maximum 8 volts
 659   1          if (c_mem.control_mode != CONTROL_PWM)
 660   1              pwm_input = (((pwm_input << 10) / PWM_MAX_VALUE) * dev_pwm_limit) >> 10;
 661   1      
 662   1          // drive direction and pwm duty cycle
 663   1              
 664   1          if (dirM0){
 665   2              if (dirM1)
 666   2                  MOTOR_DIR_Write(0x03);
 667   2              else
 668   2                  MOTOR_DIR_Write(0x01);
 669   2          }
 670   1          else{
 671   2              if (dirM1)
 672   2                  MOTOR_DIR_Write(0x02);
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 12  

 673   2              else
 674   2                  MOTOR_DIR_Write(0x00);
 675   2          }
 676   1      
 677   1          if (interrupt_flag){
 678   2              interrupt_flag = FALSE;
 679   2              interrupt_manager();
 680   2          }
 681   1          
 682   1          if (index == 0)
 683   1              PWM_MOTORS_WriteCompare1(abs(pwm_input));
 684   1          else // index == 1
 685   1              PWM_MOTORS_WriteCompare2(abs(pwm_input));
 686   1          
 687   1          if (interrupt_flag){
 688   2              interrupt_flag = FALSE;
 689   2              interrupt_manager();
 690   2          }
 691   1      }
 692          
 693          //==============================================================================
 694          //                                                           ANALOG MEASUREMENTS
 695          //==============================================================================
 696          
 697          void analog_read_end() {
 698   1             
 699   1          /* =========================================================================
 700   1          /   Ideal formulation to calculate tension and current
 701   1          /
 702   1          /   tension = ((read_value_mV - offset) * 101) / gain -> [mV]
 703   1          /   current = ((read_value_mV - offset) * 375) / (gain * resistor) -> [mA]
 704   1          /
 705   1          /   Definition:
 706   1          /   read_value_mV = counts_read / 0.819 -> conversion from counts to mV
 707   1          /   offset = 2000 -> hardware amplifier bias in mV
 708   1          /   gain = 8.086 -> amplifier gain
 709   1          /   resistor = 18 -> resistor of voltage divider in KOhm 
 710   1          /
 711   1          /   Real formulation: tradeoff in good performance and accurancy, ADC_buf[] 
 712   1          /   and offset unit of measurment is counts, instead dev_tension and
 713   1          /   g_meas.curr[] are converted in properly unit.
 714   1          /  =========================================================================
 715   1          */
 716   1          
 717   1          // Wait for conversion end
 718   1          while(!ADC_STATUS_Read()){
 719   2              if (interrupt_flag){
 720   3                  interrupt_flag = FALSE;
 721   3                  interrupt_manager();
 722   3              }
 723   2          }
 724   1          
 725   1          // Convert tension read
 726   1          dev_tension = ((int32)(ADC_buf[0] - 1638) * 1952) >> 7;
 727   1          
 728   1          if (interrupt_flag){
 729   2              interrupt_flag = FALSE;
 730   2              interrupt_manager();
 731   2          }
 732   1      
 733   1          // Until there is no valid input tension repeat this measurement
 734   1          
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 13  

 735   1          if (dev_tension > 0){
 736   2              
 737   2              // Set PWM depends on tension
 738   2              pwm_limit_search();
 739   2              
 740   2              // Check Interrupt 
 741   2          
 742   2              if (interrupt_flag){
 743   3                  interrupt_flag = FALSE;
 744   3                  interrupt_manager();
 745   3              }
 746   2      
 747   2              // Filter and Set currents
 748   2              g_meas.curr[0] = filter_i1((int16) (((int32)(ADC_buf[1] - 1638) * 25771) >> 13));
 749   2              
 750   2              // Check Interrupt 
 751   2          
 752   2              if (interrupt_flag){
 753   3                  interrupt_flag = FALSE;
 754   3                  interrupt_manager();
 755   3              }
 756   2              g_meas.curr[1] = filter_i2((int16) (((int32)(ADC_buf[2] - 1638) * 25771) >> 13));
 757   2              
 758   2              // Check Interrupt 
 759   2          
 760   2              if (interrupt_flag){
 761   3                  interrupt_flag = FALSE;
 762   3                  interrupt_manager();
 763   3              }
 764   2          }
 765   1          else {
 766   2              g_meas.curr[0] = 0;
 767   2              g_meas.curr[1] = 0;
 768   2          }
 769   1      }
 770          
 771          //==============================================================================
 772          //                                                               ENCODER READING
 773          //==============================================================================
 774          
 775          void encoder_reading(const uint8 idx)
 776          {
 777   1          uint8 CYDATA index = idx;
 778   1          
 779   1          uint8 jj;
 780   1          
 781   1          uint32 data_encoder;
 782   1          int32 value_encoder;
 783   1          int32 aux;
 784   1      
 785   1          static int32 last_value_encoder[NUM_OF_SENSORS];
 786   1      
 787   1          static uint8 error[NUM_OF_SENSORS];
 788   1          
 789   1          static CYBIT only_first_time = TRUE;
 790   1      
 791   1          // static int32 l_value[NUM_OF_SENSORS];   //last value for vel
 792   1          // static int32 ll_value[NUM_OF_SENSORS];  //last last value for vel
 793   1          // static int32 lll_value[NUM_OF_SENSORS];  //last last last value for vel
 794   1      
 795   1          if (index >= NUM_OF_SENSORS)
 796   1              return;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 14  

 797   1          
 798   1          if (reset_last_value_flag) {
 799   2              for (jj = NUM_OF_SENSORS; jj--;) {
 800   3                  last_value_encoder[jj] = 0;
 801   3              }
 802   2              reset_last_value_flag = 0;
 803   2          }
 804   1      
 805   1          //======================================================     reading sensors
 806   1          if (index == 0)
 807   1                  data_encoder = SHIFTREG_ENC_1_ReadData() & 0x3FFFF;
 808   1          else {
 809   2              if (index == 1)
 810   2                  data_encoder = SHIFTREG_ENC_2_ReadData() & 0x3FFFF;
 811   2              else {
 812   3                  if (index == 2)
 813   3                      data_encoder = SHIFTREG_ENC_3_ReadData() & 0x3FFFF;
 814   3                  else // index == 3
 815   3                      data_encoder = SHIFTREG_ENC_4_ReadData() & 0x3FFFF;
 816   3              }
 817   2          }    
 818   1      
 819   1          if (check_enc_data(&data_encoder)) {
 820   2      
 821   2              value_encoder = (int16)(32768 - ((data_encoder & 0x3FFC0) >> 2) + g_mem.m_off[index]);  
 822   2      
 823   2              // Initialize last_value_encoder
 824   2              if (only_first_time) {
 825   3                  last_value_encoder[index] = value_encoder;
 826   3                  
 827   3                  if (index == (NUM_OF_SENSORS - 1))
 828   3                      only_first_time = 0;
 829   3              }
 830   2      
 831   2              // Take care of rotations
 832   2              aux = value_encoder - last_value_encoder[index];
 833   2      
 834   2              // ====================== 1 TURN ======================
 835   2              // -32768                    0                    32767 -32768                   0                
             -     32767
 836   2              // |-------------------------|-------------------------|-------------------------|----------------
             ----------|
 837   2              //              |                         |      |           |      |                         |
 838   2              //           -16384                     16383    |           |   -16384                     16383
 839   2              //                                               |           |
 840   2              //                                           24575           -24576
 841   2              //                                               |___________|
 842   2              //                                                   49152
 843   2      
 844   2              // if we are in the right interval, take care of rotation
 845   2              // and update the variable only if the difference between
 846   2              // one measure and another is less than 1/4 of turn
 847   2      
 848   2              // Considering we are sampling at 1kHz, this means that our shaft needs
 849   2              // to go slower than 1/4 turn every ms -> 1 turn every 4ms
 850   2              // equal to 250 turn/s -> 15000 RPM
 851   2      
 852   2              if (aux > 49152)
 853   2                  g_meas.rot[index]--;
 854   2              else{ 
 855   3                  if (aux < -49152)
 856   3                      g_meas.rot[index]++;
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 15  

 857   3                  else{
 858   4                      if (abs(aux) > 16384) { // if two measure are too far
 859   5                          error[index]++;
 860   5                          if (error[index] < 10)
 861   5                              // Discard
 862   5                              return;
 863   5                      }
 864   4                  }
 865   3              }
 866   2              
 867   2              error[index] = 0;
 868   2              
 869   2              last_value_encoder[index] = value_encoder;
 870   2      
 871   2              value_encoder += (int32)g_meas.rot[index] << 16;
 872   2      
 873   2              if (c_mem.m_mult[index] != 1.0)
 874   2                  value_encoder *= c_mem.m_mult[index];
 875   2            
 876   2              g_meas.pos[index] = value_encoder;
 877   2          }
 878   1      
 879   1          // // velocity calculation
 880   1          // switch(i) {
 881   1          //     case 0: {
 882   1          //         g_meas.vel[i] = (int16)filter_vel_1((3*value_encoder + l_value[i] - ll_value[i] - 3*lll_val
             -ue[i]) / 10);
 883   1          //         break;
 884   1          //     }
 885   1          //     case 1: {
 886   1          //         g_meas.vel[i] = (int16)filter_vel_2((3*value_encoder + l_value[i] - ll_value[i] - 3*lll_val
             -ue[i]) / 10);
 887   1          //         break;
 888   1          //     }
 889   1          //     case 2: {
 890   1          //         g_meas.vel[i] = (int16)filter_vel_3((3*value_encoder + l_value[i] - ll_value[i] - 3*lll_val
             -ue[i]) / 10);
 891   1          //         break;
 892   1          //     }
 893   1          // }
 894   1      
 895   1          // // update old values
 896   1          // lll_value[i] = ll_value[i];
 897   1          // ll_value[i] = l_value[i];
 898   1          // l_value[i] = value_encoder;
 899   1      }
 900          
 901          
 902          //==============================================================================
 903          //                                                          CALIBRATION FUNCTION
 904          //==============================================================================
 905          
 906          void calibration()
 907          {
 908   1          static int32 old_k_p;
 909   1          static int32 old_k_i;
 910   1          static int32 old_k_d;
 911   1      
 912   1          static uint8 pause_counter = 0;
 913   1      
 914   1          switch(calibration_flag) {
 915   2              case START:
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 16  

 916   2                  ISR_RS485_RX_Disable();
 917   2      
 918   2                  // save old PID values
 919   2                  old_k_p = c_mem.k_p;
 920   2                  old_k_i = c_mem.k_i;
 921   2                  old_k_d = c_mem.k_d;
 922   2      
 923   2                  // goto to zero position
 924   2                  g_refNew.pos[0] = 0;
 925   2                  g_refNew.pos[1] = 0;
 926   2      
 927   2                  // Activate motors
 928   2                  if (!(g_refNew.onoff & 0x03)) {
 929   3                      MOTOR_ON_OFF_Write(0x03);
 930   3                  }
 931   2      
 932   2                  // wait for motors to reach zero position
 933   2                  calibration_flag = PAUSE_1;
 934   2                  break;
 935   2      
 936   2              case PAUSE_1:
 937   2                  pause_counter++;
 938   2      
 939   2                  if (pause_counter == 10) {
 940   3                      pause_counter = 0;
 941   3      
 942   3                      // set new temp values for PID parameters
 943   3                      c_mem.k_p = 0.1 * 65536;
 944   3                      c_mem.k_i = 0;
 945   3                      c_mem.k_d = 0.3 * 65536;
 946   3      
 947   3                      calibration_flag = CONTINUE_1;
 948   3                  }
 949   2                  break;
 950   2      
 951   2              case CONTINUE_1:
 952   2                  // increment of 0.5 degree
 953   2                  g_refNew.pos[0] += 65536 / 720;
 954   2                  g_refNew.pos[1] -= 65536 / 720;
 955   2      
 956   2                  // check if one of the motors reach the threashold
 957   2                  if ((g_meas.curr[0] > CALIB_CURRENT) || (g_meas.curr[1] > CALIB_CURRENT)) {
 958   3                      // save current value as MAX_STIFFNESS
 959   3                      g_mem.max_stiffness = g_ref.pos[0];
 960   3      
 961   3                      // reset old values for PID parameters
 962   3                      c_mem.k_p = old_k_p;
 963   3                      c_mem.k_i = old_k_i;
 964   3                      c_mem.k_d = old_k_d;
 965   3      
 966   3                      // go back to zero position
 967   3                      g_refNew.pos[0] = 0;
 968   3                      g_refNew.pos[1] = 0;
 969   3      
 970   3                      // wait for motors to reach zero position
 971   3                      calibration_flag = PAUSE_2;
 972   3                  }
 973   2                  break;
 974   2      
 975   2              case PAUSE_2:
 976   2                  pause_counter++;
 977   2      
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 17  

 978   2                  if (pause_counter == 10) {
 979   3                      pause_counter =0;
 980   3      
 981   3                      calibration_flag = CONTINUE_2;
 982   3                  }
 983   2                  break;
 984   2      
 985   2              case CONTINUE_2:
 986   2                  // Deactivate motors
 987   2                  if (!(g_refNew.onoff & 0x03)) {
 988   3                      MOTOR_ON_OFF_Write(0x00);
 989   3                  }
 990   2      
 991   2                  // store memory to save MAX_STIFFNESS as default value
 992   2                  memStore(DEFAULT_EEPROM_DISPLACEMENT);
 993   2                  memStore(0);
 994   2      
 995   2                  calibration_flag = STOP;
 996   2      
 997   2                  ISR_RS485_RX_Enable();
 998   2                  break;
 999   2      
1000   2              case STOP:
1001   2              default:
1002   2                  break;
1003   2          }
1004   1      }
1005          
1006          
1007          //==============================================================================
1008          //                                                              PWM_LIMIT_SEARCH
1009          //==============================================================================
1010          
1011          void pwm_limit_search() {
1012   1          
1013   1          uint8 CYDATA index;
1014   1      
1015   1          if (dev_tension > 25500)    // Max value 
1016   1              dev_pwm_limit = 0;
1017   1          else{ 
1018   2              if (dev_tension < 8000) // Min value
1019   2                  dev_pwm_limit = 100;
1020   2              else {                  
1021   3                  index = (uint8)((dev_tension - 8000) >> 9);
1022   3                  dev_pwm_limit = hitech_pwm_preload_values[index];
1023   3              }
1024   2          }
1025   1      }
1026          
1027          
1028          /* [] END OF FILE */
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 18  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ISR_WATCHDOG_Handler (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 74
0000 D200        E     SETB    watchdog_flag
                                           ; SOURCE LINE # 76
0002 32                RETI    
             ; FUNCTION ISR_WATCHDOG_Handler (END)

             ; FUNCTION ISR_RS485_RX_ExInterrupt (BEGIN)
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 86
0000 D200        E     SETB    interrupt_flag
                                           ; SOURCE LINE # 88
0002 32                RETI    
             ; FUNCTION ISR_RS485_RX_ExInterrupt (END)

             ; FUNCTION interrupt_manager (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 121
0000 750000      R     MOV     package_count,#00H
0003         ?C0003:
                                           ; SOURCE LINE # 127
0003 120000      E     LCALL   UART_RS485_GetRxBufferSize
0006 EF                MOV     A,R7
0007 7003              JNZ     $ + 5H
0009 020000      R     LJMP    ?C0026
000C E500        R     MOV     A,package_count
000E C3                CLR     C
000F 9406              SUBB    A,#06H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 131
0016 120000      E     LCALL   UART_RS485_GetChar
0019 8F00        R     MOV     rx_data,R7
                                           ; SOURCE LINE # 133
001B E500        R     MOV     A,state
001D 120000      E     LCALL   ?C?CCASE
0020 0000        R     DW      ?C0006
0022 00                DB      00H
0023 0000        R     DW      ?C0010
0025 01                DB      01H
0026 0000        R     DW      ?C0014
0028 02                DB      02H
0029 0000        R     DW      ?C0021
002B 03                DB      03H
002C 0000        R     DW      ?C0024
002E 04                DB      04H
002F 0000              DW      00H
0031 0000        R     DW      ?C0003
                                           ; SOURCE LINE # 135
0033         ?C0006:
                                           ; SOURCE LINE # 137
0033 850000      R     MOV     rx_queue,rx_queue+01H
                                           ; SOURCE LINE # 138
0036 850000      R     MOV     rx_queue+01H,rx_queue+02H
                                           ; SOURCE LINE # 139
0039 850000      R     MOV     rx_queue+02H,rx_data
                                           ; SOURCE LINE # 142
003C E500        R     MOV     A,rx_queue+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 19  

003E B43A13            CJNE    A,#03AH,?C0007
0041 E500        R     MOV     A,rx_queue+02H
0043 B43A0E            CJNE    A,#03AH,?C0007
                                           ; SOURCE LINE # 143
0046 750000      R     MOV     rx_queue,#00H
                                           ; SOURCE LINE # 144
0049 750000      R     MOV     rx_queue+01H,#00H
                                           ; SOURCE LINE # 145
004C 750000      R     MOV     rx_queue+02H,#00H
                                           ; SOURCE LINE # 146
004F 750001      R     MOV     state,#01H
                                           ; SOURCE LINE # 147
0052 80AF              SJMP    ?C0003
0054         ?C0007:
                                           ; SOURCE LINE # 148
0054 E500        R     MOV     A,rx_queue
0056 B43FAA            CJNE    A,#03FH,?C0003
0059 E500        R     MOV     A,rx_queue+01H
005B B40DA5            CJNE    A,#0DH,?C0003
005E E500        R     MOV     A,rx_queue+02H
0060 B40AA0            CJNE    A,#0AH,?C0003
                                           ; SOURCE LINE # 151
0063 7F00              MOV     R7,#00H
0065 7E00              MOV     R6,#00H
0067 120000      E     LCALL   _infoGet
                                           ; SOURCE LINE # 152
006A 8097              SJMP    ?C0003
                                           ; SOURCE LINE # 155
006C         ?C0010:
                                           ; SOURCE LINE # 158
006C 900000      E     MOV     DPTR,#c_mem+01H
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 E500        R     MOV     A,rx_data
0073 6F                XRL     A,R7
0074 6004              JZ      ?C0012
0076 E500        R     MOV     A,rx_data
0078 7004              JNZ     ?C0011
007A         ?C0012:
                                           ; SOURCE LINE # 159
007A C200        R     CLR     rx_data_type
007C 8002              SJMP    ?C0013
007E         ?C0011:
                                           ; SOURCE LINE # 161
007E D200        R     SETB    rx_data_type
0080         ?C0013:
                                           ; SOURCE LINE # 163
0080 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 164
0083 750002      R     MOV     state,#02H
                                           ; SOURCE LINE # 165
0086 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 168
0089         ?C0014:
                                           ; SOURCE LINE # 171
0089 850000      R     MOV     data_packet_length,rx_data
                                           ; SOURCE LINE # 173
008C E500        R     MOV     A,data_packet_length
008E D3                SETB    C
008F 9401              SUBB    A,#01H
0091 5009              JNC     ?C0015
                                           ; SOURCE LINE # 174
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 20  

0093 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 175
0096 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 176
0099 020000      R     LJMP    ?C0003
009C         ?C0015:
009C E500        R     MOV     A,data_packet_length
009E D3                SETB    C
009F 9480              SUBB    A,#080H
00A1 4009              JC      ?C0017
                                           ; SOURCE LINE # 177
00A3 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 178
00A6 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 179
00A9 020000      R     LJMP    ?C0003
00AC         ?C0017:
                                           ; SOURCE LINE # 180
00AC 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 182
00AF 200006            JB      rx_data_type,?C0019
                                           ; SOURCE LINE # 183
00B2 750003      R     MOV     state,#03H
00B5 020000      R     LJMP    ?C0003
00B8         ?C0019:
                                           ; SOURCE LINE # 185
00B8 750004      R     MOV     state,#04H
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
00BB 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 190
00BE         ?C0021:
                                           ; SOURCE LINE # 192
00BE AF00        R     MOV     R7,data_packet_index
00C0 7400        R     MOV     A,#LOW data_packet_buffer
00C2 2F                ADD     A,R7
00C3 F582              MOV     DPL,A
00C5 E4                CLR     A
00C6 3400        R     ADDC    A,#HIGH data_packet_buffer
00C8 F583              MOV     DPH,A
00CA E500        R     MOV     A,rx_data
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
00CD 0500        R     INC     data_packet_index
                                           ; SOURCE LINE # 196
00CF E500        R     MOV     A,data_packet_index
00D1 C3                CLR     C
00D2 9500        R     SUBB    A,data_packet_length
00D4 5003              JNC     $ + 5H
00D6 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 198
00D9 20003A            JB      rx_data_type,?C0023
                                           ; SOURCE LINE # 200
00DC AF00        R     MOV     R7,data_packet_length
00DE 7E00              MOV     R6,#00H
00E0 7B01              MOV     R3,#01H
00E2 7A00        R     MOV     R2,#HIGH data_packet_buffer
00E4 7900        R     MOV     R1,#LOW data_packet_buffer
00E6 C003              PUSH    AR3
00E8 C002              PUSH    AR2
00EA C001              PUSH    AR1
00EC 7B01              MOV     R3,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 21  

00EE 7A00        E     MOV     R2,#HIGH g_rx
00F0 7900        E     MOV     R1,#LOW g_rx
00F2 A801              MOV     R0,AR1
00F4 AC02              MOV     R4,AR2
00F6 AD03              MOV     R5,AR3
00F8 D001              POP     AR1
00FA D002              POP     AR2
00FC D003              POP     AR3
00FE 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 201
0101 AF00        R     MOV     R7,data_packet_length
0103 7E00              MOV     R6,#00H
0105 900000      E     MOV     DPTR,#g_rx+080H
0108 EE                MOV     A,R6
0109 F0                MOVX    @DPTR,A
010A A3                INC     DPTR
010B EF                MOV     A,R7
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
010D 900000      E     MOV     DPTR,#g_rx+084H
0110 7401              MOV     A,#01H
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
0113 120000      E     LCALL   commProcess
                                           ; SOURCE LINE # 204
0116         ?C0023:
                                           ; SOURCE LINE # 206
0116 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 207
0119 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 208
011C 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 209
011F 0500        R     INC     package_count
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0121 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 215
0124         ?C0024:
                                           ; SOURCE LINE # 216
0124 1500        R     DEC     data_packet_length
0126 AF00        R     MOV     R7,data_packet_length
0128 EF                MOV     A,R7
0129 6003              JZ      $ + 5H
012B 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 217
012E 750000      R     MOV     data_packet_index,#00H
                                           ; SOURCE LINE # 218
0131 750000      R     MOV     data_packet_length,#00H
                                           ; SOURCE LINE # 219
0134 7F01              MOV     R7,#01H
0136 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 220
0139 7F00              MOV     R7,#00H
013B 120000      E     LCALL   _RS485_CTS_Write
                                           ; SOURCE LINE # 221
013E 750000      R     MOV     state,#00H
                                           ; SOURCE LINE # 222
0141 0500        R     INC     package_count
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0143 020000      R     LJMP    ?C0003
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 22  

                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0146 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 227
0149         ?C0026:
0149 22                RET     
             ; FUNCTION interrupt_manager (END)

             ; FUNCTION function_scheduler (BEGIN)
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 243
0000 120000      E     LCALL   MY_TIMER_ReadCounter
0003 900000      E     MOV     DPTR,#timer_value0
0006 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 245
0009 7F01              MOV     R7,#01H
000B 120000      E     LCALL   _ADC_SOC_Write
                                           ; SOURCE LINE # 249
000E 300005            JNB     interrupt_flag,?C0027
                                           ; SOURCE LINE # 250
0011 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 251
0013 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 252
0016         ?C0027:
                                           ; SOURCE LINE # 256
0016 7F00              MOV     R7,#00H
0018 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 260
001B 300005            JNB     interrupt_flag,?C0028
                                           ; SOURCE LINE # 261
001E C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 262
0020 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 263
0023         ?C0028:
                                           ; SOURCE LINE # 265
0023 7F01              MOV     R7,#01H
0025 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 269
0028 300005            JNB     interrupt_flag,?C0029
                                           ; SOURCE LINE # 270
002B C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 271
002D 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 272
0030         ?C0029:
                                           ; SOURCE LINE # 274
0030 7F02              MOV     R7,#02H
0032 120000      R     LCALL   _encoder_reading
                                           ; SOURCE LINE # 278
0035 300005            JNB     interrupt_flag,?C0030
                                           ; SOURCE LINE # 279
0038 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 280
003A 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 281
003D         ?C0030:
                                           ; SOURCE LINE # 285
003D 7F00              MOV     R7,#00H
003F 120000      R     LCALL   _motor_control
                                           ; SOURCE LINE # 289
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 23  

0042 300005            JNB     interrupt_flag,?C0031
                                           ; SOURCE LINE # 290
0045 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 291
0047 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 292
004A         ?C0031:
                                           ; SOURCE LINE # 294
004A 7F01              MOV     R7,#01H
004C 120000      R     LCALL   _motor_control
                                           ; SOURCE LINE # 298
004F 300005            JNB     interrupt_flag,?C0032
                                           ; SOURCE LINE # 299
0052 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 300
0054 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 301
0057         ?C0032:
                                           ; SOURCE LINE # 305
0057 120000      R     LCALL   analog_read_end
                                           ; SOURCE LINE # 310
005A 900000      E     MOV     DPTR,#calibration_flag
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F EF                MOV     A,R7
0060 7003              JNZ     ?C0034
0062 D3                SETB    C
0063 8001              SJMP    ?C0035
0065         ?C0034:
0065 C3                CLR     C
0066         ?C0035:
0066 4023              JC      ?C0033
                                           ; SOURCE LINE # 311
0068 900000      R     MOV     DPTR,#counter_calibration
006B E0                MOVX    A,@DPTR
006C FE                MOV     R6,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 6464              XRL     A,#064H
0073 4E                ORL     A,R6
0074 700B              JNZ     ?C0036
                                           ; SOURCE LINE # 312
0076 120000      R     LCALL   calibration
                                           ; SOURCE LINE # 313
0079 900000      R     MOV     DPTR,#counter_calibration
007C E4                CLR     A
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F E4                CLR     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
0081         ?C0036:
                                           ; SOURCE LINE # 315
0081 900000      R     MOV     DPTR,#counter_calibration
0084 E4                CLR     A
0085 75F001            MOV     B,#01H
0088 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 316
008B         ?C0033:
                                           ; SOURCE LINE # 319
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 24  

008B 300005            JNB     interrupt_flag,?C0037
                                           ; SOURCE LINE # 320
008E C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 321
0090 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 322
0093         ?C0037:
                                           ; SOURCE LINE # 327
0093 7B01              MOV     R3,#01H
0095 7A00        E     MOV     R2,#HIGH g_meas
0097 7900        E     MOV     R1,#LOW g_meas
0099 C003              PUSH    AR3
009B C002              PUSH    AR2
009D C001              PUSH    AR1
009F 7B01              MOV     R3,#01H
00A1 7A00        E     MOV     R2,#HIGH g_measOld
00A3 7900        E     MOV     R1,#LOW g_measOld
00A5 A801              MOV     R0,AR1
00A7 AC02              MOV     R4,AR2
00A9 AD03              MOV     R5,AR3
00AB D001              POP     AR1
00AD D002              POP     AR2
00AF D003              POP     AR3
00B1 7E00              MOV     R6,#00H
00B3 7F19              MOV     R7,#019H
00B5 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 328
00B8 7B01              MOV     R3,#01H
00BA 7A00        E     MOV     R2,#HIGH g_ref
00BC 7900        E     MOV     R1,#LOW g_ref
00BE C003              PUSH    AR3
00C0 C002              PUSH    AR2
00C2 C001              PUSH    AR1
00C4 7B01              MOV     R3,#01H
00C6 7A00        E     MOV     R2,#HIGH g_refOld
00C8 7900        E     MOV     R1,#LOW g_refOld
00CA A801              MOV     R0,AR1
00CC AC02              MOV     R4,AR2
00CE AD03              MOV     R5,AR3
00D0 D001              POP     AR1
00D2 D002              POP     AR2
00D4 D003              POP     AR3
00D6 7E00              MOV     R6,#00H
00D8 7F09              MOV     R7,#09H
00DA 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 331
00DD 7B01              MOV     R3,#01H
00DF 7A00        E     MOV     R2,#HIGH g_refNew
00E1 7900        E     MOV     R1,#LOW g_refNew
00E3 C003              PUSH    AR3
00E5 C002              PUSH    AR2
00E7 C001              PUSH    AR1
00E9 7B01              MOV     R3,#01H
00EB 7A00        E     MOV     R2,#HIGH g_ref
00ED 7900        E     MOV     R1,#LOW g_ref
00EF A801              MOV     R0,AR1
00F1 AC02              MOV     R4,AR2
00F3 AD03              MOV     R5,AR3
00F5 D001              POP     AR1
00F7 D002              POP     AR2
00F9 D003              POP     AR3
00FB 7E00              MOV     R6,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 25  

00FD 7F09              MOV     R7,#09H
00FF 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 333
0102 300005            JNB     interrupt_flag,?C0038
                                           ; SOURCE LINE # 334
0105 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 335
0107 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 336
010A         ?C0038:
                                           ; SOURCE LINE # 340
010A 120000      E     LCALL   MY_TIMER_ReadCounter
010D 900000      E     MOV     DPTR,#timer_value
0110 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 341
0113 7F40              MOV     R7,#040H
0115 7E4B              MOV     R6,#04BH
0117 7D4C              MOV     R5,#04CH
0119 7C00              MOV     R4,#00H
011B 120000      E     LCALL   _MY_TIMER_WriteCounter
                                           ; SOURCE LINE # 343
011E 22                RET     
             ; FUNCTION function_scheduler (END)

             ; FUNCTION _motor_control (BEGIN)
                                           ; SOURCE LINE # 350
0000 900000      R     MOV     DPTR,#idx
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0005 900000      R     MOV     DPTR,#idx
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 356
000C 7F00              MOV     R7,#00H
000E 7E00              MOV     R6,#00H
0010 7D00              MOV     R5,#00H
0012 7C00              MOV     R4,#00H
0014 8F00        R     MOV     pwm_input+03H,R7
0016 8E00        R     MOV     pwm_input+02H,R6
0018 8D00        R     MOV     pwm_input+01H,R5
001A 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 361
001C 900000      E     MOV     DPTR,#c_mem+02H
001F 120000      E     LCALL   ?C?LLDXDATA
0022 8F00        R     MOV     k_p+03H,R7
0024 8E00        R     MOV     k_p+02H,R6
0026 8D00        R     MOV     k_p+01H,R5
0028 8C00        R     MOV     k_p,R4
                                           ; SOURCE LINE # 362
002A 900000      E     MOV     DPTR,#c_mem+06H
002D 120000      E     LCALL   ?C?LLDXDATA
0030 8F00        R     MOV     k_i+03H,R7
0032 8E00        R     MOV     k_i+02H,R6
0034 8D00        R     MOV     k_i+01H,R5
0036 8C00        R     MOV     k_i,R4
                                           ; SOURCE LINE # 363
0038 900000      E     MOV     DPTR,#c_mem+0AH
003B 120000      E     LCALL   ?C?LLDXDATA
003E 8F00        R     MOV     k_d+03H,R7
0040 8E00        R     MOV     k_d+02H,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 26  

0042 8D00        R     MOV     k_d+01H,R5
0044 8C00        R     MOV     k_d,R4
                                           ; SOURCE LINE # 365
0046 900000      E     MOV     DPTR,#c_mem+0EH
0049 120000      E     LCALL   ?C?LLDXDATA
004C 8F00        R     MOV     k_p_c+03H,R7
004E 8E00        R     MOV     k_p_c+02H,R6
0050 8D00        R     MOV     k_p_c+01H,R5
0052 8C00        R     MOV     k_p_c,R4
                                           ; SOURCE LINE # 366
0054 900000      E     MOV     DPTR,#c_mem+012H
0057 120000      E     LCALL   ?C?LLDXDATA
005A 8F00        R     MOV     k_i_c+03H,R7
005C 8E00        R     MOV     k_i_c+02H,R6
005E 8D00        R     MOV     k_i_c+01H,R5
0060 8C00        R     MOV     k_i_c,R4
                                           ; SOURCE LINE # 367
0062 900000      E     MOV     DPTR,#c_mem+016H
0065 120000      E     LCALL   ?C?LLDXDATA
0068 8F00        R     MOV     k_d_c+03H,R7
006A 8E00        R     MOV     k_d_c+02H,R6
006C 8D00        R     MOV     k_d_c+01H,R5
006E 8C00        R     MOV     k_d_c,R4
                                           ; SOURCE LINE # 381
0070 E500        R     MOV     A,index
0072 C3                CLR     C
0073 9402              SUBB    A,#02H
0075 4003              JC      $ + 5H
0077 020000      R     LJMP    ?C0041
007A         ?C0040:
                                           ; SOURCE LINE # 384
007A 900000      E     MOV     DPTR,#c_mem+01EH
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 120000      E     LCALL   ?C?CCASE
0083 0000        R     DW      ?C0043
0085 00                DB      00H
0086 0000        R     DW      ?C0104
0088 01                DB      01H
0089 0000        R     DW      ?C0089
008B 02                DB      02H
008C 0000        R     DW      ?C0063
008E 03                DB      03H
008F 0000              DW      00H
0091 0000        R     DW      ?C0042
                                           ; SOURCE LINE # 385
0093         ?C0043:
                                           ; SOURCE LINE # 388
0093 AF00        R     MOV     R7,index
0095 EF                MOV     A,R7
0096 25E0              ADD     A,ACC
0098 25E0              ADD     A,ACC
009A 2400        E     ADD     A,#LOW g_meas
009C F582              MOV     DPL,A
009E E4                CLR     A
009F 3400        E     ADDC    A,#HIGH g_meas
00A1 F583              MOV     DPH,A
00A3 120000      E     LCALL   ?C?LLDXDATA0
00A6 AF00        R     MOV     R7,index
00A8 EF                MOV     A,R7
00A9 25E0              ADD     A,ACC
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 27  

00AB 25E0              ADD     A,ACC
00AD 2400        E     ADD     A,#LOW g_ref
00AF F582              MOV     DPL,A
00B1 E4                CLR     A
00B2 3400        E     ADDC    A,#HIGH g_ref
00B4 F583              MOV     DPH,A
00B6 120000      E     LCALL   ?C?LLDXDATA
00B9 120000      E     LCALL   ?C?LSUB
00BC 8F00        R     MOV     pos_error+03H,R7
00BE 8E00        R     MOV     pos_error+02H,R6
00C0 8D00        R     MOV     pos_error+01H,R5
00C2 8C00        R     MOV     pos_error,R4
                                           ; SOURCE LINE # 390
00C4 300005            JNB     interrupt_flag,?C0044
                                           ; SOURCE LINE # 391
00C7 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 392
00C9 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 393
00CC         ?C0044:
                                           ; SOURCE LINE # 396
00CC AF00        R     MOV     R7,index
00CE EF                MOV     A,R7
00CF 25E0              ADD     A,ACC
00D1 25E0              ADD     A,ACC
00D3 2400        R     ADD     A,#LOW pos_error_sum
00D5 F582              MOV     DPL,A
00D7 E4                CLR     A
00D8 3400        R     ADDC    A,#HIGH pos_error_sum
00DA F583              MOV     DPH,A
00DC C083              PUSH    DPH
00DE C082              PUSH    DPL
00E0 120000      E     LCALL   ?C?LLDXDATA
00E3 EF                MOV     A,R7
00E4 2500        R     ADD     A,pos_error+03H
00E6 FF                MOV     R7,A
00E7 EE                MOV     A,R6
00E8 3500        R     ADDC    A,pos_error+02H
00EA FE                MOV     R6,A
00EB ED                MOV     A,R5
00EC 3500        R     ADDC    A,pos_error+01H
00EE FD                MOV     R5,A
00EF EC                MOV     A,R4
00F0 3500        R     ADDC    A,pos_error
00F2 FC                MOV     R4,A
00F3 D082              POP     DPL
00F5 D083              POP     DPH
00F7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 399
00FA AF00        R     MOV     R7,index
00FC EF                MOV     A,R7
00FD 25E0              ADD     A,ACC
00FF 25E0              ADD     A,ACC
0101 2400        R     ADD     A,#LOW pos_error_sum
0103 F582              MOV     DPL,A
0105 E4                CLR     A
0106 3400        R     ADDC    A,#HIGH pos_error_sum
0108 F583              MOV     DPH,A
010A 120000      E     LCALL   ?C?LLDXDATA
010D 7BA0              MOV     R3,#0A0H
010F 7A86              MOV     R2,#086H
0111 7901              MOV     R1,#01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 28  

0113 7800              MOV     R0,#00H
0115 C3                CLR     C
0116 120000      E     LCALL   ?C?SLCMP
0119 501D              JNC     ?C0045
                                           ; SOURCE LINE # 400
011B 7FA0              MOV     R7,#0A0H
011D 7E86              MOV     R6,#086H
011F 7D01              MOV     R5,#01H
0121 7C00              MOV     R4,#00H
0123 AB00        R     MOV     R3,index
0125 EB                MOV     A,R3
0126 25E0              ADD     A,ACC
0128 25E0              ADD     A,ACC
012A 2400        R     ADD     A,#LOW pos_error_sum
012C F582              MOV     DPL,A
012E E4                CLR     A
012F 3400        R     ADDC    A,#HIGH pos_error_sum
0131 F583              MOV     DPH,A
0133 120000      E     LCALL   ?C?LSTXDATA
0136 803C              SJMP    ?C0046
0138         ?C0045:
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
0138 AF00        R     MOV     R7,index
013A EF                MOV     A,R7
013B 25E0              ADD     A,ACC
013D 25E0              ADD     A,ACC
013F 2400        R     ADD     A,#LOW pos_error_sum
0141 F582              MOV     DPL,A
0143 E4                CLR     A
0144 3400        R     ADDC    A,#HIGH pos_error_sum
0146 F583              MOV     DPH,A
0148 120000      E     LCALL   ?C?LLDXDATA
014B 7B60              MOV     R3,#060H
014D 7A79              MOV     R2,#079H
014F 79FE              MOV     R1,#0FEH
0151 78FF              MOV     R0,#0FFH
0153 D3                SETB    C
0154 120000      E     LCALL   ?C?SLCMP
0157 401B              JC      ?C0046
                                           ; SOURCE LINE # 403
0159 7F60              MOV     R7,#060H
015B 7E79              MOV     R6,#079H
015D 7DFE              MOV     R5,#0FEH
015F 7CFF              MOV     R4,#0FFH
0161 AB00        R     MOV     R3,index
0163 EB                MOV     A,R3
0164 25E0              ADD     A,ACC
0166 25E0              ADD     A,ACC
0168 2400        R     ADD     A,#LOW pos_error_sum
016A F582              MOV     DPL,A
016C E4                CLR     A
016D 3400        R     ADDC    A,#HIGH pos_error_sum
016F F583              MOV     DPH,A
0171 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 404
0174         ?C0046:
                                           ; SOURCE LINE # 406
0174 300005            JNB     interrupt_flag,?C0048
                                           ; SOURCE LINE # 407
0177 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 408
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 29  

0179 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 409
017C         ?C0048:
                                           ; SOURCE LINE # 411
017C 7F00              MOV     R7,#00H
017E 7E00              MOV     R6,#00H
0180 7D00              MOV     R5,#00H
0182 7C00              MOV     R4,#00H
0184 8F00        R     MOV     pwm_input+03H,R7
0186 8E00        R     MOV     pwm_input+02H,R6
0188 8D00        R     MOV     pwm_input+01H,R5
018A 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 413
018C 7F00              MOV     R7,#00H
018E 7E00              MOV     R6,#00H
0190 7D00              MOV     R5,#00H
0192 7C00              MOV     R4,#00H
0194 AB00        R     MOV     R3,k_p+03H
0196 AA00        R     MOV     R2,k_p+02H
0198 A900        R     MOV     R1,k_p+01H
019A A800        R     MOV     R0,k_p
019C C3                CLR     C
019D 120000      E     LCALL   ?C?SLCMP
01A0 6073              JZ      ?C0049
                                           ; SOURCE LINE # 415
01A2 7F00              MOV     R7,#00H
01A4 7E00              MOV     R6,#00H
01A6 7D02              MOV     R5,#02H
01A8 7C00              MOV     R4,#00H
01AA AB00        R     MOV     R3,pos_error+03H
01AC AA00        R     MOV     R2,pos_error+02H
01AE A900        R     MOV     R1,pos_error+01H
01B0 A800        R     MOV     R0,pos_error
01B2 D3                SETB    C
01B3 120000      E     LCALL   ?C?SLCMP
01B6 5016              JNC     ?C0051
01B8 7F00              MOV     R7,#00H
01BA 7E00              MOV     R6,#00H
01BC 7DFE              MOV     R5,#0FEH
01BE 7CFF              MOV     R4,#0FFH
01C0 AB00        R     MOV     R3,pos_error+03H
01C2 AA00        R     MOV     R2,pos_error+02H
01C4 A900        R     MOV     R1,pos_error+01H
01C6 A800        R     MOV     R0,pos_error
01C8 C3                CLR     C
01C9 120000      E     LCALL   ?C?SLCMP
01CC 5027              JNC     ?C0050
01CE         ?C0051:
                                           ; SOURCE LINE # 416
01CE AF00        R     MOV     R7,pos_error+03H
01D0 AE00        R     MOV     R6,pos_error+02H
01D2 AD00        R     MOV     R5,pos_error+01H
01D4 AC00        R     MOV     R4,pos_error
01D6 7808              MOV     R0,#08H
01D8 120000      E     LCALL   ?C?SLSHR
01DB AB00        R     MOV     R3,k_p+03H
01DD AA00        R     MOV     R2,k_p+02H
01DF A900        R     MOV     R1,k_p+01H
01E1 A800        R     MOV     R0,k_p
01E3 120000      E     LCALL   ?C?LMUL
01E6 7808              MOV     R0,#08H
01E8 120000      E     LCALL   ?C?SLSHR
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 30  

01EB 8F00        R     MOV     pwm_input+03H,R7
01ED 8E00        R     MOV     pwm_input+02H,R6
01EF 8D00        R     MOV     pwm_input+01H,R5
01F1 8C00        R     MOV     pwm_input,R4
01F3 8020              SJMP    ?C0049
01F5         ?C0050:
                                           ; SOURCE LINE # 418
01F5 AF00        R     MOV     R7,pos_error+03H
01F7 AE00        R     MOV     R6,pos_error+02H
01F9 AD00        R     MOV     R5,pos_error+01H
01FB AC00        R     MOV     R4,pos_error
01FD AB00        R     MOV     R3,k_p+03H
01FF AA00        R     MOV     R2,k_p+02H
0201 A900        R     MOV     R1,k_p+01H
0203 A800        R     MOV     R0,k_p
0205 120000      E     LCALL   ?C?LMUL
0208 7810              MOV     R0,#010H
020A 120000      E     LCALL   ?C?SLSHR
020D 8F00        R     MOV     pwm_input+03H,R7
020F 8E00        R     MOV     pwm_input+02H,R6
0211 8D00        R     MOV     pwm_input+01H,R5
0213 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 419
0215         ?C0049:
                                           ; SOURCE LINE # 421
0215 300005            JNB     interrupt_flag,?C0053
                                           ; SOURCE LINE # 422
0218 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 423
021A 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 424
021D         ?C0053:
                                           ; SOURCE LINE # 427
021D 7F00              MOV     R7,#00H
021F 7E00              MOV     R6,#00H
0221 7D00              MOV     R5,#00H
0223 7C00              MOV     R4,#00H
0225 AB00        R     MOV     R3,k_i+03H
0227 AA00        R     MOV     R2,k_i+02H
0229 A900        R     MOV     R1,k_i+01H
022B A800        R     MOV     R0,k_i
022D C3                CLR     C
022E 120000      E     LCALL   ?C?SLCMP
0231 6040              JZ      ?C0054
                                           ; SOURCE LINE # 428
0233 AF00        R     MOV     R7,k_i+03H
0235 AE00        R     MOV     R6,k_i+02H
0237 AD00        R     MOV     R5,k_i+01H
0239 AC00        R     MOV     R4,k_i
023B 7806              MOV     R0,#06H
023D 120000      E     LCALL   ?C?SLSHR
0240 AB00        R     MOV     R3,index
0242 EB                MOV     A,R3
0243 25E0              ADD     A,ACC
0245 25E0              ADD     A,ACC
0247 2400        R     ADD     A,#LOW pos_error_sum
0249 F582              MOV     DPL,A
024B E4                CLR     A
024C 3400        R     ADDC    A,#HIGH pos_error_sum
024E F583              MOV     DPH,A
0250 120000      E     LCALL   ?C?LLDXDATA0
0253 120000      E     LCALL   ?C?LMUL
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 31  

0256 780A              MOV     R0,#0AH
0258 120000      E     LCALL   ?C?SLSHR
025B E500        R     MOV     A,pwm_input+03H
025D 2F                ADD     A,R7
025E FF                MOV     R7,A
025F E500        R     MOV     A,pwm_input+02H
0261 3E                ADDC    A,R6
0262 FE                MOV     R6,A
0263 E500        R     MOV     A,pwm_input+01H
0265 3D                ADDC    A,R5
0266 FD                MOV     R5,A
0267 E500        R     MOV     A,pwm_input
0269 3C                ADDC    A,R4
026A FC                MOV     R4,A
026B 8F00        R     MOV     pwm_input+03H,R7
026D 8E00        R     MOV     pwm_input+02H,R6
026F 8D00        R     MOV     pwm_input+01H,R5
0271 8C00        R     MOV     pwm_input,R4
0273         ?C0054:
                                           ; SOURCE LINE # 431
0273 7F00              MOV     R7,#00H
0275 7E00              MOV     R6,#00H
0277 7D00              MOV     R5,#00H
0279 7C00              MOV     R4,#00H
027B AB00        R     MOV     R3,k_d+03H
027D AA00        R     MOV     R2,k_d+02H
027F A900        R     MOV     R1,k_d+01H
0281 A800        R     MOV     R0,k_d
0283 C3                CLR     C
0284 120000      E     LCALL   ?C?SLCMP
0287 6051              JZ      ?C0055
                                           ; SOURCE LINE # 432
0289 AF00        R     MOV     R7,index
028B EF                MOV     A,R7
028C 25E0              ADD     A,ACC
028E 25E0              ADD     A,ACC
0290 2400        E     ADD     A,#LOW g_meas
0292 F582              MOV     DPL,A
0294 E4                CLR     A
0295 3400        E     ADDC    A,#HIGH g_meas
0297 F583              MOV     DPH,A
0299 120000      E     LCALL   ?C?LLDXDATA0
029C AF00        R     MOV     R7,index
029E EF                MOV     A,R7
029F 25E0              ADD     A,ACC
02A1 25E0              ADD     A,ACC
02A3 2400        E     ADD     A,#LOW g_measOld
02A5 F582              MOV     DPL,A
02A7 E4                CLR     A
02A8 3400        E     ADDC    A,#HIGH g_measOld
02AA F583              MOV     DPH,A
02AC 120000      E     LCALL   ?C?LLDXDATA
02AF 120000      E     LCALL   ?C?LSUB
02B2 AB00        R     MOV     R3,k_d+03H
02B4 AA00        R     MOV     R2,k_d+02H
02B6 A900        R     MOV     R1,k_d+01H
02B8 A800        R     MOV     R0,k_d
02BA 120000      E     LCALL   ?C?LMUL
02BD 7810              MOV     R0,#010H
02BF 120000      E     LCALL   ?C?SLSHR
02C2 E500        R     MOV     A,pwm_input+03H
02C4 2F                ADD     A,R7
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 32  

02C5 FF                MOV     R7,A
02C6 E500        R     MOV     A,pwm_input+02H
02C8 3E                ADDC    A,R6
02C9 FE                MOV     R6,A
02CA E500        R     MOV     A,pwm_input+01H
02CC 3D                ADDC    A,R5
02CD FD                MOV     R5,A
02CE E500        R     MOV     A,pwm_input
02D0 3C                ADDC    A,R4
02D1 FC                MOV     R4,A
02D2 8F00        R     MOV     pwm_input+03H,R7
02D4 8E00        R     MOV     pwm_input+02H,R6
02D6 8D00        R     MOV     pwm_input+01H,R5
02D8 8C00        R     MOV     pwm_input,R4
02DA         ?C0055:
                                           ; SOURCE LINE # 435
02DA 300005            JNB     interrupt_flag,?C0056
                                           ; SOURCE LINE # 436
02DD C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 437
02DF 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 438
02E2         ?C0056:
                                           ; SOURCE LINE # 443
02E2 E500        R     MOV     A,index
02E4 7020              JNZ     ?C0057
                                           ; SOURCE LINE # 444
02E6 7F00              MOV     R7,#00H
02E8 7E00              MOV     R6,#00H
02EA 7D00              MOV     R5,#00H
02EC 7C00              MOV     R4,#00H
02EE AB00        R     MOV     R3,pwm_input+03H
02F0 AA00        R     MOV     R2,pwm_input+02H
02F2 A900        R     MOV     R1,pwm_input+01H
02F4 A800        R     MOV     R0,pwm_input
02F6 C3                CLR     C
02F7 120000      E     LCALL   ?C?SLCMP
02FA 4005              JC      ?C0058
                                           ; SOURCE LINE # 445
02FC D200        R     SETB    dirM0
02FE 020000      R     LJMP    ?C0042
0301         ?C0058:
                                           ; SOURCE LINE # 448
0301 C200        R     CLR     dirM0
                                           ; SOURCE LINE # 450
0303 020000      R     LJMP    ?C0042
0306         ?C0057:
                                           ; SOURCE LINE # 451
0306 7F00              MOV     R7,#00H
0308 7E00              MOV     R6,#00H
030A 7D00              MOV     R5,#00H
030C 7C00              MOV     R4,#00H
030E AB00        R     MOV     R3,pwm_input+03H
0310 AA00        R     MOV     R2,pwm_input+02H
0312 A900        R     MOV     R1,pwm_input+01H
0314 A800        R     MOV     R0,pwm_input
0316 C3                CLR     C
0317 120000      E     LCALL   ?C?SLCMP
031A 4005              JC      ?C0061
                                           ; SOURCE LINE # 452
031C D200        R     SETB    dirM1
031E 020000      R     LJMP    ?C0042
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 33  

0321         ?C0061:
                                           ; SOURCE LINE # 455
0321 C200        R     CLR     dirM1
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 459
0323 020000      R     LJMP    ?C0042
                                           ; SOURCE LINE # 461
0326         ?C0063:
                                           ; SOURCE LINE # 462
0326 AF00        R     MOV     R7,index
0328 EF                MOV     A,R7
0329 25E0              ADD     A,ACC
032B 25E0              ADD     A,ACC
032D 2400        E     ADD     A,#LOW g_meas
032F F582              MOV     DPL,A
0331 E4                CLR     A
0332 3400        E     ADDC    A,#HIGH g_meas
0334 F583              MOV     DPH,A
0336 120000      E     LCALL   ?C?LLDXDATA0
0339 AF00        R     MOV     R7,index
033B EF                MOV     A,R7
033C 25E0              ADD     A,ACC
033E 25E0              ADD     A,ACC
0340 2400        E     ADD     A,#LOW g_ref
0342 F582              MOV     DPL,A
0344 E4                CLR     A
0345 3400        E     ADDC    A,#HIGH g_ref
0347 F583              MOV     DPH,A
0349 120000      E     LCALL   ?C?LLDXDATA
034C 120000      E     LCALL   ?C?LSUB
034F 8F00        R     MOV     pos_error+03H,R7
0351 8E00        R     MOV     pos_error+02H,R6
0353 8D00        R     MOV     pos_error+01H,R5
0355 8C00        R     MOV     pos_error,R4
                                           ; SOURCE LINE # 466
0357 7F00              MOV     R7,#00H
0359 7E00              MOV     R6,#00H
035B 7D00              MOV     R5,#00H
035D 7C00              MOV     R4,#00H
035F 8F00        R     MOV     curr_ref+03H,R7
0361 8E00        R     MOV     curr_ref+02H,R6
0363 8D00        R     MOV     curr_ref+01H,R5
0365 8C00        R     MOV     curr_ref,R4
                                           ; SOURCE LINE # 469
0367 7F00              MOV     R7,#00H
0369 7E00              MOV     R6,#00H
036B 7D00              MOV     R5,#00H
036D 7C00              MOV     R4,#00H
036F AB00        R     MOV     R3,k_p+03H
0371 AA00        R     MOV     R2,k_p+02H
0373 A900        R     MOV     R1,k_p+01H
0375 A800        R     MOV     R0,k_p
0377 C3                CLR     C
0378 120000      E     LCALL   ?C?SLCMP
037B 7003              JNZ     $ + 5H
037D 020000      R     LJMP    ?C0064
                                           ; SOURCE LINE # 470
0380 7F00              MOV     R7,#00H
0382 7E00              MOV     R6,#00H
0384 7D02              MOV     R5,#02H
0386 7C00              MOV     R4,#00H
0388 AB00        R     MOV     R3,pos_error+03H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 34  

038A AA00        R     MOV     R2,pos_error+02H
038C A900        R     MOV     R1,pos_error+01H
038E A800        R     MOV     R0,pos_error
0390 D3                SETB    C
0391 120000      E     LCALL   ?C?SLCMP
0394 5016              JNC     ?C0066
0396 7F00              MOV     R7,#00H
0398 7E00              MOV     R6,#00H
039A 7DFE              MOV     R5,#0FEH
039C 7CFF              MOV     R4,#0FFH
039E AB00        R     MOV     R3,pos_error+03H
03A0 AA00        R     MOV     R2,pos_error+02H
03A2 A900        R     MOV     R1,pos_error+01H
03A4 A800        R     MOV     R0,pos_error
03A6 C3                CLR     C
03A7 120000      E     LCALL   ?C?SLCMP
03AA 5037              JNC     ?C0065
03AC         ?C0066:
                                           ; SOURCE LINE # 471
03AC AF00        R     MOV     R7,pos_error+03H
03AE AE00        R     MOV     R6,pos_error+02H
03B0 AD00        R     MOV     R5,pos_error+01H
03B2 AC00        R     MOV     R4,pos_error
03B4 7808              MOV     R0,#08H
03B6 120000      E     LCALL   ?C?SLSHR
03B9 AB00        R     MOV     R3,k_p+03H
03BB AA00        R     MOV     R2,k_p+02H
03BD A900        R     MOV     R1,k_p+01H
03BF A800        R     MOV     R0,k_p
03C1 120000      E     LCALL   ?C?LMUL
03C4 7808              MOV     R0,#08H
03C6 120000      E     LCALL   ?C?SLSHR
03C9 E500        R     MOV     A,curr_ref+03H
03CB 2F                ADD     A,R7
03CC FF                MOV     R7,A
03CD E500        R     MOV     A,curr_ref+02H
03CF 3E                ADDC    A,R6
03D0 FE                MOV     R6,A
03D1 E500        R     MOV     A,curr_ref+01H
03D3 3D                ADDC    A,R5
03D4 FD                MOV     R5,A
03D5 E500        R     MOV     A,curr_ref
03D7 3C                ADDC    A,R4
03D8 FC                MOV     R4,A
03D9 8F00        R     MOV     curr_ref+03H,R7
03DB 8E00        R     MOV     curr_ref+02H,R6
03DD 8D00        R     MOV     curr_ref+01H,R5
03DF 8C00        R     MOV     curr_ref,R4
03E1 8030              SJMP    ?C0064
03E3         ?C0065:
                                           ; SOURCE LINE # 473
03E3 AF00        R     MOV     R7,pos_error+03H
03E5 AE00        R     MOV     R6,pos_error+02H
03E7 AD00        R     MOV     R5,pos_error+01H
03E9 AC00        R     MOV     R4,pos_error
03EB AB00        R     MOV     R3,k_p+03H
03ED AA00        R     MOV     R2,k_p+02H
03EF A900        R     MOV     R1,k_p+01H
03F1 A800        R     MOV     R0,k_p
03F3 120000      E     LCALL   ?C?LMUL
03F6 7810              MOV     R0,#010H
03F8 120000      E     LCALL   ?C?SLSHR
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 35  

03FB E500        R     MOV     A,curr_ref+03H
03FD 2F                ADD     A,R7
03FE FF                MOV     R7,A
03FF E500        R     MOV     A,curr_ref+02H
0401 3E                ADDC    A,R6
0402 FE                MOV     R6,A
0403 E500        R     MOV     A,curr_ref+01H
0405 3D                ADDC    A,R5
0406 FD                MOV     R5,A
0407 E500        R     MOV     A,curr_ref
0409 3C                ADDC    A,R4
040A FC                MOV     R4,A
040B 8F00        R     MOV     curr_ref+03H,R7
040D 8E00        R     MOV     curr_ref+02H,R6
040F 8D00        R     MOV     curr_ref+01H,R5
0411 8C00        R     MOV     curr_ref,R4
                                           ; SOURCE LINE # 474
0413         ?C0064:
                                           ; SOURCE LINE # 477
0413 7F00              MOV     R7,#00H
0415 7E00              MOV     R6,#00H
0417 7D00              MOV     R5,#00H
0419 7C00              MOV     R4,#00H
041B AB00        R     MOV     R3,k_i+03H
041D AA00        R     MOV     R2,k_i+02H
041F A900        R     MOV     R1,k_i+01H
0421 A800        R     MOV     R0,k_i
0423 C3                CLR     C
0424 120000      E     LCALL   ?C?SLCMP
0427 603B              JZ      ?C0068
                                           ; SOURCE LINE # 478
0429 AF00        R     MOV     R7,index
042B EF                MOV     A,R7
042C 25E0              ADD     A,ACC
042E 25E0              ADD     A,ACC
0430 2400        R     ADD     A,#LOW pos_error_sum
0432 F582              MOV     DPL,A
0434 E4                CLR     A
0435 3400        R     ADDC    A,#HIGH pos_error_sum
0437 F583              MOV     DPH,A
0439 120000      E     LCALL   ?C?LLDXDATA
043C AB00        R     MOV     R3,k_i+03H
043E AA00        R     MOV     R2,k_i+02H
0440 A900        R     MOV     R1,k_i+01H
0442 A800        R     MOV     R0,k_i
0444 120000      E     LCALL   ?C?LMUL
0447 7810              MOV     R0,#010H
0449 120000      E     LCALL   ?C?SLSHR
044C E500        R     MOV     A,curr_ref+03H
044E 2F                ADD     A,R7
044F FF                MOV     R7,A
0450 E500        R     MOV     A,curr_ref+02H
0452 3E                ADDC    A,R6
0453 FE                MOV     R6,A
0454 E500        R     MOV     A,curr_ref+01H
0456 3D                ADDC    A,R5
0457 FD                MOV     R5,A
0458 E500        R     MOV     A,curr_ref
045A 3C                ADDC    A,R4
045B FC                MOV     R4,A
045C 8F00        R     MOV     curr_ref+03H,R7
045E 8E00        R     MOV     curr_ref+02H,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 36  

0460 8D00        R     MOV     curr_ref+01H,R5
0462 8C00        R     MOV     curr_ref,R4
0464         ?C0068:
                                           ; SOURCE LINE # 481
0464 7F00              MOV     R7,#00H
0466 7E00              MOV     R6,#00H
0468 7D00              MOV     R5,#00H
046A 7C00              MOV     R4,#00H
046C AB00        R     MOV     R3,k_d+03H
046E AA00        R     MOV     R2,k_d+02H
0470 A900        R     MOV     R1,k_d+01H
0472 A800        R     MOV     R0,k_d
0474 C3                CLR     C
0475 120000      E     LCALL   ?C?SLCMP
0478 6051              JZ      ?C0069
                                           ; SOURCE LINE # 482
047A AF00        R     MOV     R7,index
047C EF                MOV     A,R7
047D 25E0              ADD     A,ACC
047F 25E0              ADD     A,ACC
0481 2400        E     ADD     A,#LOW g_meas
0483 F582              MOV     DPL,A
0485 E4                CLR     A
0486 3400        E     ADDC    A,#HIGH g_meas
0488 F583              MOV     DPH,A
048A 120000      E     LCALL   ?C?LLDXDATA0
048D AF00        R     MOV     R7,index
048F EF                MOV     A,R7
0490 25E0              ADD     A,ACC
0492 25E0              ADD     A,ACC
0494 2400        E     ADD     A,#LOW g_measOld
0496 F582              MOV     DPL,A
0498 E4                CLR     A
0499 3400        E     ADDC    A,#HIGH g_measOld
049B F583              MOV     DPH,A
049D 120000      E     LCALL   ?C?LLDXDATA
04A0 120000      E     LCALL   ?C?LSUB
04A3 AB00        R     MOV     R3,k_d+03H
04A5 AA00        R     MOV     R2,k_d+02H
04A7 A900        R     MOV     R1,k_d+01H
04A9 A800        R     MOV     R0,k_d
04AB 120000      E     LCALL   ?C?LMUL
04AE 7810              MOV     R0,#010H
04B0 120000      E     LCALL   ?C?SLSHR
04B3 E500        R     MOV     A,curr_ref+03H
04B5 2F                ADD     A,R7
04B6 FF                MOV     R7,A
04B7 E500        R     MOV     A,curr_ref+02H
04B9 3E                ADDC    A,R6
04BA FE                MOV     R6,A
04BB E500        R     MOV     A,curr_ref+01H
04BD 3D                ADDC    A,R5
04BE FD                MOV     R5,A
04BF E500        R     MOV     A,curr_ref
04C1 3C                ADDC    A,R4
04C2 FC                MOV     R4,A
04C3 8F00        R     MOV     curr_ref+03H,R7
04C5 8E00        R     MOV     curr_ref+02H,R6
04C7 8D00        R     MOV     curr_ref+01H,R5
04C9 8C00        R     MOV     curr_ref,R4
04CB         ?C0069:
                                           ; SOURCE LINE # 486
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 37  

04CB E500        R     MOV     A,index
04CD 7020              JNZ     ?C0070
                                           ; SOURCE LINE # 487
04CF 7F00              MOV     R7,#00H
04D1 7E00              MOV     R6,#00H
04D3 7D00              MOV     R5,#00H
04D5 7C00              MOV     R4,#00H
04D7 AB00        R     MOV     R3,curr_ref+03H
04D9 AA00        R     MOV     R2,curr_ref+02H
04DB A900        R     MOV     R1,curr_ref+01H
04DD A800        R     MOV     R0,curr_ref
04DF C3                CLR     C
04E0 120000      E     LCALL   ?C?SLCMP
04E3 4005              JC      ?C0071
                                           ; SOURCE LINE # 488
04E5 430001      R     ORL     direction,#01H
04E8 8023              SJMP    ?C0073
04EA         ?C0071:
                                           ; SOURCE LINE # 490
04EA 5300FE      R     ANL     direction,#0FEH
                                           ; SOURCE LINE # 491
04ED 801E              SJMP    ?C0073
04EF         ?C0070:
                                           ; SOURCE LINE # 492
04EF 7F00              MOV     R7,#00H
04F1 7E00              MOV     R6,#00H
04F3 7D00              MOV     R5,#00H
04F5 7C00              MOV     R4,#00H
04F7 AB00        R     MOV     R3,curr_ref+03H
04F9 AA00        R     MOV     R2,curr_ref+02H
04FB A900        R     MOV     R1,curr_ref+01H
04FD A800        R     MOV     R0,curr_ref
04FF C3                CLR     C
0500 120000      E     LCALL   ?C?SLCMP
0503 4005              JC      ?C0074
                                           ; SOURCE LINE # 493
0505 430002      R     ORL     direction,#02H
0508 8003              SJMP    ?C0073
050A         ?C0074:
                                           ; SOURCE LINE # 495
050A 5300FD      R     ANL     direction,#0FDH
                                           ; SOURCE LINE # 496
050D         ?C0073:
                                           ; SOURCE LINE # 499
050D AE00        R     MOV     R6,curr_ref+02H
050F AF00        R     MOV     R7,curr_ref+03H
0511 120000      E     LCALL   _abs
0514 EE                MOV     A,R6
0515 33                RLC     A
0516 95E0              SUBB    A,ACC
0518 FD                MOV     R5,A
0519 FC                MOV     R4,A
051A 8F00        R     MOV     curr_ref+03H,R7
051C 8E00        R     MOV     curr_ref+02H,R6
051E 8D00        R     MOV     curr_ref+01H,R5
0520 8C00        R     MOV     curr_ref,R4
                                           ; SOURCE LINE # 502
0522 900000      E     MOV     DPTR,#c_mem+01AH
0525 E0                MOVX    A,@DPTR
0526 FE                MOV     R6,A
0527 A3                INC     DPTR
0528 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 38  

0529 FF                MOV     R7,A
052A EE                MOV     A,R6
052B 33                RLC     A
052C 95E0              SUBB    A,ACC
052E FD                MOV     R5,A
052F FC                MOV     R4,A
0530 AB00        R     MOV     R3,curr_ref+03H
0532 AA00        R     MOV     R2,curr_ref+02H
0534 A900        R     MOV     R1,curr_ref+01H
0536 A800        R     MOV     R0,curr_ref
0538 D3                SETB    C
0539 120000      E     LCALL   ?C?SLCMP
053C 4016              JC      ?C0076
                                           ; SOURCE LINE # 503
053E 900000      E     MOV     DPTR,#c_mem+01AH
0541 E0                MOVX    A,@DPTR
0542 FE                MOV     R6,A
0543 A3                INC     DPTR
0544 E0                MOVX    A,@DPTR
0545 FF                MOV     R7,A
0546 EE                MOV     A,R6
0547 33                RLC     A
0548 95E0              SUBB    A,ACC
054A FD                MOV     R5,A
054B FC                MOV     R4,A
054C 8F00        R     MOV     curr_ref+03H,R7
054E 8E00        R     MOV     curr_ref+02H,R6
0550 8D00        R     MOV     curr_ref+01H,R5
0552 8C00        R     MOV     curr_ref,R4
0554         ?C0076:
                                           ; SOURCE LINE # 506
0554 AF00        R     MOV     R7,index
0556 EF                MOV     A,R7
0557 25E0              ADD     A,ACC
0559 2400        E     ADD     A,#LOW g_meas+0CH
055B F582              MOV     DPL,A
055D E4                CLR     A
055E 3400        E     ADDC    A,#HIGH g_meas+0CH
0560 F583              MOV     DPH,A
0562 E0                MOVX    A,@DPTR
0563 FE                MOV     R6,A
0564 A3                INC     DPTR
0565 E0                MOVX    A,@DPTR
0566 FF                MOV     R7,A
0567 AB07              MOV     R3,AR7
0569 AA06              MOV     R2,AR6
056B EA                MOV     A,R2
056C 33                RLC     A
056D 95E0              SUBB    A,ACC
056F F9                MOV     R1,A
0570 F8                MOV     R0,A
0571 C3                CLR     C
0572 E500        R     MOV     A,curr_ref+03H
0574 9B                SUBB    A,R3
0575 FF                MOV     R7,A
0576 E500        R     MOV     A,curr_ref+02H
0578 9A                SUBB    A,R2
0579 FE                MOV     R6,A
057A E500        R     MOV     A,curr_ref+01H
057C 99                SUBB    A,R1
057D FD                MOV     R5,A
057E E500        R     MOV     A,curr_ref
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 39  

0580 98                SUBB    A,R0
0581 FC                MOV     R4,A
0582 8F00        R     MOV     curr_error+03H,R7
0584 8E00        R     MOV     curr_error+02H,R6
0586 8D00        R     MOV     curr_error+01H,R5
0588 8C00        R     MOV     curr_error,R4
                                           ; SOURCE LINE # 510
058A 7F00              MOV     R7,#00H
058C 7E00              MOV     R6,#00H
058E 7D00              MOV     R5,#00H
0590 7C00              MOV     R4,#00H
0592 8F00        R     MOV     pwm_input+03H,R7
0594 8E00        R     MOV     pwm_input+02H,R6
0596 8D00        R     MOV     pwm_input+01H,R5
0598 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 513
059A 7F00              MOV     R7,#00H
059C 7E00              MOV     R6,#00H
059E 7D00              MOV     R5,#00H
05A0 7C00              MOV     R4,#00H
05A2 900000      E     MOV     DPTR,#c_mem+0EH
05A5 120000      E     LCALL   ?C?LLDXDATA0
05A8 C3                CLR     C
05A9 120000      E     LCALL   ?C?SLCMP
05AC 602E              JZ      ?C0077
                                           ; SOURCE LINE # 514
05AE AF00        R     MOV     R7,curr_error+03H
05B0 AE00        R     MOV     R6,curr_error+02H
05B2 AD00        R     MOV     R5,curr_error+01H
05B4 AC00        R     MOV     R4,curr_error
05B6 900000      E     MOV     DPTR,#c_mem+0EH
05B9 120000      E     LCALL   ?C?LLDXDATA0
05BC 120000      E     LCALL   ?C?LMUL
05BF 7810              MOV     R0,#010H
05C1 120000      E     LCALL   ?C?SLSHR
05C4 E500        R     MOV     A,pwm_input+03H
05C6 2F                ADD     A,R7
05C7 FF                MOV     R7,A
05C8 E500        R     MOV     A,pwm_input+02H
05CA 3E                ADDC    A,R6
05CB FE                MOV     R6,A
05CC E500        R     MOV     A,pwm_input+01H
05CE 3D                ADDC    A,R5
05CF FD                MOV     R5,A
05D0 E500        R     MOV     A,pwm_input
05D2 3C                ADDC    A,R4
05D3 FC                MOV     R4,A
05D4 8F00        R     MOV     pwm_input+03H,R7
05D6 8E00        R     MOV     pwm_input+02H,R6
05D8 8D00        R     MOV     pwm_input+01H,R5
05DA 8C00        R     MOV     pwm_input,R4
05DC         ?C0077:
                                           ; SOURCE LINE # 517
05DC 7F00              MOV     R7,#00H
05DE 7E00              MOV     R6,#00H
05E0 7D00              MOV     R5,#00H
05E2 7C00              MOV     R4,#00H
05E4 900000      E     MOV     DPTR,#c_mem+012H
05E7 120000      E     LCALL   ?C?LLDXDATA0
05EA C3                CLR     C
05EB 120000      E     LCALL   ?C?SLCMP
05EE 6039              JZ      ?C0078
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 40  

                                           ; SOURCE LINE # 518
05F0 AF00        R     MOV     R7,index
05F2 EF                MOV     A,R7
05F3 25E0              ADD     A,ACC
05F5 25E0              ADD     A,ACC
05F7 2400        R     ADD     A,#LOW curr_error_sum
05F9 F582              MOV     DPL,A
05FB E4                CLR     A
05FC 3400        R     ADDC    A,#HIGH curr_error_sum
05FE F583              MOV     DPH,A
0600 120000      E     LCALL   ?C?LLDXDATA
0603 900000      E     MOV     DPTR,#c_mem+012H
0606 120000      E     LCALL   ?C?LLDXDATA0
0609 120000      E     LCALL   ?C?LMUL
060C 7810              MOV     R0,#010H
060E 120000      E     LCALL   ?C?SLSHR
0611 E500        R     MOV     A,pwm_input+03H
0613 2F                ADD     A,R7
0614 FF                MOV     R7,A
0615 E500        R     MOV     A,pwm_input+02H
0617 3E                ADDC    A,R6
0618 FE                MOV     R6,A
0619 E500        R     MOV     A,pwm_input+01H
061B 3D                ADDC    A,R5
061C FD                MOV     R5,A
061D E500        R     MOV     A,pwm_input
061F 3C                ADDC    A,R4
0620 FC                MOV     R4,A
0621 8F00        R     MOV     pwm_input+03H,R7
0623 8E00        R     MOV     pwm_input+02H,R6
0625 8D00        R     MOV     pwm_input+01H,R5
0627 8C00        R     MOV     pwm_input,R4
0629         ?C0078:
                                           ; SOURCE LINE # 521
0629 7F00              MOV     R7,#00H
062B 7E00              MOV     R6,#00H
062D 7D00              MOV     R5,#00H
062F 7C00              MOV     R4,#00H
0631 900000      E     MOV     DPTR,#c_mem+016H
0634 120000      E     LCALL   ?C?LLDXDATA0
0637 C3                CLR     C
0638 120000      E     LCALL   ?C?SLCMP
063B 6059              JZ      ?C0079
                                           ; SOURCE LINE # 522
063D AF00        R     MOV     R7,index
063F EF                MOV     A,R7
0640 25E0              ADD     A,ACC
0642 2400        E     ADD     A,#LOW g_meas+0CH
0644 F582              MOV     DPL,A
0646 E4                CLR     A
0647 3400        E     ADDC    A,#HIGH g_meas+0CH
0649 F583              MOV     DPH,A
064B E0                MOVX    A,@DPTR
064C FE                MOV     R6,A
064D A3                INC     DPTR
064E E0                MOVX    A,@DPTR
064F FF                MOV     R7,A
0650 AB07              MOV     R3,AR7
0652 AA06              MOV     R2,AR6
0654 EA                MOV     A,R2
0655 33                RLC     A
0656 95E0              SUBB    A,ACC
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 41  

0658 F9                MOV     R1,A
0659 F8                MOV     R0,A
065A AF00        R     MOV     R7,index
065C EF                MOV     A,R7
065D 25E0              ADD     A,ACC
065F 25E0              ADD     A,ACC
0661 2400        R     ADD     A,#LOW prev_curr
0663 F582              MOV     DPL,A
0665 E4                CLR     A
0666 3400        R     ADDC    A,#HIGH prev_curr
0668 F583              MOV     DPH,A
066A 120000      E     LCALL   ?C?LLDXDATA
066D 120000      E     LCALL   ?C?LSUB
0670 900000      E     MOV     DPTR,#c_mem+016H
0673 120000      E     LCALL   ?C?LLDXDATA0
0676 120000      E     LCALL   ?C?LMUL
0679 7810              MOV     R0,#010H
067B 120000      E     LCALL   ?C?SLSHR
067E E500        R     MOV     A,pwm_input+03H
0680 2F                ADD     A,R7
0681 FF                MOV     R7,A
0682 E500        R     MOV     A,pwm_input+02H
0684 3E                ADDC    A,R6
0685 FE                MOV     R6,A
0686 E500        R     MOV     A,pwm_input+01H
0688 3D                ADDC    A,R5
0689 FD                MOV     R5,A
068A E500        R     MOV     A,pwm_input
068C 3C                ADDC    A,R4
068D FC                MOV     R4,A
068E 8F00        R     MOV     pwm_input+03H,R7
0690 8E00        R     MOV     pwm_input+02H,R6
0692 8D00        R     MOV     pwm_input+01H,R5
0694 8C00        R     MOV     pwm_input,R4
0696         ?C0079:
                                           ; SOURCE LINE # 526
0696 7F00              MOV     R7,#00H
0698 7E00              MOV     R6,#00H
069A 7D00              MOV     R5,#00H
069C 7C00              MOV     R4,#00H
069E AB00        R     MOV     R3,pwm_input+03H
06A0 AA00        R     MOV     R2,pwm_input+02H
06A2 A900        R     MOV     R1,pwm_input+01H
06A4 A800        R     MOV     R0,pwm_input
06A6 C3                CLR     C
06A7 120000      E     LCALL   ?C?SLCMP
06AA 5012              JNC     ?C0080
                                           ; SOURCE LINE # 527
06AC 7F00              MOV     R7,#00H
06AE 7E00              MOV     R6,#00H
06B0 7D00              MOV     R5,#00H
06B2 7C00              MOV     R4,#00H
06B4 8F00        R     MOV     pwm_input+03H,R7
06B6 8E00        R     MOV     pwm_input+02H,R6
06B8 8D00        R     MOV     pwm_input+01H,R5
06BA 8C00        R     MOV     pwm_input,R4
06BC 8026              SJMP    ?C0081
06BE         ?C0080:
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
06BE 7F64              MOV     R7,#064H
06C0 7E00              MOV     R6,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 42  

06C2 7D00              MOV     R5,#00H
06C4 7C00              MOV     R4,#00H
06C6 AB00        R     MOV     R3,pwm_input+03H
06C8 AA00        R     MOV     R2,pwm_input+02H
06CA A900        R     MOV     R1,pwm_input+01H
06CC A800        R     MOV     R0,pwm_input
06CE D3                SETB    C
06CF 120000      E     LCALL   ?C?SLCMP
06D2 4010              JC      ?C0081
                                           ; SOURCE LINE # 530
06D4 7F64              MOV     R7,#064H
06D6 7E00              MOV     R6,#00H
06D8 7D00              MOV     R5,#00H
06DA 7C00              MOV     R4,#00H
06DC 8F00        R     MOV     pwm_input+03H,R7
06DE 8E00        R     MOV     pwm_input+02H,R6
06E0 8D00        R     MOV     pwm_input+01H,R5
06E2 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 531
06E4         ?C0081:
                                           ; SOURCE LINE # 534
06E4 AF00        R     MOV     R7,index
06E6 EF                MOV     A,R7
06E7 25E0              ADD     A,ACC
06E9 25E0              ADD     A,ACC
06EB 2400        R     ADD     A,#LOW pos_error_sum
06ED F582              MOV     DPL,A
06EF E4                CLR     A
06F0 3400        R     ADDC    A,#HIGH pos_error_sum
06F2 F583              MOV     DPH,A
06F4 C083              PUSH    DPH
06F6 C082              PUSH    DPL
06F8 120000      E     LCALL   ?C?LLDXDATA
06FB EF                MOV     A,R7
06FC 2500        R     ADD     A,pos_error+03H
06FE FF                MOV     R7,A
06FF EE                MOV     A,R6
0700 3500        R     ADDC    A,pos_error+02H
0702 FE                MOV     R6,A
0703 ED                MOV     A,R5
0704 3500        R     ADDC    A,pos_error+01H
0706 FD                MOV     R5,A
0707 EC                MOV     A,R4
0708 3500        R     ADDC    A,pos_error
070A FC                MOV     R4,A
070B D082              POP     DPL
070D D083              POP     DPH
070F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 535
0712 AF00        R     MOV     R7,index
0714 EF                MOV     A,R7
0715 25E0              ADD     A,ACC
0717 25E0              ADD     A,ACC
0719 2400        R     ADD     A,#LOW curr_error_sum
071B F582              MOV     DPL,A
071D E4                CLR     A
071E 3400        R     ADDC    A,#HIGH curr_error_sum
0720 F583              MOV     DPH,A
0722 C083              PUSH    DPH
0724 C082              PUSH    DPL
0726 120000      E     LCALL   ?C?LLDXDATA
0729 EF                MOV     A,R7
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 43  

072A 2500        R     ADD     A,curr_error+03H
072C FF                MOV     R7,A
072D EE                MOV     A,R6
072E 3500        R     ADDC    A,curr_error+02H
0730 FE                MOV     R6,A
0731 ED                MOV     A,R5
0732 3500        R     ADDC    A,curr_error+01H
0734 FD                MOV     R5,A
0735 EC                MOV     A,R4
0736 3500        R     ADDC    A,curr_error
0738 FC                MOV     R4,A
0739 D082              POP     DPL
073B D083              POP     DPH
073D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 538
0740 AF00        R     MOV     R7,index
0742 EF                MOV     A,R7
0743 25E0              ADD     A,ACC
0745 25E0              ADD     A,ACC
0747 2400        R     ADD     A,#LOW pos_error_sum
0749 F582              MOV     DPL,A
074B E4                CLR     A
074C 3400        R     ADDC    A,#HIGH pos_error_sum
074E F583              MOV     DPH,A
0750 120000      E     LCALL   ?C?LLDXDATA
0753 7BA0              MOV     R3,#0A0H
0755 7A86              MOV     R2,#086H
0757 7901              MOV     R1,#01H
0759 7800              MOV     R0,#00H
075B C3                CLR     C
075C 120000      E     LCALL   ?C?SLCMP
075F 501D              JNC     ?C0083
                                           ; SOURCE LINE # 539
0761 7FA0              MOV     R7,#0A0H
0763 7E86              MOV     R6,#086H
0765 7D01              MOV     R5,#01H
0767 7C00              MOV     R4,#00H
0769 AB00        R     MOV     R3,index
076B EB                MOV     A,R3
076C 25E0              ADD     A,ACC
076E 25E0              ADD     A,ACC
0770 2400        R     ADD     A,#LOW pos_error_sum
0772 F582              MOV     DPL,A
0774 E4                CLR     A
0775 3400        R     ADDC    A,#HIGH pos_error_sum
0777 F583              MOV     DPH,A
0779 120000      E     LCALL   ?C?LSTXDATA
077C 803C              SJMP    ?C0084
077E         ?C0083:
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
077E AF00        R     MOV     R7,index
0780 EF                MOV     A,R7
0781 25E0              ADD     A,ACC
0783 25E0              ADD     A,ACC
0785 2400        R     ADD     A,#LOW pos_error_sum
0787 F582              MOV     DPL,A
0789 E4                CLR     A
078A 3400        R     ADDC    A,#HIGH pos_error_sum
078C F583              MOV     DPH,A
078E 120000      E     LCALL   ?C?LLDXDATA
0791 7B60              MOV     R3,#060H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 44  

0793 7A79              MOV     R2,#079H
0795 79FE              MOV     R1,#0FEH
0797 78FF              MOV     R0,#0FFH
0799 D3                SETB    C
079A 120000      E     LCALL   ?C?SLCMP
079D 401B              JC      ?C0084
                                           ; SOURCE LINE # 542
079F 7F60              MOV     R7,#060H
07A1 7E79              MOV     R6,#079H
07A3 7DFE              MOV     R5,#0FEH
07A5 7CFF              MOV     R4,#0FFH
07A7 AB00        R     MOV     R3,index
07A9 EB                MOV     A,R3
07AA 25E0              ADD     A,ACC
07AC 25E0              ADD     A,ACC
07AE 2400        R     ADD     A,#LOW pos_error_sum
07B0 F582              MOV     DPL,A
07B2 E4                CLR     A
07B3 3400        R     ADDC    A,#HIGH pos_error_sum
07B5 F583              MOV     DPH,A
07B7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 543
07BA         ?C0084:
                                           ; SOURCE LINE # 545
07BA AF00        R     MOV     R7,index
07BC EF                MOV     A,R7
07BD 25E0              ADD     A,ACC
07BF 25E0              ADD     A,ACC
07C1 2400        R     ADD     A,#LOW curr_error_sum
07C3 F582              MOV     DPL,A
07C5 E4                CLR     A
07C6 3400        R     ADDC    A,#HIGH curr_error_sum
07C8 F583              MOV     DPH,A
07CA 120000      E     LCALL   ?C?LLDXDATA
07CD 7BA0              MOV     R3,#0A0H
07CF 7A86              MOV     R2,#086H
07D1 7901              MOV     R1,#01H
07D3 7800              MOV     R0,#00H
07D5 C3                CLR     C
07D6 120000      E     LCALL   ?C?SLCMP
07D9 501D              JNC     ?C0086
                                           ; SOURCE LINE # 546
07DB 7FA0              MOV     R7,#0A0H
07DD 7E86              MOV     R6,#086H
07DF 7D01              MOV     R5,#01H
07E1 7C00              MOV     R4,#00H
07E3 AB00        R     MOV     R3,index
07E5 EB                MOV     A,R3
07E6 25E0              ADD     A,ACC
07E8 25E0              ADD     A,ACC
07EA 2400        R     ADD     A,#LOW curr_error_sum
07EC F582              MOV     DPL,A
07EE E4                CLR     A
07EF 3400        R     ADDC    A,#HIGH curr_error_sum
07F1 F583              MOV     DPH,A
07F3 120000      E     LCALL   ?C?LSTXDATA
07F6 803C              SJMP    ?C0087
07F8         ?C0086:
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
07F8 AF00        R     MOV     R7,index
07FA EF                MOV     A,R7
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 45  

07FB 25E0              ADD     A,ACC
07FD 25E0              ADD     A,ACC
07FF 2400        R     ADD     A,#LOW curr_error_sum
0801 F582              MOV     DPL,A
0803 E4                CLR     A
0804 3400        R     ADDC    A,#HIGH curr_error_sum
0806 F583              MOV     DPH,A
0808 120000      E     LCALL   ?C?LLDXDATA
080B 7B60              MOV     R3,#060H
080D 7A79              MOV     R2,#079H
080F 79FE              MOV     R1,#0FEH
0811 78FF              MOV     R0,#0FFH
0813 D3                SETB    C
0814 120000      E     LCALL   ?C?SLCMP
0817 401B              JC      ?C0087
                                           ; SOURCE LINE # 549
0819 7F60              MOV     R7,#060H
081B 7E79              MOV     R6,#079H
081D 7DFE              MOV     R5,#0FEH
081F 7CFF              MOV     R4,#0FFH
0821 AB00        R     MOV     R3,index
0823 EB                MOV     A,R3
0824 25E0              ADD     A,ACC
0826 25E0              ADD     A,ACC
0828 2400        R     ADD     A,#LOW curr_error_sum
082A F582              MOV     DPL,A
082C E4                CLR     A
082D 3400        R     ADDC    A,#HIGH curr_error_sum
082F F583              MOV     DPH,A
0831 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 550
0834         ?C0087:
                                           ; SOURCE LINE # 556
0834 AF00        R     MOV     R7,index
0836 EF                MOV     A,R7
0837 25E0              ADD     A,ACC
0839 2400        E     ADD     A,#LOW g_meas+0CH
083B F582              MOV     DPL,A
083D E4                CLR     A
083E 3400        E     ADDC    A,#HIGH g_meas+0CH
0840 F583              MOV     DPH,A
0842 E0                MOVX    A,@DPTR
0843 FE                MOV     R6,A
0844 A3                INC     DPTR
0845 E0                MOVX    A,@DPTR
0846 FF                MOV     R7,A
0847 EE                MOV     A,R6
0848 33                RLC     A
0849 95E0              SUBB    A,ACC
084B FD                MOV     R5,A
084C FC                MOV     R4,A
084D AB00        R     MOV     R3,index
084F EB                MOV     A,R3
0850 25E0              ADD     A,ACC
0852 25E0              ADD     A,ACC
0854 2400        R     ADD     A,#LOW prev_curr
0856 F582              MOV     DPL,A
0858 E4                CLR     A
0859 3400        R     ADDC    A,#HIGH prev_curr
085B F583              MOV     DPH,A
085D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 558
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 46  

0860 020000      R     LJMP    ?C0042
                                           ; SOURCE LINE # 560
0863         ?C0089:
                                           ; SOURCE LINE # 563
0863 AF00        R     MOV     R7,index
0865 EF                MOV     A,R7
0866 25E0              ADD     A,ACC
0868 25E0              ADD     A,ACC
086A 2400        E     ADD     A,#LOW g_ref
086C F582              MOV     DPL,A
086E E4                CLR     A
086F 3400        E     ADDC    A,#HIGH g_ref
0871 F583              MOV     DPH,A
0873 120000      E     LCALL   ?C?LLDXDATA
0876 AB00        R     MOV     R3,index
0878 7400        E     MOV     A,#LOW g_mem+01FH
087A 2B                ADD     A,R3
087B F582              MOV     DPL,A
087D E4                CLR     A
087E 3400        E     ADDC    A,#HIGH g_mem+01FH
0880 F583              MOV     DPH,A
0882 E0                MOVX    A,@DPTR
0883 F9                MOV     R1,A
0884 A801              MOV     R0,AR1
0886 120000      E     LCALL   ?C?SLSHR
0889 8F00        R     MOV     curr_ref+03H,R7
088B 8E00        R     MOV     curr_ref+02H,R6
088D 8D00        R     MOV     curr_ref+01H,R5
088F 8C00        R     MOV     curr_ref,R4
                                           ; SOURCE LINE # 566
0891 900000      E     MOV     DPTR,#c_mem+01AH
0894 E0                MOVX    A,@DPTR
0895 FE                MOV     R6,A
0896 A3                INC     DPTR
0897 E0                MOVX    A,@DPTR
0898 FF                MOV     R7,A
0899 EE                MOV     A,R6
089A 33                RLC     A
089B 95E0              SUBB    A,ACC
089D FD                MOV     R5,A
089E FC                MOV     R4,A
089F AB00        R     MOV     R3,curr_ref+03H
08A1 AA00        R     MOV     R2,curr_ref+02H
08A3 A900        R     MOV     R1,curr_ref+01H
08A5 A800        R     MOV     R0,curr_ref
08A7 D3                SETB    C
08A8 120000      E     LCALL   ?C?SLCMP
08AB 4016              JC      ?C0090
                                           ; SOURCE LINE # 567
08AD 900000      E     MOV     DPTR,#c_mem+01AH
08B0 E0                MOVX    A,@DPTR
08B1 FE                MOV     R6,A
08B2 A3                INC     DPTR
08B3 E0                MOVX    A,@DPTR
08B4 FF                MOV     R7,A
08B5 EE                MOV     A,R6
08B6 33                RLC     A
08B7 95E0              SUBB    A,ACC
08B9 FD                MOV     R5,A
08BA FC                MOV     R4,A
08BB 8F00        R     MOV     curr_ref+03H,R7
08BD 8E00        R     MOV     curr_ref+02H,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 47  

08BF 8D00        R     MOV     curr_ref+01H,R5
08C1 8C00        R     MOV     curr_ref,R4
08C3         ?C0090:
                                           ; SOURCE LINE # 570
08C3 AE00        R     MOV     R6,curr_ref+02H
08C5 AF00        R     MOV     R7,curr_ref+03H
08C7 120000      E     LCALL   _abs
08CA AD00        R     MOV     R5,index
08CC ED                MOV     A,R5
08CD 25E0              ADD     A,ACC
08CF 2400        E     ADD     A,#LOW g_meas+0CH
08D1 F582              MOV     DPL,A
08D3 E4                CLR     A
08D4 3400        E     ADDC    A,#HIGH g_meas+0CH
08D6 F583              MOV     DPH,A
08D8 E0                MOVX    A,@DPTR
08D9 FC                MOV     R4,A
08DA A3                INC     DPTR
08DB E0                MOVX    A,@DPTR
08DC FD                MOV     R5,A
08DD C3                CLR     C
08DE EF                MOV     A,R7
08DF 9D                SUBB    A,R5
08E0 FF                MOV     R7,A
08E1 EE                MOV     A,R6
08E2 9C                SUBB    A,R4
08E3 FE                MOV     R6,A
08E4 EE                MOV     A,R6
08E5 33                RLC     A
08E6 95E0              SUBB    A,ACC
08E8 FD                MOV     R5,A
08E9 FC                MOV     R4,A
08EA 8F00        R     MOV     curr_error+03H,R7
08EC 8E00        R     MOV     curr_error+02H,R6
08EE 8D00        R     MOV     curr_error+01H,R5
08F0 8C00        R     MOV     curr_error,R4
                                           ; SOURCE LINE # 573
08F2 AF00        R     MOV     R7,index
08F4 EF                MOV     A,R7
08F5 25E0              ADD     A,ACC
08F7 25E0              ADD     A,ACC
08F9 2400        R     ADD     A,#LOW curr_error_sum
08FB F582              MOV     DPL,A
08FD E4                CLR     A
08FE 3400        R     ADDC    A,#HIGH curr_error_sum
0900 F583              MOV     DPH,A
0902 C083              PUSH    DPH
0904 C082              PUSH    DPL
0906 120000      E     LCALL   ?C?LLDXDATA
0909 EF                MOV     A,R7
090A 2500        R     ADD     A,curr_error+03H
090C FF                MOV     R7,A
090D EE                MOV     A,R6
090E 3500        R     ADDC    A,curr_error+02H
0910 FE                MOV     R6,A
0911 ED                MOV     A,R5
0912 3500        R     ADDC    A,curr_error+01H
0914 FD                MOV     R5,A
0915 EC                MOV     A,R4
0916 3500        R     ADDC    A,curr_error
0918 FC                MOV     R4,A
0919 D082              POP     DPL
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 48  

091B D083              POP     DPH
091D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 576
0920 AF00        R     MOV     R7,index
0922 EF                MOV     A,R7
0923 25E0              ADD     A,ACC
0925 25E0              ADD     A,ACC
0927 2400        R     ADD     A,#LOW curr_error_sum
0929 F582              MOV     DPL,A
092B E4                CLR     A
092C 3400        R     ADDC    A,#HIGH curr_error_sum
092E F583              MOV     DPH,A
0930 120000      E     LCALL   ?C?LLDXDATA
0933 7BA0              MOV     R3,#0A0H
0935 7A86              MOV     R2,#086H
0937 7901              MOV     R1,#01H
0939 7800              MOV     R0,#00H
093B C3                CLR     C
093C 120000      E     LCALL   ?C?SLCMP
093F 501D              JNC     ?C0091
                                           ; SOURCE LINE # 577
0941 7FA0              MOV     R7,#0A0H
0943 7E86              MOV     R6,#086H
0945 7D01              MOV     R5,#01H
0947 7C00              MOV     R4,#00H
0949 AB00        R     MOV     R3,index
094B EB                MOV     A,R3
094C 25E0              ADD     A,ACC
094E 25E0              ADD     A,ACC
0950 2400        R     ADD     A,#LOW curr_error_sum
0952 F582              MOV     DPL,A
0954 E4                CLR     A
0955 3400        R     ADDC    A,#HIGH curr_error_sum
0957 F583              MOV     DPH,A
0959 120000      E     LCALL   ?C?LSTXDATA
095C 803C              SJMP    ?C0092
095E         ?C0091:
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
095E AF00        R     MOV     R7,index
0960 EF                MOV     A,R7
0961 25E0              ADD     A,ACC
0963 25E0              ADD     A,ACC
0965 2400        R     ADD     A,#LOW curr_error_sum
0967 F582              MOV     DPL,A
0969 E4                CLR     A
096A 3400        R     ADDC    A,#HIGH curr_error_sum
096C F583              MOV     DPH,A
096E 120000      E     LCALL   ?C?LLDXDATA
0971 7B00              MOV     R3,#00H
0973 7A00              MOV     R2,#00H
0975 7900              MOV     R1,#00H
0977 7800              MOV     R0,#00H
0979 D3                SETB    C
097A 120000      E     LCALL   ?C?SLCMP
097D 401B              JC      ?C0092
                                           ; SOURCE LINE # 580
097F 7F00              MOV     R7,#00H
0981 7E00              MOV     R6,#00H
0983 7D00              MOV     R5,#00H
0985 7C00              MOV     R4,#00H
0987 AB00        R     MOV     R3,index
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 49  

0989 EB                MOV     A,R3
098A 25E0              ADD     A,ACC
098C 25E0              ADD     A,ACC
098E 2400        R     ADD     A,#LOW curr_error_sum
0990 F582              MOV     DPL,A
0992 E4                CLR     A
0993 3400        R     ADDC    A,#HIGH curr_error_sum
0995 F583              MOV     DPH,A
0997 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 581
099A         ?C0092:
                                           ; SOURCE LINE # 584
099A 7F00              MOV     R7,#00H
099C 7E00              MOV     R6,#00H
099E 7D00              MOV     R5,#00H
09A0 7C00              MOV     R4,#00H
09A2 8F00        R     MOV     pwm_input+03H,R7
09A4 8E00        R     MOV     pwm_input+02H,R6
09A6 8D00        R     MOV     pwm_input+01H,R5
09A8 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 587
09AA 7F00              MOV     R7,#00H
09AC 7E00              MOV     R6,#00H
09AE 7D00              MOV     R5,#00H
09B0 7C00              MOV     R4,#00H
09B2 AB00        R     MOV     R3,k_p_c+03H
09B4 AA00        R     MOV     R2,k_p_c+02H
09B6 A900        R     MOV     R1,k_p_c+01H
09B8 A800        R     MOV     R0,k_p_c
09BA C3                CLR     C
09BB 120000      E     LCALL   ?C?SLCMP
09BE 6030              JZ      ?C0094
                                           ; SOURCE LINE # 588
09C0 AF00        R     MOV     R7,curr_error+03H
09C2 AE00        R     MOV     R6,curr_error+02H
09C4 AD00        R     MOV     R5,curr_error+01H
09C6 AC00        R     MOV     R4,curr_error
09C8 AB00        R     MOV     R3,k_p+03H
09CA AA00        R     MOV     R2,k_p+02H
09CC A900        R     MOV     R1,k_p+01H
09CE A800        R     MOV     R0,k_p
09D0 120000      E     LCALL   ?C?LMUL
09D3 7810              MOV     R0,#010H
09D5 120000      E     LCALL   ?C?SLSHR
09D8 E500        R     MOV     A,pwm_input+03H
09DA 2F                ADD     A,R7
09DB FF                MOV     R7,A
09DC E500        R     MOV     A,pwm_input+02H
09DE 3E                ADDC    A,R6
09DF FE                MOV     R6,A
09E0 E500        R     MOV     A,pwm_input+01H
09E2 3D                ADDC    A,R5
09E3 FD                MOV     R5,A
09E4 E500        R     MOV     A,pwm_input
09E6 3C                ADDC    A,R4
09E7 FC                MOV     R4,A
09E8 8F00        R     MOV     pwm_input+03H,R7
09EA 8E00        R     MOV     pwm_input+02H,R6
09EC 8D00        R     MOV     pwm_input+01H,R5
09EE 8C00        R     MOV     pwm_input,R4
09F0         ?C0094:
                                           ; SOURCE LINE # 592
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 50  

09F0 7F00              MOV     R7,#00H
09F2 7E00              MOV     R6,#00H
09F4 7D00              MOV     R5,#00H
09F6 7C00              MOV     R4,#00H
09F8 AB00        R     MOV     R3,k_i_c+03H
09FA AA00        R     MOV     R2,k_i_c+02H
09FC A900        R     MOV     R1,k_i_c+01H
09FE A800        R     MOV     R0,k_i_c
0A00 C3                CLR     C
0A01 120000      E     LCALL   ?C?SLCMP
0A04 6040              JZ      ?C0095
                                           ; SOURCE LINE # 593
0A06 AF00        R     MOV     R7,index
0A08 EF                MOV     A,R7
0A09 25E0              ADD     A,ACC
0A0B 25E0              ADD     A,ACC
0A0D 2400        R     ADD     A,#LOW curr_error_sum
0A0F F582              MOV     DPL,A
0A11 E4                CLR     A
0A12 3400        R     ADDC    A,#HIGH curr_error_sum
0A14 F583              MOV     DPH,A
0A16 120000      E     LCALL   ?C?LLDXDATA
0A19 7806              MOV     R0,#06H
0A1B 120000      E     LCALL   ?C?SLSHR
0A1E AB00        R     MOV     R3,k_i_c+03H
0A20 AA00        R     MOV     R2,k_i_c+02H
0A22 A900        R     MOV     R1,k_i_c+01H
0A24 A800        R     MOV     R0,k_i_c
0A26 120000      E     LCALL   ?C?LMUL
0A29 780A              MOV     R0,#0AH
0A2B 120000      E     LCALL   ?C?SLSHR
0A2E E500        R     MOV     A,pwm_input+03H
0A30 2F                ADD     A,R7
0A31 FF                MOV     R7,A
0A32 E500        R     MOV     A,pwm_input+02H
0A34 3E                ADDC    A,R6
0A35 FE                MOV     R6,A
0A36 E500        R     MOV     A,pwm_input+01H
0A38 3D                ADDC    A,R5
0A39 FD                MOV     R5,A
0A3A E500        R     MOV     A,pwm_input
0A3C 3C                ADDC    A,R4
0A3D FC                MOV     R4,A
0A3E 8F00        R     MOV     pwm_input+03H,R7
0A40 8E00        R     MOV     pwm_input+02H,R6
0A42 8D00        R     MOV     pwm_input+01H,R5
0A44 8C00        R     MOV     pwm_input,R4
0A46         ?C0095:
                                           ; SOURCE LINE # 596
0A46 7F00              MOV     R7,#00H
0A48 7E00              MOV     R6,#00H
0A4A 7D00              MOV     R5,#00H
0A4C 7C00              MOV     R4,#00H
0A4E AB00        R     MOV     R3,k_d_c+03H
0A50 AA00        R     MOV     R2,k_d_c+02H
0A52 A900        R     MOV     R1,k_d_c+01H
0A54 A800        R     MOV     R0,k_d_c
0A56 C3                CLR     C
0A57 120000      E     LCALL   ?C?SLCMP
0A5A 605B              JZ      ?C0096
                                           ; SOURCE LINE # 597
0A5C AF00        R     MOV     R7,index
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 51  

0A5E EF                MOV     A,R7
0A5F 25E0              ADD     A,ACC
0A61 2400        E     ADD     A,#LOW g_meas+0CH
0A63 F582              MOV     DPL,A
0A65 E4                CLR     A
0A66 3400        E     ADDC    A,#HIGH g_meas+0CH
0A68 F583              MOV     DPH,A
0A6A E0                MOVX    A,@DPTR
0A6B FE                MOV     R6,A
0A6C A3                INC     DPTR
0A6D E0                MOVX    A,@DPTR
0A6E FF                MOV     R7,A
0A6F AB07              MOV     R3,AR7
0A71 AA06              MOV     R2,AR6
0A73 EA                MOV     A,R2
0A74 33                RLC     A
0A75 95E0              SUBB    A,ACC
0A77 F9                MOV     R1,A
0A78 F8                MOV     R0,A
0A79 AF00        R     MOV     R7,index
0A7B EF                MOV     A,R7
0A7C 25E0              ADD     A,ACC
0A7E 25E0              ADD     A,ACC
0A80 2400        R     ADD     A,#LOW prev_curr
0A82 F582              MOV     DPL,A
0A84 E4                CLR     A
0A85 3400        R     ADDC    A,#HIGH prev_curr
0A87 F583              MOV     DPH,A
0A89 120000      E     LCALL   ?C?LLDXDATA
0A8C 120000      E     LCALL   ?C?LSUB
0A8F AB00        R     MOV     R3,k_d_c+03H
0A91 AA00        R     MOV     R2,k_d_c+02H
0A93 A900        R     MOV     R1,k_d_c+01H
0A95 A800        R     MOV     R0,k_d_c
0A97 120000      E     LCALL   ?C?LMUL
0A9A 7810              MOV     R0,#010H
0A9C 120000      E     LCALL   ?C?SLSHR
0A9F E500        R     MOV     A,pwm_input+03H
0AA1 2F                ADD     A,R7
0AA2 FF                MOV     R7,A
0AA3 E500        R     MOV     A,pwm_input+02H
0AA5 3E                ADDC    A,R6
0AA6 FE                MOV     R6,A
0AA7 E500        R     MOV     A,pwm_input+01H
0AA9 3D                ADDC    A,R5
0AAA FD                MOV     R5,A
0AAB E500        R     MOV     A,pwm_input
0AAD 3C                ADDC    A,R4
0AAE FC                MOV     R4,A
0AAF 8F00        R     MOV     pwm_input+03H,R7
0AB1 8E00        R     MOV     pwm_input+02H,R6
0AB3 8D00        R     MOV     pwm_input+01H,R5
0AB5 8C00        R     MOV     pwm_input,R4
0AB7         ?C0096:
                                           ; SOURCE LINE # 600
0AB7 7F00              MOV     R7,#00H
0AB9 7E00              MOV     R6,#00H
0ABB 7D00              MOV     R5,#00H
0ABD 7C00              MOV     R4,#00H
0ABF AB00        R     MOV     R3,pwm_input+03H
0AC1 AA00        R     MOV     R2,pwm_input+02H
0AC3 A900        R     MOV     R1,pwm_input+01H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 52  

0AC5 A800        R     MOV     R0,pwm_input
0AC7 C3                CLR     C
0AC8 120000      E     LCALL   ?C?SLCMP
0ACB 5010              JNC     ?C0097
                                           ; SOURCE LINE # 601
0ACD 7F00              MOV     R7,#00H
0ACF 7E00              MOV     R6,#00H
0AD1 7D00              MOV     R5,#00H
0AD3 7C00              MOV     R4,#00H
0AD5 8F00        R     MOV     pwm_input+03H,R7
0AD7 8E00        R     MOV     pwm_input+02H,R6
0AD9 8D00        R     MOV     pwm_input+01H,R5
0ADB 8C00        R     MOV     pwm_input,R4
0ADD         ?C0097:
                                           ; SOURCE LINE # 604
0ADD AF00        R     MOV     R7,index
0ADF EF                MOV     A,R7
0AE0 25E0              ADD     A,ACC
0AE2 2400        E     ADD     A,#LOW g_meas+0CH
0AE4 F582              MOV     DPL,A
0AE6 E4                CLR     A
0AE7 3400        E     ADDC    A,#HIGH g_meas+0CH
0AE9 F583              MOV     DPH,A
0AEB E0                MOVX    A,@DPTR
0AEC FE                MOV     R6,A
0AED A3                INC     DPTR
0AEE E0                MOVX    A,@DPTR
0AEF FF                MOV     R7,A
0AF0 EE                MOV     A,R6
0AF1 33                RLC     A
0AF2 95E0              SUBB    A,ACC
0AF4 FD                MOV     R5,A
0AF5 FC                MOV     R4,A
0AF6 AB00        R     MOV     R3,index
0AF8 EB                MOV     A,R3
0AF9 25E0              ADD     A,ACC
0AFB 25E0              ADD     A,ACC
0AFD 2400        R     ADD     A,#LOW prev_curr
0AFF F582              MOV     DPL,A
0B01 E4                CLR     A
0B02 3400        R     ADDC    A,#HIGH prev_curr
0B04 F583              MOV     DPH,A
0B06 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 606
0B09 E500        R     MOV     A,index
0B0B 7022              JNZ     ?C0098
                                           ; SOURCE LINE # 607
0B0D 7F00              MOV     R7,#00H
0B0F 7E00              MOV     R6,#00H
0B11 7D00              MOV     R5,#00H
0B13 7C00              MOV     R4,#00H
0B15 AB00        R     MOV     R3,curr_ref+03H
0B17 AA00        R     MOV     R2,curr_ref+02H
0B19 A900        R     MOV     R1,curr_ref+01H
0B1B A800        R     MOV     R0,curr_ref
0B1D C3                CLR     C
0B1E 120000      E     LCALL   ?C?SLCMP
0B21 4006              JC      ?C0099
                                           ; SOURCE LINE # 608
0B23 430001      R     ORL     direction,#01H
0B26 020000      R     LJMP    ?C0042
0B29         ?C0099:
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 53  

                                           ; SOURCE LINE # 610
0B29 5300FE      R     ANL     direction,#0FEH
                                           ; SOURCE LINE # 611
0B2C 020000      R     LJMP    ?C0042
0B2F         ?C0098:
                                           ; SOURCE LINE # 612
0B2F 7F00              MOV     R7,#00H
0B31 7E00              MOV     R6,#00H
0B33 7D00              MOV     R5,#00H
0B35 7C00              MOV     R4,#00H
0B37 AB00        R     MOV     R3,curr_ref+03H
0B39 AA00        R     MOV     R2,curr_ref+02H
0B3B A900        R     MOV     R1,curr_ref+01H
0B3D A800        R     MOV     R0,curr_ref
0B3F C3                CLR     C
0B40 120000      E     LCALL   ?C?SLCMP
0B43 4005              JC      ?C0102
                                           ; SOURCE LINE # 613
0B45 430002      R     ORL     direction,#02H
0B48 8075              SJMP    ?C0042
0B4A         ?C0102:
                                           ; SOURCE LINE # 615
0B4A 5300FD      R     ANL     direction,#0FDH
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 618
0B4D 8070              SJMP    ?C0042
                                           ; SOURCE LINE # 620
0B4F         ?C0104:
                                           ; SOURCE LINE # 622
0B4F AF00        R     MOV     R7,index
0B51 EF                MOV     A,R7
0B52 25E0              ADD     A,ACC
0B54 25E0              ADD     A,ACC
0B56 2400        E     ADD     A,#LOW g_ref
0B58 F582              MOV     DPL,A
0B5A E4                CLR     A
0B5B 3400        E     ADDC    A,#HIGH g_ref
0B5D F583              MOV     DPH,A
0B5F 120000      E     LCALL   ?C?LLDXDATA
0B62 AB00        R     MOV     R3,index
0B64 7400        E     MOV     A,#LOW g_mem+01FH
0B66 2B                ADD     A,R3
0B67 F582              MOV     DPL,A
0B69 E4                CLR     A
0B6A 3400        E     ADDC    A,#HIGH g_mem+01FH
0B6C F583              MOV     DPH,A
0B6E E0                MOVX    A,@DPTR
0B6F F9                MOV     R1,A
0B70 A801              MOV     R0,AR1
0B72 120000      E     LCALL   ?C?SLSHR
0B75 8F00        R     MOV     pwm_input+03H,R7
0B77 8E00        R     MOV     pwm_input+02H,R6
0B79 8D00        R     MOV     pwm_input+01H,R5
0B7B 8C00        R     MOV     pwm_input,R4
                                           ; SOURCE LINE # 624
0B7D E500        R     MOV     A,index
0B7F 7020              JNZ     ?C0105
                                           ; SOURCE LINE # 625
0B81 7F00              MOV     R7,#00H
0B83 7E00              MOV     R6,#00H
0B85 7D00              MOV     R5,#00H
0B87 7C00              MOV     R4,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 54  

0B89 AB00        R     MOV     R3,pwm_input+03H
0B8B AA00        R     MOV     R2,pwm_input+02H
0B8D A900        R     MOV     R1,pwm_input+01H
0B8F A800        R     MOV     R0,pwm_input
0B91 C3                CLR     C
0B92 120000      E     LCALL   ?C?SLCMP
0B95 4005              JC      ?C0106
                                           ; SOURCE LINE # 626
0B97 430001      R     ORL     direction,#01H
0B9A 8023              SJMP    ?C0042
0B9C         ?C0106:
                                           ; SOURCE LINE # 628
0B9C 5300FE      R     ANL     direction,#0FEH
                                           ; SOURCE LINE # 629
0B9F 801E              SJMP    ?C0042
0BA1         ?C0105:
                                           ; SOURCE LINE # 630
0BA1 7F00              MOV     R7,#00H
0BA3 7E00              MOV     R6,#00H
0BA5 7D00              MOV     R5,#00H
0BA7 7C00              MOV     R4,#00H
0BA9 AB00        R     MOV     R3,pwm_input+03H
0BAB AA00        R     MOV     R2,pwm_input+02H
0BAD A900        R     MOV     R1,pwm_input+01H
0BAF A800        R     MOV     R0,pwm_input
0BB1 C3                CLR     C
0BB2 120000      E     LCALL   ?C?SLCMP
0BB5 4005              JC      ?C0109
                                           ; SOURCE LINE # 631
0BB7 430002      R     ORL     direction,#02H
0BBA 8003              SJMP    ?C0042
0BBC         ?C0109:
                                           ; SOURCE LINE # 633
0BBC 5300FD      R     ANL     direction,#0FDH
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 640
0BBF         ?C0042:
                                           ; SOURCE LINE # 642
0BBF 300005            JNB     interrupt_flag,?C0112
                                           ; SOURCE LINE # 643
0BC2 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 644
0BC4 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 645
0BC7         ?C0112:
                                           ; SOURCE LINE # 648
0BC7 7F64              MOV     R7,#064H
0BC9 7E00              MOV     R6,#00H
0BCB 7D00              MOV     R5,#00H
0BCD 7C00              MOV     R4,#00H
0BCF AB00        R     MOV     R3,pwm_input+03H
0BD1 AA00        R     MOV     R2,pwm_input+02H
0BD3 A900        R     MOV     R1,pwm_input+01H
0BD5 A800        R     MOV     R0,pwm_input
0BD7 D3                SETB    C
0BD8 120000      E     LCALL   ?C?SLCMP
0BDB 4010              JC      ?C0113
                                           ; SOURCE LINE # 649
0BDD 7F64              MOV     R7,#064H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 55  

0BDF 7E00              MOV     R6,#00H
0BE1 7D00              MOV     R5,#00H
0BE3 7C00              MOV     R4,#00H
0BE5 8F00        R     MOV     pwm_input+03H,R7
0BE7 8E00        R     MOV     pwm_input+02H,R6
0BE9 8D00        R     MOV     pwm_input+01H,R5
0BEB 8C00        R     MOV     pwm_input,R4
0BED         ?C0113:
                                           ; SOURCE LINE # 650
0BED 7F9C              MOV     R7,#09CH
0BEF 7EFF              MOV     R6,#0FFH
0BF1 7DFF              MOV     R5,#0FFH
0BF3 7CFF              MOV     R4,#0FFH
0BF5 AB00        R     MOV     R3,pwm_input+03H
0BF7 AA00        R     MOV     R2,pwm_input+02H
0BF9 A900        R     MOV     R1,pwm_input+01H
0BFB A800        R     MOV     R0,pwm_input
0BFD C3                CLR     C
0BFE 120000      E     LCALL   ?C?SLCMP
0C01 5010              JNC     ?C0114
                                           ; SOURCE LINE # 651
0C03 7F9C              MOV     R7,#09CH
0C05 7EFF              MOV     R6,#0FFH
0C07 7DFF              MOV     R5,#0FFH
0C09 7CFF              MOV     R4,#0FFH
0C0B 8F00        R     MOV     pwm_input+03H,R7
0C0D 8E00        R     MOV     pwm_input+02H,R6
0C0F 8D00        R     MOV     pwm_input+01H,R5
0C11 8C00        R     MOV     pwm_input,R4
0C13         ?C0114:
                                           ; SOURCE LINE # 653
0C13 300005            JNB     interrupt_flag,?C0115
                                           ; SOURCE LINE # 654
0C16 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 655
0C18 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 656
0C1B         ?C0115:
                                           ; SOURCE LINE # 659
0C1B 900000      E     MOV     DPTR,#c_mem+01EH
0C1E E0                MOVX    A,@DPTR
0C1F FF                MOV     R7,A
0C20 EF                MOV     A,R7
0C21 6401              XRL     A,#01H
0C23 6039              JZ      ?C0116
                                           ; SOURCE LINE # 660
0C25 AF00        R     MOV     R7,pwm_input+03H
0C27 AE00        R     MOV     R6,pwm_input+02H
0C29 AD00        R     MOV     R5,pwm_input+01H
0C2B AC00        R     MOV     R4,pwm_input
0C2D 780A              MOV     R0,#0AH
0C2F 120000      E     LCALL   ?C?LSHL
0C32 7B64              MOV     R3,#064H
0C34 7A00              MOV     R2,#00H
0C36 7900              MOV     R1,#00H
0C38 7800              MOV     R0,#00H
0C3A 120000      E     LCALL   ?C?SLDIV
0C3D A804              MOV     R0,AR4
0C3F A905              MOV     R1,AR5
0C41 AA06              MOV     R2,AR6
0C43 AB07              MOV     R3,AR7
0C45 900000      E     MOV     DPTR,#dev_pwm_limit
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 56  

0C48 E0                MOVX    A,@DPTR
0C49 FF                MOV     R7,A
0C4A E4                CLR     A
0C4B FC                MOV     R4,A
0C4C FD                MOV     R5,A
0C4D FE                MOV     R6,A
0C4E 120000      E     LCALL   ?C?LMUL
0C51 780A              MOV     R0,#0AH
0C53 120000      E     LCALL   ?C?SLSHR
0C56 8F00        R     MOV     pwm_input+03H,R7
0C58 8E00        R     MOV     pwm_input+02H,R6
0C5A 8D00        R     MOV     pwm_input+01H,R5
0C5C 8C00        R     MOV     pwm_input,R4
0C5E         ?C0116:
                                           ; SOURCE LINE # 664
0C5E 300011            JNB     dirM0,?C0117
                                           ; SOURCE LINE # 665
0C61 300007            JNB     dirM1,?C0118
                                           ; SOURCE LINE # 666
0C64 7F03              MOV     R7,#03H
0C66 120000      E     LCALL   _MOTOR_DIR_Write
0C69 8016              SJMP    ?C0120
0C6B         ?C0118:
                                           ; SOURCE LINE # 668
0C6B 7F01              MOV     R7,#01H
0C6D 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 669
0C70 800F              SJMP    ?C0120
0C72         ?C0117:
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0C72 300007            JNB     dirM1,?C0121
                                           ; SOURCE LINE # 672
0C75 7F02              MOV     R7,#02H
0C77 120000      E     LCALL   _MOTOR_DIR_Write
0C7A 8005              SJMP    ?C0120
0C7C         ?C0121:
                                           ; SOURCE LINE # 674
0C7C 7F00              MOV     R7,#00H
0C7E 120000      E     LCALL   _MOTOR_DIR_Write
                                           ; SOURCE LINE # 675
0C81         ?C0120:
                                           ; SOURCE LINE # 677
0C81 300005            JNB     interrupt_flag,?C0123
                                           ; SOURCE LINE # 678
0C84 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 679
0C86 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 680
0C89         ?C0123:
                                           ; SOURCE LINE # 682
0C89 E500        R     MOV     A,index
0C8B 700C              JNZ     ?C0124
                                           ; SOURCE LINE # 683
0C8D AE00        R     MOV     R6,pwm_input+02H
0C8F AF00        R     MOV     R7,pwm_input+03H
0C91 120000      E     LCALL   _abs
0C94 120000      E     LCALL   _PWM_MOTORS_WriteCompare1
0C97 800A              SJMP    ?C0125
0C99         ?C0124:
                                           ; SOURCE LINE # 685
0C99 AE00        R     MOV     R6,pwm_input+02H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 57  

0C9B AF00        R     MOV     R7,pwm_input+03H
0C9D 120000      E     LCALL   _abs
0CA0 120000      E     LCALL   _PWM_MOTORS_WriteCompare2
0CA3         ?C0125:
                                           ; SOURCE LINE # 687
0CA3 300005            JNB     interrupt_flag,?C0041
                                           ; SOURCE LINE # 688
0CA6 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 689
0CA8 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 691
0CAB         ?C0041:
0CAB 22                RET     
             ; FUNCTION _motor_control (END)

             ; FUNCTION analog_read_end (BEGIN)
                                           ; SOURCE LINE # 697
0000         ?C0127:
                                           ; SOURCE LINE # 718
0000 120000      E     LCALL   ADC_STATUS_Read
0003 EF                MOV     A,R7
0004 700A              JNZ     ?C0128
                                           ; SOURCE LINE # 719
0006 3000F7            JNB     interrupt_flag,?C0127
                                           ; SOURCE LINE # 720
0009 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 721
000B 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
000E 80F0              SJMP    ?C0127
0010         ?C0128:
                                           ; SOURCE LINE # 726
0010 900000      E     MOV     DPTR,#ADC_buf
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 249A              ADD     A,#09AH
001B FF                MOV     R7,A
001C EE                MOV     A,R6
001D 34F9              ADDC    A,#0F9H
001F FE                MOV     R6,A
0020 EE                MOV     A,R6
0021 33                RLC     A
0022 95E0              SUBB    A,ACC
0024 FD                MOV     R5,A
0025 FC                MOV     R4,A
0026 7BA0              MOV     R3,#0A0H
0028 7A07              MOV     R2,#07H
002A 7900              MOV     R1,#00H
002C 7800              MOV     R0,#00H
002E 120000      E     LCALL   ?C?LMUL
0031 7807              MOV     R0,#07H
0033 120000      E     LCALL   ?C?SLSHR
0036 900000      E     MOV     DPTR,#dev_tension
0039 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 728
003C 300005            JNB     interrupt_flag,?C0130
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 58  

                                           ; SOURCE LINE # 729
003F C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 730
0041 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 731
0044         ?C0130:
                                           ; SOURCE LINE # 735
0044 7F00              MOV     R7,#00H
0046 7E00              MOV     R6,#00H
0048 7D00              MOV     R5,#00H
004A 7C00              MOV     R4,#00H
004C 900000      E     MOV     DPTR,#dev_tension
004F 120000      E     LCALL   ?C?LLDXDATA0
0052 D3                SETB    C
0053 120000      E     LCALL   ?C?SLCMP
0056 5003              JNC     $ + 5H
0058 020000      R     LJMP    ?C0131
                                           ; SOURCE LINE # 738
005B 120000      R     LCALL   pwm_limit_search
                                           ; SOURCE LINE # 742
005E 300005            JNB     interrupt_flag,?C0132
                                           ; SOURCE LINE # 743
0061 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 744
0063 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 745
0066         ?C0132:
                                           ; SOURCE LINE # 748
0066 900000      E     MOV     DPTR,#ADC_buf+02H
0069 E0                MOVX    A,@DPTR
006A FE                MOV     R6,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 249A              ADD     A,#09AH
0071 FF                MOV     R7,A
0072 EE                MOV     A,R6
0073 34F9              ADDC    A,#0F9H
0075 FE                MOV     R6,A
0076 EE                MOV     A,R6
0077 33                RLC     A
0078 95E0              SUBB    A,ACC
007A FD                MOV     R5,A
007B FC                MOV     R4,A
007C 7BAB              MOV     R3,#0ABH
007E 7A64              MOV     R2,#064H
0080 7900              MOV     R1,#00H
0082 7800              MOV     R0,#00H
0084 120000      E     LCALL   ?C?LMUL
0087 780D              MOV     R0,#0DH
0089 120000      E     LCALL   ?C?SLSHR
008C EE                MOV     A,R6
008D 33                RLC     A
008E 95E0              SUBB    A,ACC
0090 FD                MOV     R5,A
0091 FC                MOV     R4,A
0092 120000      E     LCALL   _filter_i1
0095 900000      E     MOV     DPTR,#g_meas+0CH
0098 EE                MOV     A,R6
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 59  

009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 752
009D 300005            JNB     interrupt_flag,?C0133
                                           ; SOURCE LINE # 753
00A0 C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 754
00A2 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 755
00A5         ?C0133:
                                           ; SOURCE LINE # 756
00A5 900000      E     MOV     DPTR,#ADC_buf+04H
00A8 E0                MOVX    A,@DPTR
00A9 FE                MOV     R6,A
00AA A3                INC     DPTR
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD EF                MOV     A,R7
00AE 249A              ADD     A,#09AH
00B0 FF                MOV     R7,A
00B1 EE                MOV     A,R6
00B2 34F9              ADDC    A,#0F9H
00B4 FE                MOV     R6,A
00B5 EE                MOV     A,R6
00B6 33                RLC     A
00B7 95E0              SUBB    A,ACC
00B9 FD                MOV     R5,A
00BA FC                MOV     R4,A
00BB 7BAB              MOV     R3,#0ABH
00BD 7A64              MOV     R2,#064H
00BF 7900              MOV     R1,#00H
00C1 7800              MOV     R0,#00H
00C3 120000      E     LCALL   ?C?LMUL
00C6 780D              MOV     R0,#0DH
00C8 120000      E     LCALL   ?C?SLSHR
00CB EE                MOV     A,R6
00CC 33                RLC     A
00CD 95E0              SUBB    A,ACC
00CF FD                MOV     R5,A
00D0 FC                MOV     R4,A
00D1 120000      E     LCALL   _filter_i2
00D4 900000      E     MOV     DPTR,#g_meas+0EH
00D7 EE                MOV     A,R6
00D8 F0                MOVX    @DPTR,A
00D9 A3                INC     DPTR
00DA EF                MOV     A,R7
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
00DC 300016            JNB     interrupt_flag,?C0136
                                           ; SOURCE LINE # 761
00DF C200        E     CLR     interrupt_flag
                                           ; SOURCE LINE # 762
00E1 120000      R     LCALL   interrupt_manager
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
00E4 22                RET     
00E5         ?C0131:
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
00E5 900000      E     MOV     DPTR,#g_meas+0CH
00E8 E4                CLR     A
00E9 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 60  

00EA A3                INC     DPTR
00EB E4                CLR     A
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 767
00ED 900000      E     MOV     DPTR,#g_meas+0EH
00F0 E4                CLR     A
00F1 F0                MOVX    @DPTR,A
00F2 A3                INC     DPTR
00F3 E4                CLR     A
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
                                           ; SOURCE LINE # 769
00F5         ?C0136:
00F5 22                RET     
             ; FUNCTION analog_read_end (END)

             ; FUNCTION _encoder_reading (BEGIN)
                                           ; SOURCE LINE # 775
0000 900000      R     MOV     DPTR,#idx
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
0005 900000      R     MOV     DPTR,#idx
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 795
000C E500        R     MOV     A,index
000E C3                CLR     C
000F 9403              SUBB    A,#03H
0011 4003              JC      $ + 5H
0013 020000      R     LJMP    ?C0138
0016         ?C0137:
                                           ; SOURCE LINE # 798
0016 300032            JNB     reset_last_value_flag,?C0139
                                           ; SOURCE LINE # 799
0019 900000      R     MOV     DPTR,#jj
001C 7403              MOV     A,#03H
001E F0                MOVX    @DPTR,A
001F         ?C0140:
001F 900000      R     MOV     DPTR,#jj
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 14                DEC     A
0025 F0                MOVX    @DPTR,A
0026 EF                MOV     A,R7
0027 6020              JZ      ?C0141
                                           ; SOURCE LINE # 800
0029 7F00              MOV     R7,#00H
002B 7E00              MOV     R6,#00H
002D 7D00              MOV     R5,#00H
002F 7C00              MOV     R4,#00H
0031 900000      R     MOV     DPTR,#jj
0034 E0                MOVX    A,@DPTR
0035 FB                MOV     R3,A
0036 EB                MOV     A,R3
0037 25E0              ADD     A,ACC
0039 25E0              ADD     A,ACC
003B 2400        R     ADD     A,#LOW last_value_encoder
003D F582              MOV     DPL,A
003F E4                CLR     A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 61  

0040 3400        R     ADDC    A,#HIGH last_value_encoder
0042 F583              MOV     DPH,A
0044 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 801
0047 80D6              SJMP    ?C0140
0049         ?C0141:
                                           ; SOURCE LINE # 802
0049 C200        E     CLR     reset_last_value_flag
                                           ; SOURCE LINE # 803
004B         ?C0139:
                                           ; SOURCE LINE # 806
004B E500        R     MOV     A,index
004D 701B              JNZ     ?C0142
                                           ; SOURCE LINE # 807
004F 120000      E     LCALL   SHIFTREG_ENC_1_ReadData
0052 EF                MOV     A,R7
0053 54FF              ANL     A,#0FFH
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 54FF              ANL     A,#0FFH
0059 FE                MOV     R6,A
005A ED                MOV     A,R5
005B 5403              ANL     A,#03H
005D FD                MOV     R5,A
005E EC                MOV     A,R4
005F 5400              ANL     A,#00H
0061 FC                MOV     R4,A
0062 900000      R     MOV     DPTR,#data_encoder
0065 120000      E     LCALL   ?C?LSTXDATA
0068 8059              SJMP    ?C0143
006A         ?C0142:
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 809
006A E500        R     MOV     A,index
006C B4011B            CJNE    A,#01H,?C0144
                                           ; SOURCE LINE # 810
006F 120000      E     LCALL   SHIFTREG_ENC_2_ReadData
0072 EF                MOV     A,R7
0073 54FF              ANL     A,#0FFH
0075 FF                MOV     R7,A
0076 EE                MOV     A,R6
0077 54FF              ANL     A,#0FFH
0079 FE                MOV     R6,A
007A ED                MOV     A,R5
007B 5403              ANL     A,#03H
007D FD                MOV     R5,A
007E EC                MOV     A,R4
007F 5400              ANL     A,#00H
0081 FC                MOV     R4,A
0082 900000      R     MOV     DPTR,#data_encoder
0085 120000      E     LCALL   ?C?LSTXDATA
0088 8039              SJMP    ?C0143
008A         ?C0144:
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
008A E500        R     MOV     A,index
008C B4021B            CJNE    A,#02H,?C0146
                                           ; SOURCE LINE # 813
008F 120000      E     LCALL   SHIFTREG_ENC_3_ReadData
0092 EF                MOV     A,R7
0093 54FF              ANL     A,#0FFH
0095 FF                MOV     R7,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 62  

0096 EE                MOV     A,R6
0097 54FF              ANL     A,#0FFH
0099 FE                MOV     R6,A
009A ED                MOV     A,R5
009B 5403              ANL     A,#03H
009D FD                MOV     R5,A
009E EC                MOV     A,R4
009F 5400              ANL     A,#00H
00A1 FC                MOV     R4,A
00A2 900000      R     MOV     DPTR,#data_encoder
00A5 120000      E     LCALL   ?C?LSTXDATA
00A8 8019              SJMP    ?C0143
00AA         ?C0146:
                                           ; SOURCE LINE # 815
00AA 120000      E     LCALL   SHIFTREG_ENC_4_ReadData
00AD EF                MOV     A,R7
00AE 54FF              ANL     A,#0FFH
00B0 FF                MOV     R7,A
00B1 EE                MOV     A,R6
00B2 54FF              ANL     A,#0FFH
00B4 FE                MOV     R6,A
00B5 ED                MOV     A,R5
00B6 5403              ANL     A,#03H
00B8 FD                MOV     R5,A
00B9 EC                MOV     A,R4
00BA 5400              ANL     A,#00H
00BC FC                MOV     R4,A
00BD 900000      R     MOV     DPTR,#data_encoder
00C0 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
00C3         ?C0143:
                                           ; SOURCE LINE # 819
00C3 7B01              MOV     R3,#01H
00C5 7A00        R     MOV     R2,#HIGH data_encoder
00C7 7900        R     MOV     R1,#LOW data_encoder
00C9 120000      E     LCALL   _check_enc_data
00CC 4003              JC      $ + 5H
00CE 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 821
00D1 900000      R     MOV     DPTR,#data_encoder
00D4 120000      E     LCALL   ?C?LLDXDATA
00D7 EF                MOV     A,R7
00D8 54C0              ANL     A,#0C0H
00DA FF                MOV     R7,A
00DB EE                MOV     A,R6
00DC 54FF              ANL     A,#0FFH
00DE FE                MOV     R6,A
00DF ED                MOV     A,R5
00E0 5403              ANL     A,#03H
00E2 FD                MOV     R5,A
00E3 EC                MOV     A,R4
00E4 5400              ANL     A,#00H
00E6 FC                MOV     R4,A
00E7 7802              MOV     R0,#02H
00E9 120000      E     LCALL   ?C?ULSHR
00EC C3                CLR     C
00ED E4                CLR     A
00EE 9F                SUBB    A,R7
00EF FB                MOV     R3,A
00F0 7480              MOV     A,#080H
00F2 9E                SUBB    A,R6
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 63  

00F3 FA                MOV     R2,A
00F4 AF00        R     MOV     R7,index
00F6 EF                MOV     A,R7
00F7 25E0              ADD     A,ACC
00F9 25E0              ADD     A,ACC
00FB 2400        E     ADD     A,#LOW g_mem+022H
00FD F582              MOV     DPL,A
00FF E4                CLR     A
0100 3400        E     ADDC    A,#HIGH g_mem+022H
0102 F583              MOV     DPH,A
0104 120000      E     LCALL   ?C?LLDXDATA
0107 EB                MOV     A,R3
0108 2F                ADD     A,R7
0109 FF                MOV     R7,A
010A EA                MOV     A,R2
010B 3E                ADDC    A,R6
010C FE                MOV     R6,A
010D EE                MOV     A,R6
010E 33                RLC     A
010F 95E0              SUBB    A,ACC
0111 FD                MOV     R5,A
0112 FC                MOV     R4,A
0113 900000      R     MOV     DPTR,#value_encoder
0116 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 824
0119 300020            JNB     only_first_time,?C0149
                                           ; SOURCE LINE # 825
011C 900000      R     MOV     DPTR,#value_encoder
011F 120000      E     LCALL   ?C?LLDXDATA
0122 AB00        R     MOV     R3,index
0124 EB                MOV     A,R3
0125 25E0              ADD     A,ACC
0127 25E0              ADD     A,ACC
0129 2400        R     ADD     A,#LOW last_value_encoder
012B F582              MOV     DPL,A
012D E4                CLR     A
012E 3400        R     ADDC    A,#HIGH last_value_encoder
0130 F583              MOV     DPH,A
0132 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 827
0135 E500        R     MOV     A,index
0137 B40202            CJNE    A,#02H,?C0149
                                           ; SOURCE LINE # 828
013A C200        R     CLR     only_first_time
                                           ; SOURCE LINE # 829
013C         ?C0149:
                                           ; SOURCE LINE # 832
013C AF00        R     MOV     R7,index
013E EF                MOV     A,R7
013F 25E0              ADD     A,ACC
0141 25E0              ADD     A,ACC
0143 2400        R     ADD     A,#LOW last_value_encoder
0145 F582              MOV     DPL,A
0147 E4                CLR     A
0148 3400        R     ADDC    A,#HIGH last_value_encoder
014A F583              MOV     DPH,A
014C 120000      E     LCALL   ?C?LLDXDATA0
014F 900000      R     MOV     DPTR,#value_encoder
0152 120000      E     LCALL   ?C?LLDXDATA
0155 120000      E     LCALL   ?C?LSUB
0158 900000      R     MOV     DPTR,#aux
015B 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 64  

                                           ; SOURCE LINE # 852
015E 7F00              MOV     R7,#00H
0160 7EC0              MOV     R6,#0C0H
0162 7D00              MOV     R5,#00H
0164 7C00              MOV     R4,#00H
0166 900000      R     MOV     DPTR,#aux
0169 120000      E     LCALL   ?C?LLDXDATA0
016C D3                SETB    C
016D 120000      E     LCALL   ?C?SLCMP
0170 4011              JC      ?C0151
                                           ; SOURCE LINE # 853
0172 AF00        R     MOV     R7,index
0174 7400        E     MOV     A,#LOW g_meas+010H
0176 2F                ADD     A,R7
0177 F582              MOV     DPL,A
0179 E4                CLR     A
017A 3400        E     ADDC    A,#HIGH g_meas+010H
017C F583              MOV     DPH,A
017E E0                MOVX    A,@DPTR
017F 14                DEC     A
0180 F0                MOVX    @DPTR,A
0181 805F              SJMP    ?C0152
0183         ?C0151:
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
0183 7F00              MOV     R7,#00H
0185 7E40              MOV     R6,#040H
0187 7DFF              MOV     R5,#0FFH
0189 7CFF              MOV     R4,#0FFH
018B 900000      R     MOV     DPTR,#aux
018E 120000      E     LCALL   ?C?LLDXDATA0
0191 C3                CLR     C
0192 120000      E     LCALL   ?C?SLCMP
0195 5011              JNC     ?C0153
                                           ; SOURCE LINE # 856
0197 AF00        R     MOV     R7,index
0199 7400        E     MOV     A,#LOW g_meas+010H
019B 2F                ADD     A,R7
019C F582              MOV     DPL,A
019E E4                CLR     A
019F 3400        E     ADDC    A,#HIGH g_meas+010H
01A1 F583              MOV     DPH,A
01A3 E0                MOVX    A,@DPTR
01A4 04                INC     A
01A5 F0                MOVX    @DPTR,A
01A6 803A              SJMP    ?C0152
01A8         ?C0153:
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
01A8 900000      R     MOV     DPTR,#aux
01AB 120000      E     LCALL   ?C?LLDXDATA
01AE 120000      E     LCALL   _abs
01B1 D3                SETB    C
01B2 EF                MOV     A,R7
01B3 9400              SUBB    A,#00H
01B5 EE                MOV     A,R6
01B6 6480              XRL     A,#080H
01B8 94C0              SUBB    A,#0C0H
01BA 4026              JC      ?C0152
                                           ; SOURCE LINE # 859
01BC AF00        R     MOV     R7,index
01BE 7400        R     MOV     A,#LOW error
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 65  

01C0 2F                ADD     A,R7
01C1 F582              MOV     DPL,A
01C3 E4                CLR     A
01C4 3400        R     ADDC    A,#HIGH error
01C6 F583              MOV     DPH,A
01C8 E0                MOVX    A,@DPTR
01C9 04                INC     A
01CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
01CB AF00        R     MOV     R7,index
01CD 7400        R     MOV     A,#LOW error
01CF 2F                ADD     A,R7
01D0 F582              MOV     DPL,A
01D2 E4                CLR     A
01D3 3400        R     ADDC    A,#HIGH error
01D5 F583              MOV     DPH,A
01D7 E0                MOVX    A,@DPTR
01D8 FF                MOV     R7,A
01D9 EF                MOV     A,R7
01DA C3                CLR     C
01DB 940A              SUBB    A,#0AH
01DD 5003              JNC     $ + 5H
01DF 020000      R     LJMP    ?C0138
01E2         ?C0156:
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 865
01E2         ?C0152:
                                           ; SOURCE LINE # 867
01E2 AF00        R     MOV     R7,index
01E4 7400        R     MOV     A,#LOW error
01E6 2F                ADD     A,R7
01E7 F582              MOV     DPL,A
01E9 E4                CLR     A
01EA 3400        R     ADDC    A,#HIGH error
01EC F583              MOV     DPH,A
01EE E4                CLR     A
01EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
01F0 900000      R     MOV     DPTR,#value_encoder
01F3 120000      E     LCALL   ?C?LLDXDATA
01F6 AB00        R     MOV     R3,index
01F8 EB                MOV     A,R3
01F9 25E0              ADD     A,ACC
01FB 25E0              ADD     A,ACC
01FD 2400        R     ADD     A,#LOW last_value_encoder
01FF F582              MOV     DPL,A
0201 E4                CLR     A
0202 3400        R     ADDC    A,#HIGH last_value_encoder
0204 F583              MOV     DPH,A
0206 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 871
0209 900000      R     MOV     DPTR,#value_encoder
020C 120000      E     LCALL   ?C?LLDXDATA
020F C004              PUSH    AR4
0211 C005              PUSH    AR5
0213 C006              PUSH    AR6
0215 C007              PUSH    AR7
0217 AF00        R     MOV     R7,index
0219 7400        E     MOV     A,#LOW g_meas+010H
021B 2F                ADD     A,R7
021C F582              MOV     DPL,A
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 66  

021E E4                CLR     A
021F 3400        E     ADDC    A,#HIGH g_meas+010H
0221 F583              MOV     DPH,A
0223 E0                MOVX    A,@DPTR
0224 FF                MOV     R7,A
0225 EF                MOV     A,R7
0226 33                RLC     A
0227 95E0              SUBB    A,ACC
0229 FE                MOV     R6,A
022A FD                MOV     R5,A
022B FC                MOV     R4,A
022C 7810              MOV     R0,#010H
022E 120000      E     LCALL   ?C?LSHL
0231 A804              MOV     R0,AR4
0233 A905              MOV     R1,AR5
0235 AA06              MOV     R2,AR6
0237 AB07              MOV     R3,AR7
0239 D007              POP     AR7
023B D006              POP     AR6
023D D005              POP     AR5
023F D004              POP     AR4
0241 120000      E     LCALL   ?C?LADD
0244 900000      R     MOV     DPTR,#value_encoder
0247 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 873
024A AF00        R     MOV     R7,index
024C EF                MOV     A,R7
024D 25E0              ADD     A,ACC
024F 25E0              ADD     A,ACC
0251 2400        E     ADD     A,#LOW c_mem+02EH
0253 F582              MOV     DPL,A
0255 E4                CLR     A
0256 3400        E     ADDC    A,#HIGH c_mem+02EH
0258 F583              MOV     DPH,A
025A 120000      E     LCALL   ?C?LLDXDATA
025D 7B00              MOV     R3,#00H
025F 7A00              MOV     R2,#00H
0261 7980              MOV     R1,#080H
0263 783F              MOV     R0,#03FH
0265 120000      E     LCALL   ?C?FPCMP3
0268 6029              JZ      ?C0157
                                           ; SOURCE LINE # 874
026A 900000      R     MOV     DPTR,#value_encoder
026D 120000      E     LCALL   ?C?LLDXDATA
0270 EC                MOV     A,R4
0271 120000      E     LCALL   ?C?FCASTL
0274 AB00        R     MOV     R3,index
0276 EB                MOV     A,R3
0277 25E0              ADD     A,ACC
0279 25E0              ADD     A,ACC
027B 2400        E     ADD     A,#LOW c_mem+02EH
027D F582              MOV     DPL,A
027F E4                CLR     A
0280 3400        E     ADDC    A,#HIGH c_mem+02EH
0282 F583              MOV     DPH,A
0284 120000      E     LCALL   ?C?LLDXDATA0
0287 120000      E     LCALL   ?C?FPMUL
028A 120000      E     LCALL   ?C?CASTF
028D 900000      R     MOV     DPTR,#value_encoder
0290 120000      E     LCALL   ?C?LSTXDATA
0293         ?C0157:
                                           ; SOURCE LINE # 876
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 67  

0293 900000      R     MOV     DPTR,#value_encoder
0296 120000      E     LCALL   ?C?LLDXDATA
0299 AB00        R     MOV     R3,index
029B EB                MOV     A,R3
029C 25E0              ADD     A,ACC
029E 25E0              ADD     A,ACC
02A0 2400        E     ADD     A,#LOW g_meas
02A2 F582              MOV     DPL,A
02A4 E4                CLR     A
02A5 3400        E     ADDC    A,#HIGH g_meas
02A7 F583              MOV     DPH,A
02A9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 899
02AC         ?C0138:
02AC 22                RET     
             ; FUNCTION _encoder_reading (END)

             ; FUNCTION calibration (BEGIN)
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 914
0000 900000      E     MOV     DPTR,#calibration_flag
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 120000      E     LCALL   ?C?CCASE
0009 0000        R     DW      ?C0172
000B 00                DB      00H
000C 0000        R     DW      ?C0159
000E 01                DB      01H
000F 0000        R     DW      ?C0163
0011 02                DB      02H
0012 0000        R     DW      ?C0168
0014 03                DB      03H
0015 0000        R     DW      ?C0161
0017 04                DB      04H
0018 0000        R     DW      ?C0166
001A 05                DB      05H
001B 0000              DW      00H
001D 0000        R     DW      ?C0172
                                           ; SOURCE LINE # 915
001F         ?C0159:
                                           ; SOURCE LINE # 916
001F 120000      E     LCALL   ISR_RS485_RX_Disable
                                           ; SOURCE LINE # 919
0022 900000      E     MOV     DPTR,#c_mem+02H
0025 120000      E     LCALL   ?C?LLDXDATA
0028 900000      R     MOV     DPTR,#old_k_p
002B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 920
002E 900000      E     MOV     DPTR,#c_mem+06H
0031 120000      E     LCALL   ?C?LLDXDATA
0034 900000      R     MOV     DPTR,#old_k_i
0037 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 921
003A 900000      E     MOV     DPTR,#c_mem+0AH
003D 120000      E     LCALL   ?C?LLDXDATA
0040 900000      R     MOV     DPTR,#old_k_d
0043 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 924
0046 7F00              MOV     R7,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 68  

0048 7E00              MOV     R6,#00H
004A 7D00              MOV     R5,#00H
004C 7C00              MOV     R4,#00H
004E 900000      E     MOV     DPTR,#g_refNew
0051 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 925
0054 7F00              MOV     R7,#00H
0056 7E00              MOV     R6,#00H
0058 7D00              MOV     R5,#00H
005A 7C00              MOV     R4,#00H
005C 900000      E     MOV     DPTR,#g_refNew+04H
005F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 928
0062 900000      E     MOV     DPTR,#g_refNew+08H
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 5403              ANL     A,#03H
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 7005              JNZ     ?C0160
                                           ; SOURCE LINE # 929
006E 7F03              MOV     R7,#03H
0070 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 930
0073         ?C0160:
                                           ; SOURCE LINE # 933
0073 900000      E     MOV     DPTR,#calibration_flag
0076 7404              MOV     A,#04H
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 934
0079 22                RET     
                                           ; SOURCE LINE # 936
007A         ?C0161:
                                           ; SOURCE LINE # 937
007A 900000      R     MOV     DPTR,#pause_counter
007D E0                MOVX    A,@DPTR
007E 04                INC     A
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 939
0080 900000      R     MOV     DPTR,#pause_counter
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 640A              XRL     A,#0AH
0088 6003              JZ      $ + 5H
008A 020000      R     LJMP    ?C0172
                                           ; SOURCE LINE # 940
008D 900000      R     MOV     DPTR,#pause_counter
0090 E4                CLR     A
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 943
0092 7F99              MOV     R7,#099H
0094 7E19              MOV     R6,#019H
0096 7D00              MOV     R5,#00H
0098 7C00              MOV     R4,#00H
009A 900000      E     MOV     DPTR,#c_mem+02H
009D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 944
00A0 7F00              MOV     R7,#00H
00A2 7E00              MOV     R6,#00H
00A4 7D00              MOV     R5,#00H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 69  

00A6 7C00              MOV     R4,#00H
00A8 900000      E     MOV     DPTR,#c_mem+06H
00AB 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 945
00AE 7FCC              MOV     R7,#0CCH
00B0 7E4C              MOV     R6,#04CH
00B2 7D00              MOV     R5,#00H
00B4 7C00              MOV     R4,#00H
00B6 900000      E     MOV     DPTR,#c_mem+0AH
00B9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 947
00BC 900000      E     MOV     DPTR,#calibration_flag
00BF 7402              MOV     A,#02H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
00C2 22                RET     
                                           ; SOURCE LINE # 951
00C3         ?C0163:
                                           ; SOURCE LINE # 953
00C3 900000      E     MOV     DPTR,#g_refNew
00C6 120000      E     LCALL   ?C?LLDXDATA
00C9 EF                MOV     A,R7
00CA 245B              ADD     A,#05BH
00CC FF                MOV     R7,A
00CD EE                MOV     A,R6
00CE 3400              ADDC    A,#00H
00D0 FE                MOV     R6,A
00D1 ED                MOV     A,R5
00D2 3400              ADDC    A,#00H
00D4 FD                MOV     R5,A
00D5 EC                MOV     A,R4
00D6 3400              ADDC    A,#00H
00D8 FC                MOV     R4,A
00D9 900000      E     MOV     DPTR,#g_refNew
00DC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 954
00DF 900000      E     MOV     DPTR,#g_refNew+04H
00E2 120000      E     LCALL   ?C?LLDXDATA
00E5 C3                CLR     C
00E6 EF                MOV     A,R7
00E7 945B              SUBB    A,#05BH
00E9 FF                MOV     R7,A
00EA EE                MOV     A,R6
00EB 9400              SUBB    A,#00H
00ED FE                MOV     R6,A
00EE ED                MOV     A,R5
00EF 9400              SUBB    A,#00H
00F1 FD                MOV     R5,A
00F2 EC                MOV     A,R4
00F3 9400              SUBB    A,#00H
00F5 FC                MOV     R4,A
00F6 900000      E     MOV     DPTR,#g_refNew+04H
00F9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 957
00FC 900000      E     MOV     DPTR,#g_meas+0CH
00FF E0                MOVX    A,@DPTR
0100 FE                MOV     R6,A
0101 A3                INC     DPTR
0102 E0                MOVX    A,@DPTR
0103 FF                MOV     R7,A
0104 D3                SETB    C
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 70  

0105 EF                MOV     A,R7
0106 94E8              SUBB    A,#0E8H
0108 EE                MOV     A,R6
0109 6480              XRL     A,#080H
010B 9483              SUBB    A,#083H
010D 5016              JNC     ?C0165
010F 900000      E     MOV     DPTR,#g_meas+0EH
0112 E0                MOVX    A,@DPTR
0113 FE                MOV     R6,A
0114 A3                INC     DPTR
0115 E0                MOVX    A,@DPTR
0116 FF                MOV     R7,A
0117 D3                SETB    C
0118 EF                MOV     A,R7
0119 94E8              SUBB    A,#0E8H
011B EE                MOV     A,R6
011C 6480              XRL     A,#080H
011E 9483              SUBB    A,#083H
0120 5003              JNC     $ + 5H
0122 020000      R     LJMP    ?C0172
0125         ?C0165:
                                           ; SOURCE LINE # 959
0125 900000      E     MOV     DPTR,#g_ref
0128 120000      E     LCALL   ?C?LLDXDATA
012B 900000      E     MOV     DPTR,#g_mem+04BH
012E EE                MOV     A,R6
012F F0                MOVX    @DPTR,A
0130 A3                INC     DPTR
0131 EF                MOV     A,R7
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 962
0133 900000      R     MOV     DPTR,#old_k_p
0136 120000      E     LCALL   ?C?LLDXDATA
0139 900000      E     MOV     DPTR,#c_mem+02H
013C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 963
013F 900000      R     MOV     DPTR,#old_k_i
0142 120000      E     LCALL   ?C?LLDXDATA
0145 900000      E     MOV     DPTR,#c_mem+06H
0148 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 964
014B 900000      R     MOV     DPTR,#old_k_d
014E 120000      E     LCALL   ?C?LLDXDATA
0151 900000      E     MOV     DPTR,#c_mem+0AH
0154 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 967
0157 7F00              MOV     R7,#00H
0159 7E00              MOV     R6,#00H
015B 7D00              MOV     R5,#00H
015D 7C00              MOV     R4,#00H
015F 900000      E     MOV     DPTR,#g_refNew
0162 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 968
0165 7F00              MOV     R7,#00H
0167 7E00              MOV     R6,#00H
0169 7D00              MOV     R5,#00H
016B 7C00              MOV     R4,#00H
016D 900000      E     MOV     DPTR,#g_refNew+04H
0170 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 971
0173 900000      E     MOV     DPTR,#calibration_flag
0176 7405              MOV     A,#05H
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 71  

0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
0179 22                RET     
                                           ; SOURCE LINE # 975
017A         ?C0166:
                                           ; SOURCE LINE # 976
017A 900000      R     MOV     DPTR,#pause_counter
017D E0                MOVX    A,@DPTR
017E 04                INC     A
017F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 978
0180 900000      R     MOV     DPTR,#pause_counter
0183 E0                MOVX    A,@DPTR
0184 FF                MOV     R7,A
0185 EF                MOV     A,R7
0186 640A              XRL     A,#0AH
0188 7033              JNZ     ?C0172
                                           ; SOURCE LINE # 979
018A 900000      R     MOV     DPTR,#pause_counter
018D E4                CLR     A
018E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
018F 900000      E     MOV     DPTR,#calibration_flag
0192 7403              MOV     A,#03H
0194 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
0195 22                RET     
                                           ; SOURCE LINE # 985
0196         ?C0168:
                                           ; SOURCE LINE # 987
0196 900000      E     MOV     DPTR,#g_refNew+08H
0199 E0                MOVX    A,@DPTR
019A FF                MOV     R7,A
019B EF                MOV     A,R7
019C 5403              ANL     A,#03H
019E FF                MOV     R7,A
019F EF                MOV     A,R7
01A0 7005              JNZ     ?C0169
                                           ; SOURCE LINE # 988
01A2 7F00              MOV     R7,#00H
01A4 120000      E     LCALL   _MOTOR_ON_OFF_Write
                                           ; SOURCE LINE # 989
01A7         ?C0169:
                                           ; SOURCE LINE # 992
01A7 7F08              MOV     R7,#08H
01A9 7E00              MOV     R6,#00H
01AB 120000      E     LCALL   _memStore
                                           ; SOURCE LINE # 993
01AE 7F00              MOV     R7,#00H
01B0 7E00              MOV     R6,#00H
01B2 120000      E     LCALL   _memStore
                                           ; SOURCE LINE # 995
01B5 900000      E     MOV     DPTR,#calibration_flag
01B8 E4                CLR     A
01B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
01BA 120000      E     LCALL   ISR_RS485_RX_Enable
                                           ; SOURCE LINE # 998
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1001
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 72  

                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
01BD         ?C0172:
01BD 22                RET     
             ; FUNCTION calibration (END)

             ; FUNCTION pwm_limit_search (BEGIN)
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1015
0000 7F9C              MOV     R7,#09CH
0002 7E63              MOV     R6,#063H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      E     MOV     DPTR,#dev_tension
000B 120000      E     LCALL   ?C?LLDXDATA0
000E D3                SETB    C
000F 120000      E     LCALL   ?C?SLCMP
0012 4006              JC      ?C0173
                                           ; SOURCE LINE # 1016
0014 900000      E     MOV     DPTR,#dev_pwm_limit
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
0019 22                RET     
001A         ?C0173:
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1018
001A 7F40              MOV     R7,#040H
001C 7E1F              MOV     R6,#01FH
001E 7D00              MOV     R5,#00H
0020 7C00              MOV     R4,#00H
0022 900000      E     MOV     DPTR,#dev_tension
0025 120000      E     LCALL   ?C?LLDXDATA0
0028 C3                CLR     C
0029 120000      E     LCALL   ?C?SLCMP
002C 5007              JNC     ?C0175
                                           ; SOURCE LINE # 1019
002E 900000      E     MOV     DPTR,#dev_pwm_limit
0031 7464              MOV     A,#064H
0033 F0                MOVX    @DPTR,A
0034 22                RET     
0035         ?C0175:
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1021
0035 900000      E     MOV     DPTR,#dev_tension
0038 120000      E     LCALL   ?C?LLDXDATA
003B EF                MOV     A,R7
003C 24C0              ADD     A,#0C0H
003E FF                MOV     R7,A
003F EE                MOV     A,R6
0040 34E0              ADDC    A,#0E0H
0042 FE                MOV     R6,A
0043 ED                MOV     A,R5
0044 34FF              ADDC    A,#0FFH
0046 FD                MOV     R5,A
0047 EC                MOV     A,R4
0048 34FF              ADDC    A,#0FFH
004A FC                MOV     R4,A
004B 7809              MOV     R0,#09H
004D 120000      E     LCALL   ?C?SLSHR
0050 8F00        R     MOV     index,R7
                                           ; SOURCE LINE # 1022
C51 COMPILER V9.51   INTERRUPTIONS                                                         05/18/2016 12:36:52 PAGE 73  

0052 AF00        R     MOV     R7,index
0054 EF                MOV     A,R7
0055 900000      R     MOV     DPTR,#hitech_pwm_preload_values
0058 93                MOVC    A,@A+DPTR
0059 FF                MOV     R7,A
005A 900000      E     MOV     DPTR,#dev_pwm_limit
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
005F         ?C0177:
005F 22                RET     
             ; FUNCTION pwm_limit_search (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5340    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =    182      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7      45
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
