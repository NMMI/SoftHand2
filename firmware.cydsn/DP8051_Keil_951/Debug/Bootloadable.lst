C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE BOOTLOADABLE
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\Bootloadable.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Bootloadable.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2
                    -) PR(.\DP8051_Keil_951\Debug/Bootloadable.lst) CD OT(2,SIZE) OJ(.\DP8051_Keil_951\Debug\Bootloadable.obj)

line level    source

   1          /****************************************************************************//**
   2          * \file Bootloadable.c
   3          * \version 1.40
   4          *
   5          * \brief
   6          *   Provides an API for the Bootloadable application.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "Bootloadable.h"
  17          
  18          /**
  19           \defgroup functions_group Functions
  20           @{
  21          */
  22          
  23          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
              static cystatus Bootloadable_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLARGE \
                                             ;
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
  27          
  28          /*******************************************************************************
  29          * Function Name: Bootloadable_Load
  30          ****************************************************************************//**
  31          *
  32          * \brief
  33          *  Schedules the Bootloader/Launcher to be launched and then performs
  34          *  a software reset to launch it
  35          *
  36          * \return
  37          *  This method will never return. It will load a new application and reset
  38          *  the device.
  39          *
  40          *******************************************************************************/
  41          void Bootloadable_Load(void) 
  42          {
  43   1          /* Schedule Bootloader to start after reset */
  44   1          Bootloadable_SET_RUN_TYPE(Bootloadable_SCHEDULE_BTLDR);
  45   1      
  46   1          CySoftwareReset();
  47   1      }
  48          
  49          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
              /*******************************************************************************
              * Function Name: Bootloadable_GetActiveApplication
              ****************************************************************************//**
              *
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 2   

              * \brief
              *   Gets the application which will be loaded after a next reset event.
              *   NOTE Intended for the combination project type ONLY!
              *
              * \return 
              *  A number of the current active application set in the metadata section.
              *  \n  0 - app#0 is set as active.
              *  \n  1 - app#1 is set as active.
              *
              * \note If neither of the applications is set active, then the API returns 0x02.
              *
              *******************************************************************************/
              uint8 Bootloadable_GetActiveApplication(void) CYSMALL \
                                        
              {   
                  uint8 result = Bootloadable_MD_BTLDB_ACTIVE_NONE;
                  
                  if (0u != Bootloadable_GET_CODE_DATA( \
                            Bootloadable_MD_BTLDB_ACTIVE_OFFSET(Bootloadable_MD_BTLDB_ACTIVE_0))) 
                  {
                      result = Bootloadable_MD_BTLDB_ACTIVE_0;
                  }
                  else if (0u != Bootloadable_GET_CODE_DATA( \
                                 Bootloadable_MD_BTLDB_ACTIVE_OFFSET(Bootloadable_MD_BTLDB_ACTIVE_1)))
                  {
                      result = Bootloadable_MD_BTLDB_ACTIVE_1;    
                  }
                  else
                  {
                      /*Do nothing, result is none*/
                  }
                  
                  return (result);
              }
              
              /*******************************************************************************
              * Function Name: Bootloadable_SetActiveApplication
              ****************************************************************************//**
              *
              * \brief 
              *   Sets the application which will be loaded after a next reset event.          
              *   
              * \details
              * Theory: 
              *   This API sets in the Flash (metadata section) the given active application 
              *   number.
              *          
              *   NOTE The active application number is not set directly, but the boolean 
              *   mark instead means that the application is active or not for the relative 
              *   metadata. Both metadata sections are updated. For example, if the second 
              *   application is to be set active, then in the metadata section for the first 
              *   application there will be a "0" written, which means that it is not active, and 
              *   for the second metadata section there will be a "1" written, which means that it is 
              *   active. 
              *
              *   NOTE Intended for the combination project type ONLY!
              *
              * \param appId  
              *   The active application number to be written to flash (metadata section) 
              *   NOTE Possible values are:
              *   0 - for the first application
              *   1 - for the second application.
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 3   

              *   Any other number is considered invalid. 
              *
              * \return 
              *   A status of writing to flash operation.
              *   \n CYRET_SUCCESS - Returned if appId was successfully changed. 
              *   \n CYRET_BAD_PARAM - Returned if the parameter appID passed to the function has the 
              *                       same value as the active application ID. 
              *   \note - The other non-zero value is considered as a failure during writing to flash.  
              *
              *   \note - This API does not update Bootloader_activeApp variable.
              *
              *******************************************************************************/
              cystatus Bootloadable_SetActiveApplication(uint8 appId) CYSMALL \
                              
              {
                  cystatus result = CYRET_SUCCESS;
              
                  uint8 CYDATA idx;
                  
                  /* If invalid application number */
                  if (appId > Bootloadable_MD_BTLDB_ACTIVE_1)
                  {
                      result = CYRET_BAD_PARAM;
                  }
                  else
                  {
                      /* If appID has same value as active application ID */
                      if (1u == Bootloadable_GET_CODE_DATA(Bootloadable_MD_BTLDB_ACTIVE_OFFSET(appId)))
                      {
                          result = CYRET_BAD_PARAM;
                      }
                      else
                      {
                          /* Updating metadata section */
                          for(idx = 0u; idx < Bootloadable_MAX_NUM_OF_BTLDB; idx++)
                          {
                              result |= Bootloadable_WriteFlashByte((uint32) Bootloadable_MD_BTLDB_ACTIVE_OFFSET(idx), \
                                                                                                          (uint8)(idx ==
             - appId));
                          }
                      }
                  }
                  
                  return (result);
              }
              
              /*******************************************************************************
              * Function Name: Bootloadable_WriteFlashByte
              ****************************************************************************//**
              *
              * \brief 
              *   This API writes to flash the specified data.
              *
              * \param address 
              *   The address in flash.
              *
              * \param inputValue 
              *   One-byte data.
              *
              * \return 
              *   A status of the writing to flash procedure.
              *
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 4   

              *******************************************************************************/
              static cystatus Bootloadable_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLARGE \
                                             
              {
                  cystatus result = CYRET_SUCCESS;
                  uint32 flsAddr = address - CYDEV_FLASH_BASE;
                  uint8  rowData[CYDEV_FLS_ROW_SIZE];
              
                  #if !(CY_PSOC4)
                      uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
                  #endif  /* !(CY_PSOC4) */
              
                  #if (CY_PSOC4)
                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
                  #else
                      uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
                  #endif  /* (CY_PSOC4) */
              
                  uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
                  uint16 idx;
              
                  for(idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
                  {
                      rowData[idx] = (uint8)Bootloadable_GET_CODE_DATA(baseAddr + idx);
                  }
              
                  rowData[address % CYDEV_FLS_ROW_SIZE] = inputValue;
              
                  #if(CY_PSOC4)
                      result = CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
                      result = CyWriteRowData(arrayId, rowNum, rowData);
                  #endif  /* (CY_PSOC4) */
              
                  #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing to flash, data in the instruction cache can become stale.
                      * Therefore, the cache data does not correlate to the data just written to
                      * flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
                  return (result);
              }
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
 223          /** @} functions_group */
 224          
 225          /*******************************************************************************
 226          * The following code is OBSOLETE and must not be used.
 227          *******************************************************************************/
 228          void Bootloadable_SetFlashByte(uint32 address, uint8 runType) 
 229          {
 230   1          uint32 flsAddr = address - CYDEV_FLASH_BASE;
 231   1          uint8  rowData[CYDEV_FLS_ROW_SIZE];
 232   1      
 233   1          #if !(CY_PSOC4)
 234   1              uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
 235   1          #endif  /* !(CY_PSOC4) */
 236   1      
 237   1          #if (CY_PSOC4)
                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 5   

                  #else
 240   1              uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
 241   1          #endif  /* (CY_PSOC4) */
 242   1      
 243   1          uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
 244   1          uint16 idx;
 245   1      
 246   1      
 247   1          for (idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
 248   1          {
 249   2              rowData[idx] = Bootloadable_GET_CODE_DATA(baseAddr + idx);
 250   2          }
 251   1          rowData[address % CYDEV_FLS_ROW_SIZE] = runType;
 252   1      
 253   1          #if(CY_PSOC4)
                      (void) CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
 256   1              (void) CyWriteRowData(arrayId, rowNum, rowData);
 257   1          #endif  /* (CY_PSOC4) */
 258   1      
 259   1          #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing to flash, data in the instruction cache can become obsolete.
                      * Therefore, the cache data does not correlate to the data just written to
                      * flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
 268   1      }
 269          
 270          /* [] END OF FILE */
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Bootloadable_Load (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 44
0000 9046FA            MOV     DPTR,#046FAH
0003 7440              MOV     A,#040H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 47
0009 22                RET     
             ; FUNCTION Bootloadable_Load (END)

             ; FUNCTION _Bootloadable_SetFlashByte (BEGIN)
                                           ; SOURCE LINE # 228
0000 900000      R     MOV     DPTR,#address
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0006 900000      R     MOV     DPTR,#address
0009 120000      E     LCALL   ?C?LLDXDATA
000C EF                MOV     A,R7
000D 2400              ADD     A,#00H
000F FF                MOV     R7,A
0010 EE                MOV     A,R6
0011 3400              ADDC    A,#00H
0013 FE                MOV     R6,A
0014 ED                MOV     A,R5
0015 34F0              ADDC    A,#0F0H
0017 FD                MOV     R5,A
0018 EC                MOV     A,R4
0019 34FF              ADDC    A,#0FFH
001B FC                MOV     R4,A
001C 900000      R     MOV     DPTR,#flsAddr
001F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 234
0022 7B00              MOV     R3,#00H
0024 7A00              MOV     R2,#00H
0026 7901              MOV     R1,#01H
0028 7800              MOV     R0,#00H
002A 900000      R     MOV     DPTR,#flsAddr
002D 120000      E     LCALL   ?C?LLDXDATA
0030 120000      E     LCALL   ?C?ULDIV
0033 900000      R     MOV     DPTR,#arrayId
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0038 900000      R     MOV     DPTR,#flsAddr
003B 120000      E     LCALL   ?C?LLDXDATA
003E EF                MOV     A,R7
003F 54FF              ANL     A,#0FFH
0041 FF                MOV     R7,A
0042 EE                MOV     A,R6
0043 54FF              ANL     A,#0FFH
0045 FE                MOV     R6,A
0046 ED                MOV     A,R5
0047 5400              ANL     A,#00H
0049 FD                MOV     R5,A
004A EC                MOV     A,R4
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 7   

004B 5400              ANL     A,#00H
004D FC                MOV     R4,A
004E 7B00              MOV     R3,#00H
0050 7A01              MOV     R2,#01H
0052 7900              MOV     R1,#00H
0054 7800              MOV     R0,#00H
0056 120000      E     LCALL   ?C?ULDIV
0059 900000      R     MOV     DPTR,#rowNum
005C EE                MOV     A,R6
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0061 900000      R     MOV     DPTR,#address
0064 120000      E     LCALL   ?C?LLDXDATA
0067 EF                MOV     A,R7
0068 54FF              ANL     A,#0FFH
006A FB                MOV     R3,A
006B EE                MOV     A,R6
006C 5400              ANL     A,#00H
006E FA                MOV     R2,A
006F ED                MOV     A,R5
0070 5400              ANL     A,#00H
0072 F9                MOV     R1,A
0073 EC                MOV     A,R4
0074 5400              ANL     A,#00H
0076 F8                MOV     R0,A
0077 900000      R     MOV     DPTR,#address
007A 120000      E     LCALL   ?C?LLDXDATA
007D 120000      E     LCALL   ?C?LSUB
0080 900000      R     MOV     DPTR,#baseAddr
0083 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 247
0086 900000      R     MOV     DPTR,#idx
0089 E4                CLR     A
008A F0                MOVX    @DPTR,A
008B A3                INC     DPTR
008C E4                CLR     A
008D F0                MOVX    @DPTR,A
008E         ?C0002:
008E 900000      R     MOV     DPTR,#idx
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 C3                CLR     C
0097 EE                MOV     A,R6
0098 9401              SUBB    A,#01H
009A 503B              JNC     ?C0003
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
009C 900000      R     MOV     DPTR,#baseAddr
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 900000      R     MOV     DPTR,#idx
00A5 E0                MOVX    A,@DPTR
00A6 FC                MOV     R4,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 FD                MOV     R5,A
00AA EF                MOV     A,R7
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 8   

00AB 2D                ADD     A,R5
00AC FF                MOV     R7,A
00AD EE                MOV     A,R6
00AE 3C                ADDC    A,R4
00AF FE                MOV     R6,A
00B0 8F82              MOV     DPL,R7
00B2 8E83              MOV     DPH,R6
00B4 E4                CLR     A
00B5 93                MOVC    A,@A+DPTR
00B6 FF                MOV     R7,A
00B7 900000      R     MOV     DPTR,#idx
00BA E0                MOVX    A,@DPTR
00BB FC                MOV     R4,A
00BC A3                INC     DPTR
00BD E0                MOVX    A,@DPTR
00BE FD                MOV     R5,A
00BF 7400        R     MOV     A,#LOW rowData
00C1 2D                ADD     A,R5
00C2 F582              MOV     DPL,A
00C4 7400        R     MOV     A,#HIGH rowData
00C6 3C                ADDC    A,R4
00C7 F583              MOV     DPH,A
00C9 EF                MOV     A,R7
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
00CB 900000      R     MOV     DPTR,#idx
00CE E4                CLR     A
00CF 75F001            MOV     B,#01H
00D2 120000      E     LCALL   ?C?IILDX
00D5 80B7              SJMP    ?C0002
00D7         ?C0003:
                                           ; SOURCE LINE # 251
00D7 900000      R     MOV     DPTR,#runType
00DA E0                MOVX    A,@DPTR
00DB FB                MOV     R3,A
00DC 900000      R     MOV     DPTR,#address
00DF 120000      E     LCALL   ?C?LLDXDATA
00E2 EF                MOV     A,R7
00E3 54FF              ANL     A,#0FFH
00E5 FF                MOV     R7,A
00E6 EE                MOV     A,R6
00E7 5400              ANL     A,#00H
00E9 FE                MOV     R6,A
00EA ED                MOV     A,R5
00EB 5400              ANL     A,#00H
00ED FD                MOV     R5,A
00EE EC                MOV     A,R4
00EF 5400              ANL     A,#00H
00F1 FC                MOV     R4,A
00F2 7400        R     MOV     A,#LOW rowData
00F4 2F                ADD     A,R7
00F5 F582              MOV     DPL,A
00F7 7400        R     MOV     A,#HIGH rowData
00F9 3E                ADDC    A,R6
00FA F583              MOV     DPH,A
00FC EB                MOV     A,R3
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
00FE 900000      R     MOV     DPTR,#arrayId
0101 E0                MOVX    A,@DPTR
0102 FF                MOV     R7,A
0103 900000      R     MOV     DPTR,#rowNum
C51 COMPILER V9.51   BOOTLOADABLE                                                          05/11/2016 14:38:09 PAGE 9   

0106 E0                MOVX    A,@DPTR
0107 FC                MOV     R4,A
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
010A FD                MOV     R5,A
010B 7B01              MOV     R3,#01H
010D 7A00        R     MOV     R2,#HIGH rowData
010F 7900        R     MOV     R1,#LOW rowData
0111 120000      E     LCALL   _CyWriteRowData
                                           ; SOURCE LINE # 268
0114 22                RET     
             ; FUNCTION _Bootloadable_SetFlashByte (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    287    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     274
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
