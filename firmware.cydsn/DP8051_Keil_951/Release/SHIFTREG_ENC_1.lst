C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SHIFTREG_ENC_1
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\SHIFTREG_ENC_1.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\SHIFTREG_ENC_1.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(N
                    -DEBUG) WL(2) PR(.\DP8051_Keil_951\Release/SHIFTREG_ENC_1.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\SHIFTREG_ENC_1
                    -.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: SHIFTREG_ENC_1.c
   3          * Version 2.30
   4          *
   5          * Description:
   6          *  This file provides the API source code for the Shift Register component.
   7          *
   8          * Note: none
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include "SHIFTREG_ENC_1.h"
  18          
  19          uint8 SHIFTREG_ENC_1_initVar = 0u;
  20          
  21          
  22          /*******************************************************************************
  23          * Function Name: SHIFTREG_ENC_1_Start
  24          ********************************************************************************
  25          *
  26          * Summary:
  27          *  Starts the Shift Register.
  28          *
  29          * Parameters:
  30          *  None.
  31          *
  32          * Return:
  33          *  None.
  34          *
  35          * Global Variables:
  36          *  SHIFTREG_ENC_1_initVar - used to check initial configuration, modified on
  37          *  first function call.
  38          *
  39          * Reentrant:
  40          *  No.
  41          *
  42          *******************************************************************************/
  43          void SHIFTREG_ENC_1_Start(void) 
  44          {
  45   1          if(0u == SHIFTREG_ENC_1_initVar)
  46   1          {
  47   2              SHIFTREG_ENC_1_Init();
  48   2              SHIFTREG_ENC_1_initVar = 1u; /* Component initialized */
  49   2          }
  50   1      
  51   1          SHIFTREG_ENC_1_Enable();
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 2   

  52   1      }
  53          
  54          
  55          /*******************************************************************************
  56          * Function Name: SHIFTREG_ENC_1_Enable
  57          ********************************************************************************
  58          *
  59          * Summary:
  60          *  Enables the Shift Register.
  61          *
  62          * Parameters:
  63          *  void.
  64          *
  65          * Return:
  66          *  void.
  67          *
  68          *******************************************************************************/
  69          void SHIFTREG_ENC_1_Enable(void) 
  70          {
  71   1          /* Changing address in Datapath Control Store
  72   1             from NOP to component state machine commands space */
  73   1          SHIFTREG_ENC_1_SR_CONTROL |= SHIFTREG_ENC_1_CLK_EN;
  74   1      
  75   1          SHIFTREG_ENC_1_EnableInt();
  76   1      }
  77          
  78          
  79          /*******************************************************************************
  80          * Function Name: SHIFTREG_ENC_1_Init
  81          ********************************************************************************
  82          *
  83          * Summary:
  84          *  Initializes Tx and/or Rx interrupt sources with initial values.
  85          *
  86          * Parameters:
  87          *  void.
  88          *
  89          * Return:
  90          *  void.
  91          *
  92          *******************************************************************************/
  93          void SHIFTREG_ENC_1_Init(void) 
  94          {
  95   1          SHIFTREG_ENC_1_SetIntMode(SHIFTREG_ENC_1_INT_SRC);
  96   1      }
  97          
  98          
  99          /*******************************************************************************
 100          * Function Name: SHIFTREG_ENC_1_Stop
 101          ********************************************************************************
 102          *
 103          * Summary:
 104          *  Disables the Shift Register
 105          *
 106          * Parameters:
 107          *  None.
 108          *
 109          * Return:
 110          *  None.
 111          *
 112          *******************************************************************************/
 113          void SHIFTREG_ENC_1_Stop(void) 
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 3   

 114          {
 115   1          /*changing Datapath Control Store address to NOP space*/
 116   1          SHIFTREG_ENC_1_SR_CONTROL &= ((uint8) ~SHIFTREG_ENC_1_CLK_EN);
 117   1          SHIFTREG_ENC_1_DisableInt();
 118   1      }
 119          
 120          
 121          /*******************************************************************************
 122          * Function Name: SHIFTREG_ENC_1_EnableInt
 123          ********************************************************************************
 124          *
 125          * Summary:
 126          *  Enables the Shift Register interrupt.
 127          *
 128          * Parameters:
 129          *  None.
 130          *
 131          * Return:
 132          *  None.
 133          *
 134          *******************************************************************************/
 135          void SHIFTREG_ENC_1_EnableInt(void) 
 136          {
 137   1          uint8 interruptState;
 138   1      
 139   1          interruptState = CyEnterCriticalSection();
 140   1          SHIFTREG_ENC_1_SR_AUX_CONTROL |= SHIFTREG_ENC_1_INTERRUPTS_ENABLE;
 141   1          CyExitCriticalSection(interruptState);
 142   1      }
 143          
 144          
 145          /*******************************************************************************
 146          * Function Name: SHIFTREG_ENC_1_DisableInt
 147          ********************************************************************************
 148          *
 149          * Summary:
 150          *  Disables the Shift Register interrupt.
 151          *
 152          * Parameters:
 153          *  None.
 154          *
 155          * Return:
 156          *  None.
 157          *
 158          *******************************************************************************/
 159          void SHIFTREG_ENC_1_DisableInt(void) 
 160          {
 161   1          uint8 interruptState;
 162   1      
 163   1          interruptState = CyEnterCriticalSection();
 164   1          SHIFTREG_ENC_1_SR_AUX_CONTROL &= ((uint8) ~SHIFTREG_ENC_1_INTERRUPTS_ENABLE);
 165   1          CyExitCriticalSection(interruptState);
 166   1      }
 167          
 168          
 169          /*******************************************************************************
 170          * Function Name: SHIFTREG_ENC_1_GetFIFOStatus
 171          ********************************************************************************
 172          *
 173          * Summary:
 174          *  Returns current status of input or output FIFO.
 175          *
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 4   

 176          * Parameters:
 177          *  fifoId.
 178          *
 179          * Return:
 180          *  FIFO status.
 181          *
 182          *******************************************************************************/
 183          uint8 SHIFTREG_ENC_1_GetFIFOStatus(uint8 fifoId) 
 184          {
 185   1          uint8 result;
 186   1      
 187   1          result = SHIFTREG_ENC_1_RET_FIFO_NOT_DEFINED;
 188   1      
 189   1          #if(0u != SHIFTREG_ENC_1_USE_INPUT_FIFO)
                      if(SHIFTREG_ENC_1_IN_FIFO == fifoId)
                      {
                          switch(SHIFTREG_ENC_1_GET_IN_FIFO_STS)
                          {
                              case SHIFTREG_ENC_1_IN_FIFO_FULL :
                                  result = SHIFTREG_ENC_1_RET_FIFO_FULL;
                                  break;
              
                              case SHIFTREG_ENC_1_IN_FIFO_EMPTY :
                                  result = SHIFTREG_ENC_1_RET_FIFO_EMPTY;
                                  break;
              
                              case SHIFTREG_ENC_1_IN_FIFO_PARTIAL:
                                  result = SHIFTREG_ENC_1_RET_FIFO_PARTIAL;
                                  break;
                                  
                              default:
                                  /* Initial result value, while 
                                     IN_FIFO_EMPTY case is false 
                                   */
                                  result = SHIFTREG_ENC_1_RET_FIFO_EMPTY;
                                  break;
                          }   
                      }
                  #endif /* (0u != SHIFTREG_ENC_1_USE_INPUT_FIFO) */
 215   1      
 216   1          if(SHIFTREG_ENC_1_OUT_FIFO == fifoId)
 217   1          {
 218   2              switch(SHIFTREG_ENC_1_GET_OUT_FIFO_STS)
 219   2              {
 220   3                  case SHIFTREG_ENC_1_OUT_FIFO_FULL :
 221   3                      result = SHIFTREG_ENC_1_RET_FIFO_FULL;
 222   3                      break;
 223   3      
 224   3                  case SHIFTREG_ENC_1_OUT_FIFO_EMPTY :
 225   3                      result = SHIFTREG_ENC_1_RET_FIFO_EMPTY;
 226   3                      break;
 227   3      
 228   3                  case SHIFTREG_ENC_1_OUT_FIFO_PARTIAL :
 229   3                      result = SHIFTREG_ENC_1_RET_FIFO_PARTIAL;
 230   3                      break;
 231   3      
 232   3                  default:
 233   3                      /* Initial result value, while 
 234   3                         OUT_FIFO_FULL case is false 
 235   3                       */
 236   3                      result = SHIFTREG_ENC_1_RET_FIFO_FULL;
 237   3                      break;
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 5   

 238   3              }
 239   2          }
 240   1      
 241   1          return(result);
 242   1      }
 243          
 244          
 245          /*******************************************************************************
 246          * Function Name: SHIFTREG_ENC_1_SetIntMode
 247          ********************************************************************************
 248          *
 249          * Summary:
 250          *  Sets the Interrupt Source for the Shift Register interrupt. Multiple
 251          *  sources may be ORed together
 252          *
 253          * Parameters:
 254          *  interruptSource: Byte containing the constant for the selected interrupt
 255          *  source/s.
 256          *
 257          * Return:
 258          *  None.
 259          *
 260          *******************************************************************************/
 261          void SHIFTREG_ENC_1_SetIntMode(uint8 interruptSource) 
 262          {
 263   1          SHIFTREG_ENC_1_SR_STATUS_MASK &= ((uint8) ~SHIFTREG_ENC_1_INTS_EN_MASK);          /* Clear existing in
             -t */
 264   1          SHIFTREG_ENC_1_SR_STATUS_MASK |= (interruptSource & SHIFTREG_ENC_1_INTS_EN_MASK); /* Set int */
 265   1      }
 266          
 267          
 268          /*******************************************************************************
 269          * Function Name: SHIFTREG_ENC_1_GetIntStatus
 270          ********************************************************************************
 271          *
 272          * Summary:
 273          *  Gets the Shift Register Interrupt status.
 274          *
 275          * Parameters:
 276          *  None.
 277          *
 278          * Return:
 279          *  Byte containing the constant for the selected interrupt source/s.
 280          *
 281          *******************************************************************************/
 282          uint8 SHIFTREG_ENC_1_GetIntStatus(void) 
 283          {
 284   1          return(SHIFTREG_ENC_1_SR_STATUS & SHIFTREG_ENC_1_INTS_EN_MASK);
 285   1      }
 286          
 287          
 288          /*******************************************************************************
 289          * Function Name: SHIFTREG_ENC_1_WriteRegValue
 290          ********************************************************************************
 291          *
 292          * Summary:
 293          *  Send state directly to shift register
 294          *
 295          * Parameters:
 296          *  shiftData: containing shift register state.
 297          *
 298          * Return:
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 6   

 299          *  None.
 300          *
 301          *******************************************************************************/
 302          void SHIFTREG_ENC_1_WriteRegValue(uint32 shiftData)
 303                                                                               
 304          {
 305   1          CY_SET_REG24(SHIFTREG_ENC_1_SHIFT_REG_LSB_PTR, shiftData);
 306   1      }
 307          
 308          
 309          #if(0u != SHIFTREG_ENC_1_USE_INPUT_FIFO)
                  /*******************************************************************************
                  * Function Name: SHIFTREG_ENC_1_WriteData
                  ********************************************************************************
                  *
                  * Summary:
                  *  Send state to FIFO for later transfer to shift register based on the Load
                  *  input
                  *
                  * Parameters:
                  *  shiftData: containing shift register state.
                  *
                  * Return:
                  *  Indicates: successful execution of function
                  *  when FIFO is empty; and error when FIFO is full.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
                  cystatus SHIFTREG_ENC_1_WriteData(uint32 shiftData)
                                                                                       
                  {
                      cystatus result;
              
                      result = CYRET_INVALID_STATE;
              
                      /* Writes data into the input FIFO if it is not FULL */
                      if(SHIFTREG_ENC_1_RET_FIFO_FULL != (SHIFTREG_ENC_1_GetFIFOStatus(SHIFTREG_ENC_1_IN_FIFO)))
                      {
                          CY_SET_REG24(SHIFTREG_ENC_1_IN_FIFO_VAL_LSB_PTR, shiftData);
                          result = CYRET_SUCCESS;
                      }
              
                      return(result);
                  }
              #endif /* (0u != SHIFTREG_ENC_1_USE_INPUT_FIFO) */
 346          
 347          
 348          #if(0u != SHIFTREG_ENC_1_USE_OUTPUT_FIFO)
 349              /*******************************************************************************
 350              * Function Name: SHIFTREG_ENC_1_ReadData
 351              ********************************************************************************
 352              *
 353              * Summary:
 354              *  Returns state in FIFO due to Store input.
 355              *
 356              * Parameters:
 357              *  None.
 358              *
 359              * Return:
 360              *  Shift Register state
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 7   

 361              *
 362              * Reentrant:
 363              *  No.
 364              *
 365              *******************************************************************************/
 366              uint32 SHIFTREG_ENC_1_ReadData(void) 
 367              {
 368   1              return(CY_GET_REG24(SHIFTREG_ENC_1_OUT_FIFO_VAL_LSB_PTR));
 369   1          }
 370          #endif /* (0u != SHIFTREG_ENC_1_USE_OUTPUT_FIFO) */
 371          
 372          
 373          /*******************************************************************************
 374          * Function Name: SHIFTREG_ENC_1_ReadRegValue
 375          ********************************************************************************
 376          *
 377          * Summary:
 378          *  Directly returns current state in shift register, not data in FIFO due
 379          *  to Store input.
 380          *
 381          * Parameters:
 382          *  None.
 383          *
 384          * Return:
 385          *  Shift Register state. Clears output FIFO.
 386          *
 387          * Reentrant:
 388          *  No.
 389          *
 390          *******************************************************************************/
 391          uint32 SHIFTREG_ENC_1_ReadRegValue(void) 
 392          {
 393   1          uint32 result;
 394   1      
 395   1          /* Clear FIFO before software capture */
 396   1          while(SHIFTREG_ENC_1_RET_FIFO_EMPTY != SHIFTREG_ENC_1_GetFIFOStatus(SHIFTREG_ENC_1_OUT_FIFO))
 397   1          {
 398   2              (void) CY_GET_REG24(SHIFTREG_ENC_1_OUT_FIFO_VAL_LSB_PTR);
 399   2          }
 400   1      
 401   1          /* Read of 8 bits from A1 causes capture to output FIFO */
 402   1          (void) CY_GET_REG8(SHIFTREG_ENC_1_SHIFT_REG_CAPTURE_PTR);
 403   1      
 404   1          /* Read output FIFO */
 405   1          result  = CY_GET_REG24(SHIFTREG_ENC_1_OUT_FIFO_VAL_LSB_PTR);
 406   1          
 407   1          #if(0u != (SHIFTREG_ENC_1_SR_SIZE % 8u))
 408   1              result &= ((uint32) SHIFTREG_ENC_1_SR_MASK);
 409   1          #endif /* (0u != (SHIFTREG_ENC_1_SR_SIZE % 8u)) */
 410   1          
 411   1          return(result);
 412   1      }
 413          
 414          
 415          /* [] END OF FILE */
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION SHIFTREG_ENC_1_Start (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0000 900000      R     MOV     DPTR,#SHIFTREG_ENC_1_initVar
0003 E0                MOVX    A,@DPTR
0004 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0006 120000      R     LCALL   SHIFTREG_ENC_1_Init
                                           ; SOURCE LINE # 48
0009 900000      R     MOV     DPTR,#SHIFTREG_ENC_1_initVar
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
000F         ?C0001:
                                           ; SOURCE LINE # 51
000F 120000      R     LCALL   SHIFTREG_ENC_1_Enable
                                           ; SOURCE LINE # 52
0012 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_Start (END)

             ; FUNCTION SHIFTREG_ENC_1_Enable (BEGIN)
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 73
0000 90647C            MOV     DPTR,#0647CH
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0007 120000      R     LCALL   SHIFTREG_ENC_1_EnableInt
                                           ; SOURCE LINE # 76
000A 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_Enable (END)

             ; FUNCTION SHIFTREG_ENC_1_Init (BEGIN)
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
0000 7F02              MOV     R7,#02H
0002 120000      R     LCALL   _SHIFTREG_ENC_1_SetIntMode
                                           ; SOURCE LINE # 96
0005 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_Init (END)

             ; FUNCTION SHIFTREG_ENC_1_Stop (BEGIN)
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 116
0000 90647C            MOV     DPTR,#0647CH
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
0007 120000      R     LCALL   SHIFTREG_ENC_1_DisableInt
                                           ; SOURCE LINE # 118
000A 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_Stop (END)
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 9   


             ; FUNCTION SHIFTREG_ENC_1_EnableInt (BEGIN)
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 139
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 140
0003 90649C            MOV     DPTR,#0649CH
0006 E0                MOVX    A,@DPTR
0007 4410              ORL     A,#010H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
000A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 142
000D 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_EnableInt (END)

             ; FUNCTION SHIFTREG_ENC_1_DisableInt (BEGIN)
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 163
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 164
0003 90649C            MOV     DPTR,#0649CH
0006 E0                MOVX    A,@DPTR
0007 54EF              ANL     A,#0EFH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
000A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 166
000D 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_DisableInt (END)

             ; FUNCTION _SHIFTREG_ENC_1_GetFIFOStatus (BEGIN)
                                           ; SOURCE LINE # 183
;---- Variable 'fifoId' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 187
;---- Variable 'result' assigned to Register 'R5' ----
0000 7DFE              MOV     R5,#0FEH
                                           ; SOURCE LINE # 216
0002 EF                MOV     A,R7
0003 B4022D            CJNE    A,#02H,?C0008
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0006 90646C            MOV     DPTR,#0646CH
0009 E0                MOVX    A,@DPTR
000A 5460              ANL     A,#060H
000C 7E00              MOV     R6,#00H
000E 7805              MOV     R0,#05H
0010         ?C0022:
0010 CE                XCH     A,R6
0011 C3                CLR     C
0012 13                RRC     A
0013 CE                XCH     A,R6
0014 13                RRC     A
0015 D8F9              DJNZ    R0,?C0022
0017 FF                MOV     R7,A
0018 EE                MOV     A,R6
0019 7016              JNZ     ?C0013
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 10  

001B EF                MOV     A,R7
001C 600B              JZ      ?C0011
001E 24FE              ADD     A,#0FEH
0020 600B              JZ      ?C0012
0022 04                INC     A
0023 700C              JNZ     ?C0013
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0025         ?C0010:
                                           ; SOURCE LINE # 221
0025 E4                CLR     A
0026 FD                MOV     R5,A
                                           ; SOURCE LINE # 222
0027 800A              SJMP    ?C0008
                                           ; SOURCE LINE # 224
0029         ?C0011:
                                           ; SOURCE LINE # 225
0029 7D02              MOV     R5,#02H
                                           ; SOURCE LINE # 226
002B 8006              SJMP    ?C0008
                                           ; SOURCE LINE # 228
002D         ?C0012:
                                           ; SOURCE LINE # 229
002D 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 230
002F 8002              SJMP    ?C0008
                                           ; SOURCE LINE # 232
0031         ?C0013:
                                           ; SOURCE LINE # 236
0031 E4                CLR     A
0032 FD                MOV     R5,A
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
0033         ?C0008:
                                           ; SOURCE LINE # 241
0033 AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 242
0035         ?C0014:
0035 22                RET     
             ; FUNCTION _SHIFTREG_ENC_1_GetFIFOStatus (END)

             ; FUNCTION _SHIFTREG_ENC_1_SetIntMode (BEGIN)
                                           ; SOURCE LINE # 261
;---- Variable 'interruptSource' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
0000 90648C            MOV     DPTR,#0648CH
0003 E0                MOVX    A,@DPTR
0004 54F8              ANL     A,#0F8H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0007 E0                MOVX    A,@DPTR
0008 FE                MOV     R6,A
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C FF                MOV     R7,A
000D EE                MOV     A,R6
000E 4F                ORL     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0010 22                RET     
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 11  

             ; FUNCTION _SHIFTREG_ENC_1_SetIntMode (END)

             ; FUNCTION SHIFTREG_ENC_1_GetIntStatus (BEGIN)
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0000 90646C            MOV     DPTR,#0646CH
0003 E0                MOVX    A,@DPTR
0004 5407              ANL     A,#07H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 285
0007         ?C0016:
0007 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_GetIntStatus (END)

             ; FUNCTION _SHIFTREG_ENC_1_WriteRegValue (BEGIN)
                                           ; SOURCE LINE # 302
;---- Variable 'shiftData' assigned to Register 'R4/R5/R6/R7' ----
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0000 7B02              MOV     R3,#02H
0002 7A64              MOV     R2,#064H
0004 790A              MOV     R1,#0AH
0006 120000      E     LCALL   _cywrite24_nodpx
                                           ; SOURCE LINE # 306
0009 22                RET     
             ; FUNCTION _SHIFTREG_ENC_1_WriteRegValue (END)

             ; FUNCTION SHIFTREG_ENC_1_ReadData (BEGIN)
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 368
0000 7B02              MOV     R3,#02H
0002 7A64              MOV     R2,#064H
0004 795A              MOV     R1,#05AH
0006 120000      E     LCALL   _cyread24_nodpx
                                           ; SOURCE LINE # 369
0009         ?C0018:
0009 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_ReadData (END)

             ; FUNCTION SHIFTREG_ENC_1_ReadRegValue (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
0000         ?C0019:
                                           ; SOURCE LINE # 396
0000 7F02              MOV     R7,#02H
0002 120000      R     LCALL   _SHIFTREG_ENC_1_GetFIFOStatus
0005 EF                MOV     A,R7
0006 6402              XRL     A,#02H
0008 600B              JZ      ?C0020
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
000A 7B02              MOV     R3,#02H
000C 7A64              MOV     R2,#064H
000E 795A              MOV     R1,#05AH
0010 120000      E     LCALL   _cyread24_nodpx
                                           ; SOURCE LINE # 399
0013 80EB              SJMP    ?C0019
0015         ?C0020:
                                           ; SOURCE LINE # 402
0015 90641A            MOV     DPTR,#0641AH
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 12  

0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
                                           ; SOURCE LINE # 405
001A 7B02              MOV     R3,#02H
001C 7A64              MOV     R2,#064H
001E 795A              MOV     R1,#05AH
0020 120000      E     LCALL   _cyread24_nodpx
0023 900000      R     MOV     DPTR,#result
0026 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 408
0029 900000      R     MOV     DPTR,#result
002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EE                MOV     A,R6
0038 ED                MOV     A,R5
0039 5407              ANL     A,#07H
003B FD                MOV     R5,A
003C E4                CLR     A
003D FC                MOV     R4,A
003E 900000      R     MOV     DPTR,#result
0041 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 411
0044 900000      R     MOV     DPTR,#result
0047 E0                MOVX    A,@DPTR
0048 FC                MOV     R4,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FD                MOV     R5,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E FE                MOV     R6,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
                                           ; SOURCE LINE # 412
0052         ?C0021:
0052 22                RET     
             ; FUNCTION SHIFTREG_ENC_1_ReadRegValue (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    257    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.51   SHIFTREG_ENC_1                                                        02/07/2017 16:12:13 PAGE 13  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
