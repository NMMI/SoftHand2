C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYPM
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\cyPm.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\cyPm.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL(
                    -2) PR(.\DP8051_Keil_951\Release/cyPm.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\cyPm.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /***************************************************************************//**
   2          * \file cyPm.c
   3          * \version 5.40
   4          *
   5          * \brief Provides an API for the power management.
   6          *
   7          * \note Documentation of the API's in this file is located in the
   8          *  System Reference Guide provided with PSoC Creator.
   9          *
  10          ********************************************************************************
  11          * \copyright
  12          * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "cyPm.h"
  19          
  20          
  21          
  22          /*******************************************************************
  23          * Place your includes, defines, and code here. Do not use the merge
  24          * region below unless any component datasheet suggests doing so.
  25          *******************************************************************/
  26          /* `#START CY_PM_HEADER_INCLUDE` */
  27          
  28          /* `#END` */
  29          
  30          
  31          static CY_PM_BACKUP_STRUCT          cyPmBackup;
  32          static CY_PM_CLOCK_BACKUP_STRUCT    cyPmClockBackup;
  33          
  34          /* Convertion table between register's values and frequency in MHz  */
  35          static const uint8 CYCODE cyPmImoFreqReg2Mhz[7u] = {12u, 6u, 24u, 3u, 48u, 62u, 74u};
  36          
  37          /* Function Prototypes */
  38          static void CyPmHibSaveSet(void);
  39          static void CyPmHibRestore(void) ;
  40          
  41          static void CyPmHibSlpSaveSet(void) ;
  42          static void CyPmHibSlpRestore(void) ;
  43          
  44          static void CyPmHviLviSaveDisable(void) ;
  45          static void CyPmHviLviRestore(void) ;
  46          
  47          
  48          /*******************************************************************************
  49          * Function Name: CyPmSaveClocks
  50          ****************************************************************************//**
  51          *
  52          *  This function is called in preparation for entering sleep or hibernate low
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 2   

  53          *  power modes. Saves all the states of the clocking system that do not persist
  54          *  during sleep/hibernate or that need to be altered in preparation for
  55          *  sleep/hibernate. Shutdowns all the digital and analog clock dividers for the
  56          *  active power mode configuration.
  57          *
  58          *  Switches the master clock over to the IMO and shuts down the PLL and MHz
  59          *  Crystal. The IMO frequency is set to either 12 MHz or 48 MHz to match the
  60          *  Design-Wide Resources System Editor "Enable Fast IMO During Startup" setting.
  61          *  The ILO and 32 KHz oscillators are not impacted. The current Flash wait state
  62          *  setting is saved and the Flash wait state setting is set for the current IMO
  63          *  speed.
  64          *
  65          *  Note If the Master Clock source is routed through the DSI inputs, then it
  66          *  must be set manually to another source before using the
  67          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
  68          *
  69          * \sideeffect
  70          *  All peripheral clocks are going to be off after this API method call.
  71          *
  72          *******************************************************************************/
  73          void CyPmSaveClocks(void) 
  74          {
  75   1          /* Digital and analog clocks - save enable state and disable them all */
  76   1          cyPmClockBackup.enClkA = CY_PM_ACT_CFG1_REG & CY_PM_ACT_EN_CLK_A_MASK;
  77   1          cyPmClockBackup.enClkD = CY_PM_ACT_CFG2_REG;
  78   1          CY_PM_ACT_CFG1_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_A_MASK));
  79   1          CY_PM_ACT_CFG2_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_D_MASK));
  80   1      
  81   1          /* Save current flash wait cycles and set the maximum value */
  82   1          cyPmClockBackup.flashWaitCycles = CY_PM_CACHE_CR_CYCLES_MASK & CY_PM_CACHE_CR_REG;
  83   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
  84   1      
  85   1          /* IMO - save current IMO MHz OSC frequency and USB mode is on bit */
  86   1          cyPmClockBackup.imoFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
  87   1          cyPmClockBackup.imoUsbClk = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_USB;
  88   1      
  89   1          /* IMO doubler - save enable state */
  90   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
  91   1          {
  92   2              /* IMO doubler enabled - save and disable */
  93   2              cyPmClockBackup.imo2x = CY_PM_ENABLED;
  94   2          }
  95   1          else
  96   1          {
  97   2              /* IMO doubler disabled */
  98   2              cyPmClockBackup.imo2x = CY_PM_DISABLED;
  99   2          }
 100   1      
 101   1          /* Master clock - save source */
 102   1          cyPmClockBackup.masterClkSrc = CY_PM_CLKDIST_MSTR1_REG & CY_PM_MASTER_CLK_SRC_MASK;
 103   1      
 104   1          /* Switch Master clock's source from PLL's output to PLL's source */
 105   1          if(CY_MASTER_SOURCE_PLL == cyPmClockBackup.masterClkSrc)
 106   1          {
 107   2              switch (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_PLL_SRC_MASK)
 108   2              {
 109   3              case CY_PM_CLKDIST_PLL_SRC_IMO:
 110   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 111   3                  break;
 112   3      
 113   3              case CY_PM_CLKDIST_PLL_SRC_XTAL:
 114   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_XTAL);
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 3   

 115   3                  break;
 116   3      
 117   3              case CY_PM_CLKDIST_PLL_SRC_DSI:
 118   3                  CyMasterClk_SetSource(CY_MASTER_SOURCE_DSI);
 119   3                  break;
 120   3      
 121   3              default:
 122   3                  CYASSERT(0u != 0u);
 123   3                  break;
 124   3              }
 125   2          }
 126   1      
 127   1          /* PLL - check enable state, disable if needed */
 128   1          if(0u != (CY_PM_FASTCLK_PLL_CFG0_REG & CY_PM_PLL_CFG0_ENABLE))
 129   1          {
 130   2              /* PLL is enabled - save state and disable */
 131   2              cyPmClockBackup.pllEnableState = CY_PM_ENABLED;
 132   2              CyPLL_OUT_Stop();
 133   2          }
 134   1          else
 135   1          {
 136   2              /* PLL is disabled - save state */
 137   2              cyPmClockBackup.pllEnableState = CY_PM_DISABLED;
 138   2          }
 139   1      
 140   1          /* IMO - set appropriate frequency for LPM */
 141   1          CyIMO_SetFreq(CY_PM_IMO_FREQ_LPM);
 142   1      
 143   1          /* IMO - save enable state and enable without wait to settle */
 144   1          if(0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG))
 145   1          {
 146   2              /* IMO - save enabled state */
 147   2              cyPmClockBackup.imoEnable = CY_PM_ENABLED;
 148   2          }
 149   1          else
 150   1          {
 151   2              /* IMO - save disabled state */
 152   2              cyPmClockBackup.imoEnable = CY_PM_DISABLED;
 153   2      
 154   2              /* Enable the IMO. Use software delay instead of the FTW-based inside */
 155   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 156   2      
 157   2              /* Settling time of the IMO is of the order of less than 6us */
 158   2              CyDelayUs(6u);
 159   2          }
 160   1      
 161   1          /* IMO - save the current IMOCLK source and set to IMO if not yet */
 162   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_XCLKEN))
 163   1          {
 164   2              /* DSI or XTAL CLK */
 165   2              cyPmClockBackup.imoClkSrc =
 166   2                  (0u == (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO2X_SRC)) ? CY_IMO_SOURCE_DSI : CY_IMO_SOURCE_X
             -TAL;
 167   2      
 168   2              /* IMO -  set IMOCLK source to IMO */
 169   2              CyIMO_SetSource(CY_IMO_SOURCE_IMO);
 170   2          }
 171   1          else
 172   1          {
 173   2              /* IMO */
 174   2              cyPmClockBackup.imoClkSrc = CY_IMO_SOURCE_IMO;
 175   2          }
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 4   

 176   1      
 177   1          /* Save clk_imo source */
 178   1          cyPmClockBackup.clkImoSrc = CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK;
 179   1      
 180   1          /* If IMOCLK2X or SPC OSC is source for clk_imo, set it to IMOCLK */
 181   1          if(CY_PM_CLKDIST_IMO_OUT_IMO != cyPmClockBackup.clkImoSrc)
 182   1          {
 183   2              /* Set IMOCLK to source for clk_imo */
 184   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 185   2                                      CY_PM_CLKDIST_IMO_OUT_IMO;
 186   2          }    /* Need to change nothing if IMOCLK is source clk_imo */
 187   1      
 188   1          /* IMO doubler - disable it (saved above) */
 189   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
 190   1          {
 191   2              CyIMO_DisableDoubler();
 192   2          }
 193   1      
 194   1          /* Master clock - save divider and set it to divide-by-one (if no yet) */
 195   1          cyPmClockBackup.clkSyncDiv = CY_PM_CLKDIST_MSTR0_REG;
 196   1          if(CY_PM_DIV_BY_ONE != cyPmClockBackup.clkSyncDiv)
 197   1          {
 198   2              CyMasterClk_SetDivider(CY_PM_DIV_BY_ONE);
 199   2          }    /* No change if master clock divider is 1 */
 200   1      
 201   1          /* Master clock source - set it to IMO if not yet. */
 202   1          if(CY_MASTER_SOURCE_IMO != cyPmClockBackup.masterClkSrc)
 203   1          {
 204   2              CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 205   2          }    /* No change if master clock source is IMO */
 206   1      
 207   1          /* Bus clock - save divider and set it, if needed, to divide-by-one */
 208   1          cyPmClockBackup.clkBusDiv = (uint16) ((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
 209   1          cyPmClockBackup.clkBusDiv |= CY_PM_CLK_BUS_LSB_DIV_REG;
 210   1          if(CY_PM_BUS_CLK_DIV_BY_ONE != cyPmClockBackup.clkBusDiv)
 211   1          {
 212   2              CyBusClk_SetDivider(CY_PM_BUS_CLK_DIV_BY_ONE);
 213   2          }    /* Do nothing if saved and actual values are equal */
 214   1      
 215   1          /* Set number of wait cycles for flash according to CPU frequency in MHz */
 216   1          CyFlash_SetWaitCycles((uint8)CY_PM_GET_CPU_FREQ_MHZ);
 217   1      
 218   1          /* MHz ECO - check enable state and disable if needed */
 219   1          if(0u != (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_ENABLE))
 220   1          {
 221   2              /* MHz ECO is enabled - save state and disable */
 222   2              cyPmClockBackup.xmhzEnableState = CY_PM_ENABLED;
 223   2              CyXTAL_Stop();
 224   2          }
 225   1          else
 226   1          {
 227   2              /* MHz ECO is disabled - save state */
 228   2              cyPmClockBackup.xmhzEnableState = CY_PM_DISABLED;
 229   2          }
 230   1      
 231   1      
 232   1          /***************************************************************************
 233   1          * Save the enable state of delay between the system bus clock and each of the
 234   1          * 4 individual analog clocks. This bit non-retention and its value should
 235   1          * be restored on wakeup.
 236   1          ***************************************************************************/
 237   1          if(0u != (CY_PM_CLKDIST_DELAY_REG & CY_PM_CLKDIST_DELAY_EN))
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 5   

 238   1          {
 239   2              cyPmClockBackup.clkDistDelay = CY_PM_ENABLED;
 240   2          }
 241   1          else
 242   1          {
 243   2              cyPmClockBackup.clkDistDelay = CY_PM_DISABLED;
 244   2          }
 245   1      }
 246          
 247          
 248          /*******************************************************************************
 249          * Function Name: CyPmRestoreClocks
 250          ****************************************************************************//**
 251          *
 252          *  Restores any state that was preserved by the last call to CyPmSaveClocks().
 253          *  The Flash wait state setting is also restored.
 254          *
 255          *  Note If the Master Clock source is routed through the DSI inputs, then it
 256          *  must be set manually to another source before using the
 257          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
 258          *
 259          *  PSoC 3 and PSoC 5LP:
 260          *  The merge region could be used to process state when the megahertz crystal is
 261          *  not ready after a hold-off timeout.
 262          *
 263          *  PSoC 5:
 264          *  The 130 ms is given for the megahertz crystal to stabilize. Its readiness is
 265          *  not verified after a hold-off timeout.
 266          *
 267          *******************************************************************************/
 268          void CyPmRestoreClocks(void) 
 269          {
 270   1          cystatus status = CYRET_TIMEOUT;
 271   1          uint16 i;
 272   1          uint16 clkBusDivTmp;
 273   1      
 274   1      
 275   1          /* Convertion table between CyIMO_SetFreq() parameters and register's value */
 276   1          const uint8 CYCODE cyPmImoFreqMhz2Reg[7u] = {
 277   1              CY_IMO_FREQ_12MHZ, CY_IMO_FREQ_6MHZ,  CY_IMO_FREQ_24MHZ, CY_IMO_FREQ_3MHZ,
 278   1              CY_IMO_FREQ_48MHZ, 5u, 6u};
 279   1      
 280   1          /* Restore enable state of delay between system bus clock and ACLKs. */
 281   1          if(CY_PM_ENABLED == cyPmClockBackup.clkDistDelay)
 282   1          {
 283   2              /* Delay for both bandgap and delay line to settle out */
 284   2              CyDelayCycles((uint32)(CY_PM_CLK_DELAY_BANDGAP_SETTLE_US + CY_PM_CLK_DELAY_BIAS_SETTLE_US) *
 285   2                              CY_PM_GET_CPU_FREQ_MHZ);
 286   2      
 287   2              CY_PM_CLKDIST_DELAY_REG |= CY_PM_CLKDIST_DELAY_EN;
 288   2          }
 289   1      
 290   1          /* MHz ECO restore state */
 291   1          if(CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState)
 292   1          {
 293   2              /***********************************************************************
 294   2              * Enabling XMHZ XTAL. The actual CyXTAL_Start() with a non zero wait
 295   2              * period uses FTW for period measurement. This could cause a problem
 296   2              * if CTW/FTW is used as a wake up time in the low power modes APIs.
 297   2              * So, the XTAL wait procedure is implemented with a software delay.
 298   2              ***********************************************************************/
 299   2      
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 6   

 300   2              /* Enable XMHZ XTAL with no wait */
 301   2              (void) CyXTAL_Start(CY_PM_XTAL_MHZ_NO_WAIT);
 302   2      
 303   2              /* Read XERR bit to clear it */
 304   2              (void) CY_PM_FASTCLK_XMHZ_CSR_REG;
 305   2      
 306   2              /* Wait */
 307   2              for(i = CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US; i > 0u; i--)
 308   2              {
 309   3                  /* Make a 200 microseconds delay */
 310   3                  CyDelayCycles((uint32)CY_PM_WAIT_200_US * CY_PM_GET_CPU_FREQ_MHZ);
 311   3      
 312   3                  /* High output indicates oscillator failure */
 313   3                  if(0u == (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_XERR))
 314   3                  {
 315   4                      status = CYRET_SUCCESS;
 316   4                      break;
 317   4                  }
 318   3              }
 319   2      
 320   2              if(CYRET_TIMEOUT == status)
 321   2              {
 322   3                  /*******************************************************************
 323   3                  * Process the situation when megahertz crystal is not ready.
 324   3                  * Time to stabilize the value is crystal specific.
 325   3                  *******************************************************************/
 326   3                 /* `#START_MHZ_ECO_TIMEOUT` */
 327   3      
 328   3                 /* `#END` */
 329   3      
 330   3              #ifdef CY_BOOT_CY_PM_RESTORE_CLOCKS_ECO_TIMEOUT_CALLBACK
                          CyBoot_CyPmRestoreClocks_EcoTimeout_Callback();
                      #endif /* CY_BOOT_CY_PM_RESTORE_CLOCKS_ECO_TIMEOUT_CALLBACK */
 333   3              }
 334   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState) */
 335   1      
 336   1      
 337   1          /* Temporary set maximum flash wait cycles */
 338   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 339   1      
 340   1          /* XTAL and DSI clocks are ready to be source for Master clock. */
 341   1          if((CY_PM_MASTER_CLK_SRC_XTAL == cyPmClockBackup.masterClkSrc) ||
 342   1             (CY_PM_MASTER_CLK_SRC_DSI  == cyPmClockBackup.masterClkSrc))
 343   1          {
 344   2              /* Restore Master clock's divider */
 345   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 346   2              {
 347   3                  /* Restore Master clock divider */
 348   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 349   3              }
 350   2      
 351   2              /* Restore Master clock source */
 352   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 353   2          }
 354   1      
 355   1          /* IMO - restore IMO frequency */
 356   1          if((0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB)) &&
 357   1              (CY_IMO_FREQ_24MHZ == cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]))
 358   1          {
 359   2              /* Restore IMO frequency (24 MHz) and trim it for USB */
 360   2              CyIMO_SetFreq(CY_IMO_FREQ_USB);
 361   2          }
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 7   

 362   1          else
 363   1          {
 364   2              /* Restore IMO frequency */
 365   2              CyIMO_SetFreq(cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]);
 366   2      
 367   2              if(0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB))
 368   2              {
 369   3                  CY_PM_FASTCLK_IMO_CR_REG |= CY_PM_FASTCLK_IMO_CR_USB;
 370   3              }
 371   2              else
 372   2              {
 373   3                  CY_PM_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_PM_FASTCLK_IMO_CR_USB));
 374   3              }
 375   2          }
 376   1      
 377   1          /* IMO - restore enable state if needed */
 378   1          if((CY_PM_ENABLED == cyPmClockBackup.imoEnable) &&
 379   1             (0u == (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 380   1          {
 381   2              /* IMO - restore enabled state */
 382   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 383   2          }
 384   1      
 385   1          /* IMO - restore IMOCLK source */
 386   1          CyIMO_SetSource(cyPmClockBackup.imoClkSrc);
 387   1      
 388   1          /* Restore IMO doubler enable state (turned off by CyPmSaveClocks()) */
 389   1          if(CY_PM_ENABLED == cyPmClockBackup.imo2x)
 390   1          {
 391   2              CyIMO_EnableDoubler();
 392   2          }
 393   1      
 394   1          /* IMO - restore clk_imo source, if needed */
 395   1          if(cyPmClockBackup.clkImoSrc != (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK))
 396   1          {
 397   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 398   2                                      cyPmClockBackup.clkImoSrc;
 399   2          }
 400   1      
 401   1      
 402   1          /* PLL restore state */
 403   1          if(CY_PM_ENABLED == cyPmClockBackup.pllEnableState)
 404   1          {
 405   2              /***********************************************************************
 406   2              * Enable PLL. The actual CyPLL_OUT_Start() without wait period uses FTW
 407   2              * for period measurement. This could cause a problem if CTW/FTW is used
 408   2              * as a wakeup time in the low power modes APIs. To omit this issue PLL
 409   2              * wait procedure is implemented with a software delay.
 410   2              ***********************************************************************/
 411   2              status = CYRET_TIMEOUT;
 412   2      
 413   2              /* Enable PLL */
 414   2              (void) CyPLL_OUT_Start(CY_PM_PLL_OUT_NO_WAIT);
 415   2      
 416   2              /* Read to clear lock status after delay */
 417   2              CyDelayUs((uint32)80u);
 418   2              (void) CY_PM_FASTCLK_PLL_SR_REG;
 419   2      
 420   2              /* It should take 250 us lock: 251-80 = 171 */
 421   2              for(i = 171u; i > 0u; i--)
 422   2              {
 423   3                  CyDelayUs((uint32)1u);
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 8   

 424   3      
 425   3                  /* Accept PLL is OK after two consecutive polls indicate PLL lock */
 426   3                  if((0u != (CY_PM_FASTCLK_PLL_SR_REG & CY_PM_FASTCLK_PLL_LOCKED)) &&
 427   3                     (0u != (CY_PM_FASTCLK_PLL_SR_REG & CY_PM_FASTCLK_PLL_LOCKED)))
 428   3                  {
 429   4                      status = CYRET_SUCCESS;
 430   4                      break;
 431   4                  }
 432   3              }
 433   2      
 434   2              if(CYRET_TIMEOUT == status)
 435   2              {
 436   3                  /*******************************************************************
 437   3                  * Process the situation when PLL is not ready.
 438   3                  *******************************************************************/
 439   3                 /* `#START_PLL_TIMEOUT` */
 440   3      
 441   3                 /* `#END` */
 442   3      
 443   3              #ifdef CY_BOOT_CY_PM_RESTORE_CLOCKS_PLL_TIMEOUT_CALLBACK
                          CyBoot_CyPmRestoreClocks_PllTimeout_Callback();
                      #endif /* CY_BOOT_CY_PM_RESTORE_CLOCKS_PLL_TIMEOUT_CALLBACK */
 446   3              }
 447   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.pllEnableState) */
 448   1      
 449   1      
 450   1          /* PLL and IMO is ready to be source for Master clock */
 451   1          if((CY_PM_MASTER_CLK_SRC_IMO == cyPmClockBackup.masterClkSrc) ||
 452   1             (CY_PM_MASTER_CLK_SRC_PLL == cyPmClockBackup.masterClkSrc))
 453   1          {
 454   2              /* Restore Master clock divider */
 455   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 456   2              {
 457   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 458   3              }
 459   2      
 460   2              /* Restore Master clock source */
 461   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 462   2          }
 463   1      
 464   1          /* IMO - disable if it was originally disabled */
 465   1          if((CY_PM_DISABLED == cyPmClockBackup.imoEnable) &&
 466   1             (0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 467   1          {
 468   2              CyIMO_Stop();
 469   2          }
 470   1      
 471   1          /* Bus clock - restore divider, if needed */
 472   1          clkBusDivTmp = (uint16) ((uint16)CY_PM_CLK_BUS_MSB_DIV_REG << 8u);
 473   1          clkBusDivTmp |= CY_PM_CLK_BUS_LSB_DIV_REG;
 474   1          if(cyPmClockBackup.clkBusDiv != clkBusDivTmp)
 475   1          {
 476   2              CyBusClk_SetDivider(cyPmClockBackup.clkBusDiv);
 477   2          }
 478   1      
 479   1          /* Restore flash wait cycles */
 480   1          CY_PM_CACHE_CR_REG = ((CY_PM_CACHE_CR_REG & ((uint8)(~CY_PM_CACHE_CR_CYCLES_MASK))) |
 481   1                                 cyPmClockBackup.flashWaitCycles);
 482   1      
 483   1          /* Digital and analog clocks - restore state */
 484   1          CY_PM_ACT_CFG1_REG = cyPmClockBackup.enClkA;
 485   1          CY_PM_ACT_CFG2_REG = cyPmClockBackup.enClkD;
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 9   

 486   1      }
 487          
 488          
 489          /*******************************************************************************
 490          * Function Name: CyPmAltAct
 491          ****************************************************************************//**
 492          *
 493          *  Puts the part into the Alternate Active (Standby) state. The Alternate Active
 494          *  state can allow for any of the capabilities of the device to be active, but
 495          *  the operation of this function is dependent on the CPU being disabled during
 496          *  the Alternate Active state. The configuration code and the component APIs
 497          *  will configure the template for the Alternate Active state to be the same as
 498          *  the Active state with the exception that the CPU will be disabled during
 499          *  Alternate Active.
 500          *
 501          *  Note Before calling this function, you must manually configure the power mode
 502          *  of the source clocks for the timer that is used as the wakeup timer.
 503          *
 504          *  PSoC 3:
 505          *  Before switching to Alternate Active, if a wakeupTime other than NONE is
 506          *  specified, then the appropriate timer state is configured as specified with
 507          *  the interrupt for that timer disabled.  The wakeup source will be the
 508          *  combination of the values specified in the wakeupSource and any timer
 509          *  specified in the wakeupTime argument.  Once the wakeup condition is
 510          *  satisfied, then all saved state is restored and the function returns in the
 511          *  Active state.
 512          *
 513          *  Note that if the wakeupTime is made with a different value, the period before
 514          *  the wakeup occurs can be significantly shorter than the specified time.  If
 515          *  the next call is made with the same wakeupTime value, then the wakeup will
 516          *  occur the specified period after the previous wakeup occurred.
 517          *
 518          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 519          *  specified timer will be left as specified by wakeupTime with the timer
 520          *  enabled and the interrupt disabled.  If the CTW, FTW or One PPS is already
 521          *  configured for wakeup, for example with the SleepTimer or RTC components,
 522          *  then specify NONE for the wakeupTime and include the appropriate source for
 523          *  wakeupSource.
 524          *
 525          *  PSoC 5LP:
 526          *  This function is used to both enter the Alternate Active mode and halt the
 527          *  processor.  For PSoC 3 these two actions must be paired together.  With PSoC
 528          *  5LP the processor can be halted independently with the __WFI() function from
 529          *  the CMSIS library that is included in Creator.  This function should be used
 530          *  instead when the action required is just to halt the processor until an
 531          *  enabled interrupt occurs.
 532          *
 533          *  The wakeupTime parameter is not used for this device. It must be set to zero
 534          *  (PM_ALT_ACT_TIME_NONE). The wake up time configuration can be done by a
 535          *  separate component: the CTW wakeup interval should be configured with the
 536          *  Sleep Timer component and one second interval should be configured with the
 537          *  RTC component.
 538          *
 539          *  The wakeup behavior depends on the wakeupSource parameter in the following
 540          *  manner: upon function execution the device will be switched from Active to
 541          *  Alternate Active mode and then the CPU will be halted. When an enabled wakeup
 542          *  event occurs the device will return to Active mode.  Similarly when an
 543          *  enabled interrupt occurs the CPU will be started. These two actions will
 544          *  occur together provided that the event that occurs is an enabled wakeup
 545          *  source and also generates an interrupt. If just the wakeup event occurs then
 546          *  the device will be in Active mode, but the CPU will remain halted waiting for
 547          *  an interrupt. If an interrupt occurs from something other than a wakeup
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 10  

 548          *  source, then the CPU will restart with the device in Alternate Active mode
 549          *  until a wakeup event occurs.
 550          *
 551          *  For example, if CyPmAltAct(PM_ALT_ACT_TIME_NONE, PM_ALT_ACT_SRC_PICU) is
 552          *  called and PICU interrupt occurs, the CPU will be started and device will be
 553          *  switched into Active mode. And if CyPmAltAct(PM_ALT_ACT_TIME_NONE,
 554          *  PM_ALT_ACT_SRC_NONE) is called and PICU interrupt occurs, the CPU will be
 555          *  started while device remains in Alternate Active mode.
 556          *
 557          *  \param wakeupTime: Specifies a timer wakeup source and the frequency of that
 558          *              source. For PSoC 5LP this parameter is ignored.
 559          *
 560          *           Define                      Time
 561          *  PM_ALT_ACT_TIME_NONE             None
 562          *  \param PM_ALT_ACT_TIME_ONE_PPS          One PPS: 1 second
 563          *  \param PM_ALT_ACT_TIME_CTW_2MS          CTW: 2 ms
 564          *  \param PM_ALT_ACT_TIME_CTW_4MS          CTW: 4 ms
 565          *  \param PM_ALT_ACT_TIME_CTW_8MS          CTW: 8 ms
 566          *  \param PM_ALT_ACT_TIME_CTW_16MS         CTW: 16 ms
 567          *  \param PM_ALT_ACT_TIME_CTW_32MS         CTW: 32 ms
 568          *  \param PM_ALT_ACT_TIME_CTW_64MS         CTW: 64 ms
 569          *  \param PM_ALT_ACT_TIME_CTW_128MS        CTW: 128 ms
 570          *  \param PM_ALT_ACT_TIME_CTW_256MS        CTW: 256 ms
 571          *  \param PM_ALT_ACT_TIME_CTW_512MS        CTW: 512 ms
 572          *  \param PM_ALT_ACT_TIME_CTW_1024MS       CTW: 1024 ms
 573          *  \param PM_ALT_ACT_TIME_CTW_2048MS       CTW: 2048 ms
 574          *  \param PM_ALT_ACT_TIME_CTW_4096MS       CTW: 4096 ms
 575          *  PM_ALT_ACT_TIME_FTW(1-256)*       FTW: 10us to 2.56 ms
 576          *
 577          *  \param *Note:   PM_ALT_ACT_TIME_FTW() is a macro that takes an argument that
 578          *           specifies how many increments of 10 us to delay.
 579                      For PSoC 3 silicon the valid range of  values is 1 to 256.
 580          *
 581          *  \param wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 582          *                   a wakeupTime has been specified, the associated timer will
 583          *                   be included as a wakeup source.
 584          *
 585          *           Define                      Source
 586          *  PM_ALT_ACT_SRC_NONE              None
 587          *  PM_ALT_ACT_SRC_COMPARATOR0       Comparator 0
 588          *  PM_ALT_ACT_SRC_COMPARATOR1       Comparator 1
 589          *  PM_ALT_ACT_SRC_COMPARATOR2       Comparator 2
 590          *  PM_ALT_ACT_SRC_COMPARATOR3       Comparator 3
 591          *  PM_ALT_ACT_SRC_INTERRUPT         Interrupt
 592          *  PM_ALT_ACT_SRC_PICU              PICU
 593          *  PM_ALT_ACT_SRC_I2C               I2C
 594          *  PM_ALT_ACT_SRC_BOOSTCONVERTER    Boost Converter
 595          *  PM_ALT_ACT_SRC_FTW               Fast Timewheel*
 596          *  PM_ALT_ACT_SRC_VD                High and Low Voltage Detection (HVI, LVI)*
 597          *  PM_ALT_ACT_SRC_CTW               Central Timewheel**
 598          *  PM_ALT_ACT_SRC_ONE_PPS           One PPS**
 599          *  PM_ALT_ACT_SRC_LCD               LCD
 600          *
 601          *  \param *Note : FTW and HVI/LVI wakeup signals are in the same mask bit.
 602          *  \param **Note: CTW and One PPS wakeup signals are in the same mask bit.
 603          *
 604          *  When specifying a Comparator as the wakeupSource, an instance specific define
 605          *  that will track with the specific comparator that the instance
 606          *  is placed into should be used. As an example, for a Comparator instance named
 607          *  \param MyComp the value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 608          *
 609          *  When CTW, FTW or One PPS is used as a wakeup source, the CyPmReadStatus()
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 11  

 610          *  function must be called upon wakeup with a corresponding parameter. Please
 611          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 612          *  information.
 613          *
 614          * Reentrant:
 615          *  No
 616          *
 617          * \sideeffect
 618          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 619          *  specified timer will be left as specified by wakeupTime with the timer
 620          *  enabled and the interrupt disabled.  Also, the ILO 1 KHz (if CTW timer is
 621          *  used as wakeup time) or ILO 100 KHz (if the FTW timer is used as wakeup time)
 622          *  will be left started.
 623          *
 624          *******************************************************************************/
 625          void CyPmAltAct(uint16 wakeupTime, uint16 wakeupSource) 
 626          {
 627   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_ALT_ACT_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 638   1      
 639   1      
 640   1          #if(CY_PSOC3)
 641   1      
 642   1              /* FTW - save current and set new configuration */
 643   1              if((wakeupTime >= PM_ALT_ACT_TIME_FTW(1u)) && (wakeupTime <= PM_ALT_ACT_TIME_FTW(256u)))
 644   1              {
 645   2                  CyPmFtwSetInterval(PM_ALT_ACT_FTW_INTERVAL(wakeupTime));
 646   2      
 647   2                  /* Include associated timer to wakeupSource */
 648   2                  wakeupSource |= PM_ALT_ACT_SRC_FTW;
 649   2              }
 650   1      
 651   1              /* CTW - save current and set new configuration */
 652   1              if((wakeupTime >= PM_ALT_ACT_TIME_CTW_2MS) && (wakeupTime <= PM_ALT_ACT_TIME_CTW_4096MS))
 653   1              {
 654   2                  /* Save current CTW configuration and set new one */
 655   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 656   2      
 657   2                  /* Include associated timer to wakeupSource */
 658   2                  wakeupSource |= PM_ALT_ACT_SRC_CTW;
 659   2              }
 660   1      
 661   1              /* 1PPS - save current and set new configuration */
 662   1              if(PM_ALT_ACT_TIME_ONE_PPS == wakeupTime)
 663   1              {
 664   2                  /* Save current 1PPS configuration and set new one */
 665   2                  CyPmOppsSet();
 666   2      
 667   2                  /* Include associated timer to wakeupSource */
 668   2                  wakeupSource |= PM_ALT_ACT_SRC_ONE_PPS;
 669   2              }
 670   1      
 671   1          #endif /* (CY_PSOC3) */
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 12  

 672   1      
 673   1      
 674   1          /* Save and set new wake up configuration */
 675   1      
 676   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 677   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 678   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 679   1      
 680   1          /* Comparators */
 681   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 682   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 683   1      
 684   1          /* LCD */
 685   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 686   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 687   1      
 688   1      
 689   1          /* Switch to the Alternate Active mode */
 690   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_ALT_ACT)
             -;
 691   1      
 692   1          /* Recommended readback. */
 693   1          (void) CY_PM_MODE_CSR_REG;
 694   1      
 695   1          /* Two recommended NOPs to get into the mode. */
 696   1          CY_NOP;
 697   1          CY_NOP;
 698   1      
 699   1          /* Execute WFI instruction (for ARM-based devices only) */
 700   1          CY_PM_WFI;
 701   1      
 702   1          /* Point of return from Alternate Active Mode */
 703   1      
 704   1          /* Restore wake up configuration */
 705   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
 706   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
 707   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
 708   1      }
 709          
 710          
 711          /*******************************************************************************
 712          * Function Name: CyPmSleep
 713          ****************************************************************************//**
 714          *
 715          *  Puts the part into the Sleep state.
 716          *
 717          *  Note Before calling this function, you must manually configure the power
 718          *  mode of the source clocks for the timer that is used as the wakeup timer.
 719          *
 720          *  Note Before calling this function, you must prepare clock tree configuration
 721          *  for the low power mode by calling CyPmSaveClocks(). And restore clock
 722          *  configuration after CyPmSleep() execution by calling CyPmRestoreClocks(). See
 723          *  Power Management section, Clock Configuration subsection of the System
 724          *  Reference Guide for more information.
 725          *
 726          *  PSoC 3:
 727          *  Before switching to Sleep, if a wakeupTime other than NONE is specified,
 728          *  then the appropriate timer state is configured as specified with the
 729          *  interrupt for that timer disabled.  The wakeup source will be a combination
 730          *  of the values specified in the wakeupSource and any timer specified in the
 731          *  wakeupTime argument.  Once the wakeup condition is satisfied, then all saved
 732          *  state is restored and the function returns in the Active state.
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 13  

 733          *
 734          *  Note that if the wakeupTime is made with a different value, the period before
 735          *  the wakeup occurs can be significantly shorter than the specified time.  If
 736          *  the next call is made with the same wakeupTime value, then the wakeup will
 737          *  occur the specified period after the previous wakeup occurred.
 738          *
 739          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 740          *  specified timer will be left as specified by wakeupTime with the timer
 741          *  enabled and the interrupt disabled.  If the CTW or One PPS is already
 742          *  configured for wakeup, for example with the SleepTimer or RTC components,
 743          *  then specify NONE for the wakeupTime and include the appropriate source for
 744          *  wakeupSource.
 745          *
 746          *  PSoC 5LP:
 747          *  The wakeupTime parameter is not used and the only NONE can be specified.
 748          *  The wakeup time must be configured with the component, SleepTimer for CTW
 749          *  intervals and RTC for 1PPS interval. The component must be configured to
 750          *  generate interrupt.
 751          *
 752          *  \param wakeupTime:      Specifies a timer wakeup source and the frequency of that
 753          *                   source. For PSoC 5LP, this parameter is ignored.
 754          *
 755          *           Define                      Time
 756          *  PM_SLEEP_TIME_NONE               None
 757          *  \param PM_SLEEP_TIME_ONE_PPS            One PPS: 1 second
 758          *  \param PM_SLEEP_TIME_CTW_2MS            CTW: 2 ms
 759          *  \param PM_SLEEP_TIME_CTW_4MS            CTW: 4 ms
 760          *  \param PM_SLEEP_TIME_CTW_8MS            CTW: 8 ms
 761          *  \param PM_SLEEP_TIME_CTW_16MS           CTW: 16 ms
 762          *  \param PM_SLEEP_TIME_CTW_32MS           CTW: 32 ms
 763          *  \param PM_SLEEP_TIME_CTW_64MS           CTW: 64 ms
 764          *  \param PM_SLEEP_TIME_CTW_128MS          CTW: 128 ms
 765          *  \param PM_SLEEP_TIME_CTW_256MS          CTW: 256 ms
 766          *  \param PM_SLEEP_TIME_CTW_512MS          CTW: 512 ms
 767          *  \param PM_SLEEP_TIME_CTW_1024MS         CTW: 1024 ms
 768          *  \param PM_SLEEP_TIME_CTW_2048MS         CTW: 2048 ms
 769          *  \param PM_SLEEP_TIME_CTW_4096MS         CTW: 4096 ms
 770          *
 771          *  \param wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 772          *                   a wakeupTime has been specified the associated timer will be
 773          *                   included as a wakeup source.
 774          *
 775          *           Define                      Source
 776          *  PM_SLEEP_SRC_NONE                None
 777          *  PM_SLEEP_SRC_COMPARATOR0         Comparator 0
 778          *  PM_SLEEP_SRC_COMPARATOR1         Comparator 1
 779          *  PM_SLEEP_SRC_COMPARATOR2         Comparator 2
 780          *  PM_SLEEP_SRC_COMPARATOR3         Comparator 3
 781          *  PM_SLEEP_SRC_PICU                PICU
 782          *  PM_SLEEP_SRC_I2C                 I2C
 783          *  PM_SLEEP_SRC_BOOSTCONVERTER      Boost Converter
 784          *  PM_SLEEP_SRC_VD                  High and Low Voltage Detection (HVI, LVI)
 785          *  PM_SLEEP_SRC_CTW                 Central Timewheel*
 786          *  PM_SLEEP_SRC_ONE_PPS             One PPS*
 787          *  PM_SLEEP_SRC_LCD                 LCD
 788          *
 789          *  \param *Note:   CTW and One PPS wakeup signals are in the same mask bit.
 790          *
 791          *  When specifying a Comparator as the wakeupSource an instance specific define
 792          *  should be used that will track with the specific comparator that the instance
 793          *  is placed into. As an example for a Comparator instance named MyComp the
 794          *  \param value to OR into the mask is: MyComp_ctComp__CMP_MASK.
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 14  

 795          *
 796          *  When CTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 797          *  function must be called upon wakeup with corresponding parameter. Please
 798          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 799          *  information.
 800          *
 801          * Reentrant:
 802          *  No
 803          *
 804          * Side Effects and Restrictions:
 805          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 806          *  specified timer will be left as specified by wakeupTime with the timer
 807          *  enabled and the interrupt disabled. Also, the ILO 1 KHz (if CTW timer is
 808          *  used as wake up time) will be left started.
 809          *
 810          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
 811          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
 812          *  delay is measured using rising edges of the 1 kHz ILO.
 813          *
 814          *  For PSoC 3 silicon hardware buzz should be disabled before entering a sleep
 815          *  power mode. It is disabled by PSoC Creator during startup.
 816          *  If a Low Voltage Interrupt (LVI), High Voltage Interrupt (HVI) or Brown Out
 817          *  detect (power supply supervising capabilities) are required in a design
 818          *  during sleep, use the Central Time Wheel (CTW) to periodically wake the
 819          *  device, perform software buzz, and refresh the supervisory services. If LVI,
 820          *  HVI, or Brown Out is not required, then CTW is not required.
 821          *  Refer to the device errata for more information.
 822          *
 823          *******************************************************************************/
 824          void CyPmSleep(uint8 wakeupTime, uint16 wakeupSource) 
 825          {
 826   1          uint8 interruptState;
 827   1      
 828   1          /* Save current global interrupt enable and disable it */
 829   1          interruptState = CyEnterCriticalSection();
 830   1      
 831   1      
 832   1          /***********************************************************************
 833   1          * The Hibernate/Sleep regulator has a settling time after a reset.
 834   1          * During this time, the system ignores requests to enter Sleep and
 835   1          * Hibernate modes. The holdoff delay is measured using rising edges of
 836   1          * the 1 kHz ILO.
 837   1          ***********************************************************************/
 838   1          if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
 839   1          {
 840   2              /* Disable hold off - no action on restore */
 841   2              CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
 842   2          }
 843   1          else
 844   1          {
 845   2              /* Abort, device is not ready for low power mode entry */
 846   2      
 847   2              /* Restore global interrupt enable state */
 848   2              CyExitCriticalSection(interruptState);
 849   2      
 850   2              return;
 851   2          }
 852   1      
 853   1      
 854   1          /***********************************************************************
 855   1          * PSoC3 < TO6:
 856   1          * - Hardware buzz must be disabled before the sleep mode entry.
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 15  

 857   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so they must
 858   1          *   be also disabled.
 859   1          *
 860   1          * PSoC3 >= TO6:
 861   1          * - Voltage supervision (HVI/LVI) requires hardware buzz, so hardware
 862   1          *   buzz must be enabled before the sleep mode entry and restored on
 863   1          *   the wakeup.
 864   1          ***********************************************************************/
 865   1          #if(CY_PSOC3)
 866   1      
 867   1              /* Silicon Revision ID is below TO6 */
 868   1              if(CYDEV_CHIP_REV_ACTUAL < 5u)
 869   1              {
 870   2                  /* Hardware buzz expected to be disabled in Sleep mode */
 871   2                  CYASSERT(0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ));
 872   2              }
 873   1      
 874   1      
 875   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
 876   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
 877   1              {
 878   2                  if(CYDEV_CHIP_REV_ACTUAL < 5u)
 879   2                  {
 880   3                      /* LVI/HVI requires hardware buzz to be enabled */
 881   3                      CYASSERT(0u != 0u);
 882   3                  }
 883   2                  else
 884   2                  {
 885   3                      if (0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ))
 886   3                      {
 887   4                          cyPmBackup.hardwareBuzz = CY_PM_DISABLED;
 888   4                          CY_PM_PWRSYS_WAKE_TR2_REG |= CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ;
 889   4                      }
 890   3                      else
 891   3                      {
 892   4                          cyPmBackup.hardwareBuzz = CY_PM_ENABLED;
 893   4                      }
 894   3                  }
 895   2              }
 896   1      
 897   1          #endif /* (CY_PSOC3) */
 898   1      
 899   1      
 900   1          /*******************************************************************************
 901   1          * For ARM-based devices,interrupt is required for the CPU to wake up. The
 902   1          * Power Management implementation assumes that wakeup time is configured with a
 903   1          * separate component (component-based wakeup time configuration) for
 904   1          * interrupt to be issued on terminal count. For more information, refer to the
 905   1          * Wakeup Time Configuration section of System Reference Guide.
 906   1          *******************************************************************************/
 907   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_SLEEP_TIME_NONE == wakeupTime);
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 918   1      
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 16  

 919   1      
 920   1          CyPmHibSlpSaveSet();
 921   1      
 922   1      
 923   1          #if(CY_PSOC3)
 924   1      
 925   1              /* CTW - save current and set new configuration */
 926   1              if((wakeupTime >= PM_SLEEP_TIME_CTW_2MS) && (wakeupTime <= PM_SLEEP_TIME_CTW_4096MS))
 927   1              {
 928   2                  /* Save current and set new configuration of CTW */
 929   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 930   2      
 931   2                  /* Include associated timer to wakeupSource */
 932   2                  wakeupSource |= PM_SLEEP_SRC_CTW;
 933   2              }
 934   1      
 935   1              /* 1PPS - save current and set new configuration */
 936   1              if(PM_SLEEP_TIME_ONE_PPS == wakeupTime)
 937   1              {
 938   2                  /* Save current and set new configuration of the 1PPS */
 939   2                  CyPmOppsSet();
 940   2      
 941   2                  /* Include associated timer to wakeupSource */
 942   2                  wakeupSource |= PM_SLEEP_SRC_ONE_PPS;
 943   2              }
 944   1      
 945   1          #endif /* (CY_PSOC3) */
 946   1      
 947   1      
 948   1          /* Save and set new wake up configuration */
 949   1      
 950   1          /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 951   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 952   1          CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 953   1      
 954   1          /* Comparators */
 955   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 956   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 957   1      
 958   1          /* LCD */
 959   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 960   1          CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 961   1      
 962   1      
 963   1          /*******************************************************************
 964   1          * Do not use the merge region below unless any component datasheet
 965   1          * suggests doing so.
 966   1          *******************************************************************/
 967   1          /* `#START CY_PM_JUST_BEFORE_SLEEP` */
 968   1      
 969   1          /* `#END` */
 970   1      
 971   1          #ifdef CY_BOOT_CY_PM_SLEEP_BEFORE_SLEEP_CALLBACK
                      CyBoot_CyPmSleep_BeforeSleep_Callback();
                  #endif /* CY_BOOT_CY_PM_SLEEP_BEFORE_SLEEP_CALLBACK */
 974   1      
 975   1          /* Last moment IMO frequency change */
 976   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
 977   1          {
 978   2              /* IMO frequency is 12 MHz */
 979   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
 980   2          }
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 17  

 981   1          else
 982   1          {
 983   2              /* IMO frequency is not 12 MHz */
 984   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
 985   2      
 986   2              /* Save IMO frequency */
 987   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
 988   2      
 989   2              /* Set IMO frequency to 12 MHz */
 990   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
 991   2          }
 992   1      
 993   1          /* Switch to Sleep mode */
 994   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_SLEEP);
 995   1      
 996   1          /* Recommended readback. */
 997   1          (void) CY_PM_MODE_CSR_REG;
 998   1      
 999   1          /* Two recommended NOPs to get into mode. */
1000   1          CY_NOP;
1001   1          CY_NOP;
1002   1      
1003   1          /* Execute WFI instruction (for ARM-based devices only) */
1004   1          CY_PM_WFI;
1005   1      
1006   1          /* Point of return from Sleep Mode */
1007   1      
1008   1          /* Restore last moment IMO frequency change */
1009   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1010   1          {
1011   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1012   2                                          cyPmBackup.imoActFreq;
1013   2          }
1014   1      
1015   1      
1016   1          /*******************************************************************
1017   1          * Do not use merge region below unless any component datasheet
1018   1          * suggest to do so.
1019   1          *******************************************************************/
1020   1          /* `#START CY_PM_JUST_AFTER_WAKEUP_FROM_SLEEP` */
1021   1      
1022   1          /* `#END` */
1023   1      
1024   1          #ifdef CY_BOOT_CY_PM_SLEEP_AFTER_SLEEP_CALLBACK
                      CyBoot_CyPmSleep_AfterSleep_Callback();
                  #endif /* CY_BOOT_CY_PM_SLEEP_AFTER_SLEEP_CALLBACK */
1027   1      
1028   1          /* Restore hardware configuration */
1029   1          CyPmHibSlpRestore();
1030   1      
1031   1      
1032   1          /* Disable hardware buzz, if it was previously enabled */
1033   1          #if(CY_PSOC3)
1034   1      
1035   1              if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
1036   1                  CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
1037   1              {
1038   2                  if(CYDEV_CHIP_REV_ACTUAL >= 5u)
1039   2                  {
1040   3                      if (CY_PM_DISABLED == cyPmBackup.hardwareBuzz)
1041   3                      {
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 18  

1042   4                          CY_PM_PWRSYS_WAKE_TR2_REG &= (uint8)(~CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ);
1043   4                      }
1044   3                  }
1045   2              }
1046   1      
1047   1          #endif /* (CY_PSOC3) */
1048   1      
1049   1      
1050   1          /* Restore current wake up configuration */
1051   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1052   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1053   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1054   1      
1055   1          /* Restore global interrupt enable state */
1056   1          CyExitCriticalSection(interruptState);
1057   1      }
1058          
1059          
1060          /*******************************************************************************
1061          * Function Name: CyPmHibernate
1062          ****************************************************************************//**
1063          *
1064          *  Puts the part into the Hibernate state.
1065          *
1066          *  Before switching to Hibernate, the current status of the PICU wakeup source
1067          *  bit is saved and then set. This configures the device to wake up from the
1068          *  PICU. Make sure you have at least one pin configured to generate PICU
1069          *  interrupt. For pin Px.y, the register "PICU_INTTYPE_PICUx_INTTYPEy" controls
1070          *  the PICU behavior. In the TRM, this register is "PICU[0..15]_INTTYPE[0..7]."
1071          *  In the Pins component datasheet, this register is referred to as the IRQ
1072          *  option. Once the wakeup occurs, the PICU wakeup source bit is restored and
1073          *  the PSoC returns to the Active state.
1074          *
1075          * Reentrant:
1076          *  No
1077          *
1078          * \sideeffect
1079          *  Applications must wait 20 us before re-entering hibernate or sleep after
1080          *  waking up from hibernate. The 20 us allows the sleep regulator time to
1081          *  stabilize before the next hibernate / sleep event occurs. The 20 us
1082          *  requirement begins when the device wakes up. There is no hardware check that
1083          *  this requirement is met. The specified delay should be done on ISR entry.
1084          *
1085          *  After the wakeup PICU interrupt occurs, the Pin_ClearInterrupt() (where Pin
1086          *  is instance name of the Pins component) function must be called to clear the
1087          *  latched pin events to allow the proper Hibernate mode entry and to enable
1088          *  detection of future events.
1089          *
1090          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
1091          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
1092          *  delay is measured using the rising edges of the 1 kHz ILO.
1093          *
1094          *******************************************************************************/
1095          void CyPmHibernate(void) 
1096          {
1097   1          CyPmHibernateEx(CY_PM_HIB_SRC_PICU);
1098   1      }
1099          
1100          
1101          /*******************************************************************************
1102          * Function Name: CyPmHibernateEx
1103          ****************************************************************************//**
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 19  

1104          *
1105          *  Puts the part into the Hibernate state.
1106          *
1107          *  The following wake up sources can be configured: PICU interrupt, Comparator0,
1108          *  Comparator1, Comparator2, and Comparator3 output.
1109          *
1110          *  Before switching to Hibernate, the current status of the PICU wakeup source
1111          *  bit is saved and then set.
1112          *
1113          *  If using PICU as the wake up source, make sure you have at least one pin
1114          *  configured to generate a PICU interrupt. For pin Px.y, the register
1115          *  "PICU_INTTYPE_PICUx_INTTYPEy" controls  the PICU behavior. In the TRM, this
1116          *  register is "PICU[0..15]_INTTYPE[0..7]." In the Pins component datasheet,
1117          *  this register is referred to as the IRQ option. Once the wakeup occurs, the
1118          *  PICU wakeup source bit is restored and the PSoC returns to the Active state.
1119          *
1120          *  If using a comparator as the wake up source, make sure you call this function
1121          *  with the 'wakeupSource' parameter set to the appropriate comparator. The part
1122          *  is configured for the requested wakeup source by setting the corresponding
1123          *  bits in PM_WAKEUP_CFG1 register.
1124          *
1125          *  Function call CyPmHibernateEx(CY_PM_HIB_SRC_PICU) will act in the same way as
1126          *  CyPmHibernate().
1127          *
1128          *  \param wakeupSource:
1129          *           Parameter Value             Description
1130          *       CY_PM_HIB_SRC_PICU          PICU interrupt is set as the wake up source.
1131          *       CY_PM_HIB_SRC_COMPARATOR0   Comparator 0 is set as the wake up source.
1132          *       CY_PM_HIB_SRC_COMPARATOR1   Comparator 1 is set as the wake up source.
1133          *       CY_PM_HIB_SRC_COMPARATOR2   Comparator 2 is set as the wake up source.
1134          *       CY_PM_HIB_SRC_COMPARATOR3   Comparator 3 is set as the wake up source.
1135          *
1136          * Reentrant:
1137          *  No
1138          *
1139          * \sideeffect
1140          *  Applications must wait 20 us before re-entering hibernate or sleep after
1141          *  waking up from hibernate. The 20 us allows the sleep regulator time to
1142          *  stabilize before the next hibernate / sleep event occurs. The 20 us
1143          *  requirement begins when the device wakes up. There is no hardware check that
1144          *  this requirement is met. The specified delay should be done on ISR entry.
1145          *
1146          *  After the wakeup PICU interrupt occurs, the Pin_ClearInterrupt() (where Pin
1147          *  is instance name of the Pins component) function must be called to clear the
1148          *  latched pin events to allow the proper Hibernate mode entry and to enable
1149          *  detection of future events.
1150          *
1151          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
1152          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
1153          *  delay is measured using the rising edges of the 1 kHz ILO.
1154          *
1155          *******************************************************************************/
1156          void CyPmHibernateEx(uint16 wakeupSource) 
1157          {
1158   1          uint8 interruptState;
1159   1      
1160   1          /* Save current global interrupt enable and disable it */
1161   1          interruptState = CyEnterCriticalSection();
1162   1      
1163   1              /***********************************************************************
1164   1              * The Hibernate/Sleep regulator has a settling time after a reset.
1165   1              * During this time, the system ignores requests to enter the Sleep and
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 20  

1166   1              * Hibernate modes. The holdoff delay is measured using the rising edges of
1167   1              * the 1 kHz ILO.
1168   1              ***********************************************************************/
1169   1              if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
1170   1              {
1171   2                  /* Disable hold off - no action on restore */
1172   2                  CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
1173   2              }
1174   1              else
1175   1              {
1176   2                  /* Abort, device is not ready for low power mode entry */
1177   2      
1178   2                  /* Restore global interrupt enable state */
1179   2                  CyExitCriticalSection(interruptState);
1180   2      
1181   2                  return;
1182   2              }
1183   1      
1184   1          CyPmHibSaveSet();
1185   1      
1186   1      
1187   1          /* Save and set new wake up configuration */
1188   1      
1189   1          /* Save and enable only wakeup on PICU */
1190   1          cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
1191   1          CY_PM_WAKEUP_CFG0_REG = ((uint8) (wakeupSource >> 4u) & CY_PM_WAKEUP_PICU);
1192   1      
1193   1          /* Comparators */
1194   1          cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
1195   1          CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
1196   1      
1197   1          cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
1198   1          CY_PM_WAKEUP_CFG2_REG = 0x00u;
1199   1      
1200   1      
1201   1          /* Last moment IMO frequency change */
1202   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
1203   1          {
1204   2              /* IMO frequency is 12 MHz */
1205   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
1206   2          }
1207   1          else
1208   1          {
1209   2              /* IMO frequency is not 12 MHz */
1210   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
1211   2      
1212   2              /* Save IMO frequency */
1213   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1214   2      
1215   2              /* Set IMO frequency to 12 MHz */
1216   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1217   2          }
1218   1      
1219   1      
1220   1          /* Switch to Hibernate Mode */
1221   1          CY_PM_MODE_CSR_REG = (CY_PM_MODE_CSR_REG & ((uint8) (~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_HIBERNAT
             -E;
1222   1      
1223   1          /* Recommended readback. */
1224   1          (void) CY_PM_MODE_CSR_REG;
1225   1      
1226   1          /* Two recommended NOPs to get into mode. */
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 21  

1227   1          CY_NOP;
1228   1          CY_NOP;
1229   1      
1230   1          /* Execute WFI instruction (for ARM-based devices only) */
1231   1          CY_PM_WFI;
1232   1      
1233   1      
1234   1          /* Point of return from Hibernate mode */
1235   1      
1236   1      
1237   1          /* Restore last moment IMO frequency change */
1238   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1239   1          {
1240   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1241   2                                          cyPmBackup.imoActFreq;
1242   2          }
1243   1      
1244   1      
1245   1          /* Restore device for proper Hibernate mode exit*/
1246   1          CyPmHibRestore();
1247   1      
1248   1          /* Restore current wake up configuration */
1249   1          CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1250   1          CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1251   1          CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1252   1      
1253   1          /* Restore global interrupt enable state */
1254   1          CyExitCriticalSection(interruptState);
1255   1      }
1256          
1257          
1258          /*******************************************************************************
1259          * Function Name: CyPmReadStatus
1260          ****************************************************************************//**
1261          *
1262          *  Manages the Power Manager Interrupt Status Register.  This register has the
1263          *  interrupt status for the one pulse per second, central timewheel and fast
1264          *  timewheel timers.  This hardware register clears on read.  To allow for only
1265          *  clearing the bits of interest and preserving the other bits, this function
1266          *  uses a shadow register that retains the state.  This function reads the
1267          *  status register and ORs that value with the shadow register.  That is the
1268          *  value that is returned.  Then the bits in the mask that are set are cleared
1269          *  from this value and written back to the shadow register.
1270          *
1271          *  Note You must call this function within 1 ms (1 clock cycle of the ILO)
1272          *  after a CTW event has occurred.
1273          *
1274          *  \param mask: Bits in the shadow register to clear.
1275          *
1276          *       Define                      Source
1277          *  CY_PM_FTW_INT                Fast Timewheel
1278          *  CY_PM_CTW_INT                Central Timewheel
1279          *  CY_PM_ONEPPS_INT             One Pulse Per Second
1280          *
1281          * \return
1282          *  Status.  Same bits values as the mask parameter.
1283          *
1284          *******************************************************************************/
1285          uint8 CyPmReadStatus(uint8 mask) 
1286          {
1287   1          static uint8 interruptStatus;
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 22  

1288   1          uint8 interruptState;
1289   1          uint8 tmpStatus;
1290   1      
1291   1          /* Enter critical section */
1292   1          interruptState = CyEnterCriticalSection();
1293   1      
1294   1          /* Save value of register, copy it and clear desired bit */
1295   1          interruptStatus |= CY_PM_INT_SR_REG;
1296   1          tmpStatus = interruptStatus & (CY_PM_FTW_INT | CY_PM_CTW_INT | CY_PM_ONEPPS_INT);
1297   1          interruptStatus &= ((uint8)(~mask));
1298   1      
1299   1          /* Exit critical section */
1300   1          CyExitCriticalSection(interruptState);
1301   1      
1302   1          return(tmpStatus);
1303   1      }
1304          
1305          
1306          /*******************************************************************************
1307          * Function Name: CyPmHibSaveSet
1308          ****************************************************************************//**
1309          *
1310          *  Prepare device for proper Hibernate low power mode entry:
1311          *  - Disables I2C backup regulator
1312          *  - Saves ILO power down mode state and enable it
1313          *  - Saves state of 1 kHz and 100 kHz ILO and disable them
1314          *  - Disables sleep regulator and shorts vccd to vpwrsleep
1315          *  - Save LVI/HVI configuration and disable them - CyPmHviLviSaveDisable()
1316          *  - CyPmHibSlpSaveSet() function is called
1317          *
1318          * Reentrant:
1319          *  No
1320          *
1321          *******************************************************************************/
1322          static void CyPmHibSaveSet(void) 
1323          {
1324   1          /* I2C backup reg must be off when the sleep regulator is unavailable */
1325   1          if(0u != (CY_PM_PWRSYS_CR1_REG & CY_PM_PWRSYS_CR1_I2CREG_BACKUP))
1326   1          {
1327   2              /***********************************************************************
1328   2              * If the I2C backup regulator is enabled, all the fixed-function registers
1329   2              * store their values while the device is in the low power mode, otherwise their
1330   2              * configuration is lost. The I2C API makes a decision to restore or not
1331   2              * to restore I2C registers based on this. If this regulator will be
1332   2              * disabled and then enabled, I2C API will suppose that the I2C block
1333   2              * registers preserved their values, while this is not true. So, the
1334   2              * backup regulator is disabled. The I2C sleep APIs is responsible for
1335   2              * restoration.
1336   2              ***********************************************************************/
1337   2      
1338   2              /* Disable I2C backup register */
1339   2              CY_PM_PWRSYS_CR1_REG &= ((uint8)(~CY_PM_PWRSYS_CR1_I2CREG_BACKUP));
1340   2          }
1341   1      
1342   1      
1343   1          /* Save current ILO power mode and ensure low power mode */
1344   1          cyPmBackup.iloPowerMode = CyILO_SetPowerMode(CY_PM_POWERDOWN_MODE);
1345   1      
1346   1          /* Save current 1kHz ILO enable state. Disabled automatically. */
1347   1          cyPmBackup.ilo1kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_1K)) ?
1348   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1349   1      
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 23  

1350   1          /* Save current 100kHz ILO enable state. Disabled automatically. */
1351   1          cyPmBackup.ilo100kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_100K)) ?
1352   1                                      CY_PM_DISABLED : CY_PM_ENABLED;
1353   1      
1354   1      
1355   1          /* Disable the sleep regulator and shorts vccd to vpwrsleep */
1356   1          if(0u == (CY_PM_PWRSYS_SLP_TR_REG & CY_PM_PWRSYS_SLP_TR_BYPASS))
1357   1          {
1358   2              /* Save current bypass state */
1359   2              cyPmBackup.slpTrBypass = CY_PM_DISABLED;
1360   2              CY_PM_PWRSYS_SLP_TR_REG |= CY_PM_PWRSYS_SLP_TR_BYPASS;
1361   2          }
1362   1          else
1363   1          {
1364   2              cyPmBackup.slpTrBypass = CY_PM_ENABLED;
1365   2          }
1366   1      
1367   1          /* LPCOMPs are always enabled (even when BOTH ext_vccd=1 and ext_vcca=1)*/
1368   1      
1369   1      
1370   1          /***************************************************************************
1371   1          * LVI/HVI must be disabled in Hibernate
1372   1          ***************************************************************************/
1373   1      
1374   1          /* Save LVI/HVI configuration and disable them */
1375   1          CyPmHviLviSaveDisable();
1376   1      
1377   1      
1378   1          /* Make the same preparations for Hibernate and Sleep modes */
1379   1          CyPmHibSlpSaveSet();
1380   1      
1381   1      
1382   1          /***************************************************************************
1383   1          * Save and set the power mode wakeup trim registers
1384   1          ***************************************************************************/
1385   1          cyPmBackup.wakeupTrim0 = CY_PM_PWRSYS_WAKE_TR0_REG;
1386   1          cyPmBackup.wakeupTrim1 = CY_PM_PWRSYS_WAKE_TR1_REG;
1387   1      
1388   1          CY_PM_PWRSYS_WAKE_TR0_REG = CY_PM_PWRSYS_WAKE_TR0;
1389   1          CY_PM_PWRSYS_WAKE_TR1_REG = CY_PM_PWRSYS_WAKE_TR1;
1390   1      }
1391          
1392          
1393          /*******************************************************************************
1394          * Function Name: CyPmHibRestore
1395          ****************************************************************************//**
1396          *
1397          *  Restores the device for the proper Hibernate mode exit:
1398          *  - Restores LVI/HVI configuration - calsl CyPmHviLviRestore()
1399          *  - CyPmHibSlpSaveRestore() function is called
1400          *  - Restores ILO power down mode state and enables it
1401          *  - Restores the state of 1 kHz and 100 kHz ILO and disables them
1402          *  - Restores the sleep regulator settings
1403          *
1404          *******************************************************************************/
1405          static void CyPmHibRestore(void) 
1406          {
1407   1          /* Restore LVI/HVI configuration */
1408   1          CyPmHviLviRestore();
1409   1      
1410   1          /* Restore the same configuration for Hibernate and Sleep modes */
1411   1          CyPmHibSlpRestore();
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 24  

1412   1      
1413   1          /* Restore 1kHz ILO enable state */
1414   1          if(CY_PM_ENABLED == cyPmBackup.ilo1kEnable)
1415   1          {
1416   2              /* Enable 1kHz ILO */
1417   2              CyILO_Start1K();
1418   2          }
1419   1      
1420   1          /* Restore 100kHz ILO enable state */
1421   1          if(CY_PM_ENABLED == cyPmBackup.ilo100kEnable)
1422   1          {
1423   2              /* Enable 100kHz ILO */
1424   2              CyILO_Start100K();
1425   2          }
1426   1      
1427   1          /* Restore ILO power mode */
1428   1          (void) CyILO_SetPowerMode(cyPmBackup.iloPowerMode);
1429   1      
1430   1      
1431   1          if(CY_PM_DISABLED == cyPmBackup.slpTrBypass)
1432   1          {
1433   2              /* Enable the sleep regulator */
1434   2              CY_PM_PWRSYS_SLP_TR_REG &= ((uint8)(~CY_PM_PWRSYS_SLP_TR_BYPASS));
1435   2          }
1436   1      
1437   1      
1438   1          /***************************************************************************
1439   1          * Restore the power mode wakeup trim registers
1440   1          ***************************************************************************/
1441   1          CY_PM_PWRSYS_WAKE_TR0_REG = cyPmBackup.wakeupTrim0;
1442   1          CY_PM_PWRSYS_WAKE_TR1_REG = cyPmBackup.wakeupTrim1;
1443   1      }
1444          
1445          
1446          /*******************************************************************************
1447          * Function Name: CyPmCtwSetInterval
1448          ****************************************************************************//**
1449          *
1450          *  Performs the CTW configuration:
1451          *  - Disables the CTW interrupt
1452          *  - Enables 1 kHz ILO
1453          *  - Sets a new CTW interval
1454          *
1455          *  \param ctwInterval: the CTW interval to be set.
1456          *
1457          * \sideeffect
1458          *  Enables ILO 1 KHz clock and leaves it enabled.
1459          *
1460          *******************************************************************************/
1461          void CyPmCtwSetInterval(uint8 ctwInterval) 
1462          {
1463   1          /* Disable CTW interrupt enable */
1464   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_IE));
1465   1      
1466   1          /* Enable 1kHz ILO (required for CTW operation) */
1467   1          CyILO_Start1K();
1468   1      
1469   1          /* Interval could be set only while CTW is disabled */
1470   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_CTW_EN))
1471   1          {
1472   2              /* Set CTW interval if needed */
1473   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 25  

1474   2              {
1475   3                  /* Disable the CTW, set new CTW interval and enable it again */
1476   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_EN));
1477   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1478   3                  CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1479   3              }   /* Required interval is already set */
1480   2          }
1481   1          else
1482   1          {
1483   2              /* Set CTW interval if needed */
1484   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1485   2              {
1486   3                  /* Set new CTW interval. Could be changed if CTW is disabled */
1487   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1488   3              }   /* Required interval is already set */
1489   2      
1490   2              /* Enable CTW */
1491   2              CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1492   2          }
1493   1      }
1494          
1495          
1496          /*******************************************************************************
1497          * Function Name: CyPmOppsSet
1498          ****************************************************************************//**
1499          *
1500          *  Performs 1PPS configuration:
1501          *  - Starts 32 KHz XTAL
1502          *  - Disables 1PPS interrupts
1503          *  - Enables 1PPS
1504          *
1505          *******************************************************************************/
1506          void CyPmOppsSet(void) 
1507          {
1508   1          /* Enable 32kHz XTAL if needed */
1509   1          if(0u == (CY_PM_SLOWCLK_X32_CR_REG & CY_PM_X32_CR_X32EN))
1510   1          {
1511   2              /* Enable 32kHz XTAL */
1512   2              CyXTAL_32KHZ_Start();
1513   2          }
1514   1      
1515   1          /* Disable 1PPS interrupt enable */
1516   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_1PPS_IE));
1517   1      
1518   1          /* Enable 1PPS operation */
1519   1          CY_PM_TW_CFG2_REG |= CY_PM_1PPS_EN;
1520   1      }
1521          
1522          
1523          /*******************************************************************************
1524          * Function Name: CyPmFtwSetInterval
1525          ****************************************************************************//**
1526          *
1527          *  Performs the FTW configuration:
1528          *  - Disables the FTW interrupt
1529          *  - Enables 100 kHz ILO
1530          *  - Sets a new FTW interval.
1531          *
1532          *  \param ftwInterval The FTW counter interval.
1533          *
1534          * \sideeffect
1535          *  Enables the ILO 100 KHz clock and leaves it enabled.
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 26  

1536          *
1537          *******************************************************************************/
1538          void CyPmFtwSetInterval(uint8 ftwInterval) 
1539          {
1540   1          /* Disable FTW interrupt enable */
1541   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_IE));
1542   1      
1543   1          /* Enable 100kHz ILO */
1544   1          CyILO_Start100K();
1545   1      
1546   1          /* Interval could be set only while FTW is disabled */
1547   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_FTW_EN))
1548   1          {
1549   2              /* Disable FTW, set new FTW interval if needed and enable it again */
1550   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1551   2              {
1552   3                  /* Disable CTW, set new CTW interval and enable it again */
1553   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_EN));
1554   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1555   3                  CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1556   3              }   /* Required interval is already set */
1557   2          }
1558   1          else
1559   1          {
1560   2              /* Set new FTW counter interval if needed. FTW is disabled. */
1561   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1562   2              {
1563   3                  /* Set new CTW interval. Could be changed if CTW is disabled */
1564   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1565   3              }   /* Required interval is already set */
1566   2      
1567   2              /* Enable FTW */
1568   2              CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1569   2          }
1570   1      }
1571          
1572          
1573          /*******************************************************************************
1574          * Function Name: CyPmHibSlpSaveSet
1575          ****************************************************************************//**
1576          *
1577          *  This API is used for preparing the device for the Sleep and Hibernate low
1578          *  power modes entry:
1579          *  - Saves the COMP, VIDAC, DSM, and SAR routing connections (PSoC 5)
1580          *  - Saves the SC/CT routing connections (PSoC 3/5/5LP)
1581          *  - Disables the Serial Wire Viewer (SWV) (PSoC 3)
1582          *  - Saves the boost reference selection and sets it to internal
1583          *
1584          * Reentrant:
1585          *  No
1586          *
1587          *******************************************************************************/
1588          static void CyPmHibSlpSaveSet(void) 
1589          {
1590   1          /* Save SC/CT routing registers */
1591   1          cyPmBackup.scctData[0u]   = CY_GET_REG8(CYREG_SC0_SW0 );
1592   1          cyPmBackup.scctData[1u]   = CY_GET_REG8(CYREG_SC0_SW2 );
1593   1          cyPmBackup.scctData[2u]   = CY_GET_REG8(CYREG_SC0_SW3 );
1594   1          cyPmBackup.scctData[3u]   = CY_GET_REG8(CYREG_SC0_SW4 );
1595   1          cyPmBackup.scctData[4u]   = CY_GET_REG8(CYREG_SC0_SW6 );
1596   1          cyPmBackup.scctData[5u]   = CY_GET_REG8(CYREG_SC0_SW8 );
1597   1          cyPmBackup.scctData[6u]   = CY_GET_REG8(CYREG_SC0_SW10);
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 27  

1598   1      
1599   1          cyPmBackup.scctData[7u]   = CY_GET_REG8(CYREG_SC1_SW0 );
1600   1          cyPmBackup.scctData[8u]   = CY_GET_REG8(CYREG_SC1_SW2 );
1601   1          cyPmBackup.scctData[9u]   = CY_GET_REG8(CYREG_SC1_SW3 );
1602   1          cyPmBackup.scctData[10u]  = CY_GET_REG8(CYREG_SC1_SW4 );
1603   1          cyPmBackup.scctData[11u]  = CY_GET_REG8(CYREG_SC1_SW6 );
1604   1          cyPmBackup.scctData[12u]  = CY_GET_REG8(CYREG_SC1_SW8 );
1605   1          cyPmBackup.scctData[13u]  = CY_GET_REG8(CYREG_SC1_SW10);
1606   1      
1607   1          cyPmBackup.scctData[14u]  = CY_GET_REG8(CYREG_SC2_SW0 );
1608   1          cyPmBackup.scctData[15u]  = CY_GET_REG8(CYREG_SC2_SW2 );
1609   1          cyPmBackup.scctData[16u]  = CY_GET_REG8(CYREG_SC2_SW3 );
1610   1          cyPmBackup.scctData[17u]  = CY_GET_REG8(CYREG_SC2_SW4 );
1611   1          cyPmBackup.scctData[18u]  = CY_GET_REG8(CYREG_SC2_SW6 );
1612   1          cyPmBackup.scctData[19u]  = CY_GET_REG8(CYREG_SC2_SW8 );
1613   1          cyPmBackup.scctData[20u]  = CY_GET_REG8(CYREG_SC2_SW10);
1614   1      
1615   1          cyPmBackup.scctData[21u]  = CY_GET_REG8(CYREG_SC3_SW0 );
1616   1          cyPmBackup.scctData[22u]  = CY_GET_REG8(CYREG_SC3_SW2 );
1617   1          cyPmBackup.scctData[23u]  = CY_GET_REG8(CYREG_SC3_SW3 );
1618   1          cyPmBackup.scctData[24u]  = CY_GET_REG8(CYREG_SC3_SW4 );
1619   1          cyPmBackup.scctData[25u]  = CY_GET_REG8(CYREG_SC3_SW6 );
1620   1          cyPmBackup.scctData[26u]  = CY_GET_REG8(CYREG_SC3_SW8 );
1621   1          cyPmBackup.scctData[27u]  = CY_GET_REG8(CYREG_SC3_SW10);
1622   1      
1623   1          CY_SET_REG8(CYREG_SC0_SW0 , 0u);
1624   1          CY_SET_REG8(CYREG_SC0_SW2 , 0u);
1625   1          CY_SET_REG8(CYREG_SC0_SW3 , 0u);
1626   1          CY_SET_REG8(CYREG_SC0_SW4 , 0u);
1627   1          CY_SET_REG8(CYREG_SC0_SW6 , 0u);
1628   1          CY_SET_REG8(CYREG_SC0_SW8 , 0u);
1629   1          CY_SET_REG8(CYREG_SC0_SW10, 0u);
1630   1      
1631   1          CY_SET_REG8(CYREG_SC1_SW0 , 0u);
1632   1          CY_SET_REG8(CYREG_SC1_SW2 , 0u);
1633   1          CY_SET_REG8(CYREG_SC1_SW3 , 0u);
1634   1          CY_SET_REG8(CYREG_SC1_SW4 , 0u);
1635   1          CY_SET_REG8(CYREG_SC1_SW6 , 0u);
1636   1          CY_SET_REG8(CYREG_SC1_SW8 , 0u);
1637   1          CY_SET_REG8(CYREG_SC1_SW10, 0u);
1638   1      
1639   1          CY_SET_REG8(CYREG_SC2_SW0 , 0u);
1640   1          CY_SET_REG8(CYREG_SC2_SW2 , 0u);
1641   1          CY_SET_REG8(CYREG_SC2_SW3 , 0u);
1642   1          CY_SET_REG8(CYREG_SC2_SW4 , 0u);
1643   1          CY_SET_REG8(CYREG_SC2_SW6 , 0u);
1644   1          CY_SET_REG8(CYREG_SC2_SW8 , 0u);
1645   1          CY_SET_REG8(CYREG_SC2_SW10, 0u);
1646   1      
1647   1          CY_SET_REG8(CYREG_SC3_SW0 , 0u);
1648   1          CY_SET_REG8(CYREG_SC3_SW2 , 0u);
1649   1          CY_SET_REG8(CYREG_SC3_SW3 , 0u);
1650   1          CY_SET_REG8(CYREG_SC3_SW4 , 0u);
1651   1          CY_SET_REG8(CYREG_SC3_SW6 , 0u);
1652   1          CY_SET_REG8(CYREG_SC3_SW8 , 0u);
1653   1          CY_SET_REG8(CYREG_SC3_SW10, 0u);
1654   1      
1655   1      
1656   1          #if(CY_PSOC3)
1657   1      
1658   1              /* Serial Wire Viewer (SWV) workaround */
1659   1      
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 28  

1660   1              /* Disable SWV before entering low power mode */
1661   1              if(0u != (CY_PM_MLOGIC_DBG_REG & CY_PM_MLOGIC_DBG_SWV_CLK_EN))
1662   1              {
1663   2                  /* Save SWV clock enabled state */
1664   2                  cyPmBackup.swvClkEnabled = CY_PM_ENABLED;
1665   2      
1666   2                  /* Save current ports drive mode settings */
1667   2                  cyPmBackup.prt1Dm = CY_PM_PRT1_PC3_REG & ((uint8)(~CY_PM_PRT1_PC3_DM_MASK));
1668   2      
1669   2                  /* Set drive mode to strong output */
1670   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1671   2                                      CY_PM_PRT1_PC3_DM_STRONG;
1672   2      
1673   2                  /* Disable SWV clocks */
1674   2                  CY_PM_MLOGIC_DBG_REG &= ((uint8)(~CY_PM_MLOGIC_DBG_SWV_CLK_EN));
1675   2              }
1676   1              else
1677   1              {
1678   2                  /* Save SWV clock disabled state */
1679   2                  cyPmBackup.swvClkEnabled = CY_PM_DISABLED;
1680   2              }
1681   1      
1682   1          #endif  /* (CY_PSOC3) */
1683   1      
1684   1      
1685   1          /***************************************************************************
1686   1          * Save boost reference and set it to boost's internal by clearing the bit.
1687   1          * External (chip bandgap) reference is not available in Sleep and Hibernate.
1688   1          ***************************************************************************/
1689   1          if(0u != (CY_PM_BOOST_CR2_REG & CY_PM_BOOST_CR2_EREFSEL_EXT))
1690   1          {
1691   2              cyPmBackup.boostRefExt = CY_PM_ENABLED;
1692   2              CY_PM_BOOST_CR2_REG &= ((uint8)(~CY_PM_BOOST_CR2_EREFSEL_EXT));
1693   2          }
1694   1          else
1695   1          {
1696   2              cyPmBackup.boostRefExt = CY_PM_DISABLED;
1697   2          }
1698   1      }
1699          
1700          
1701          /*******************************************************************************
1702          * Function Name: CyPmHibSlpRestore
1703          ****************************************************************************//**
1704          *
1705          *  This API is used for restoring the device configurations after wakeup from
1706          *  the Sleep and Hibernate low power modes:
1707          *  - Restores the SC/CT routing connections
1708          *  - Restores the enable state of the Serial Wire Viewer (SWV) (PSoC 3)
1709          *  - Restores the  boost reference selection
1710          *
1711          *******************************************************************************/
1712          static void CyPmHibSlpRestore(void) 
1713          {
1714   1          /* Restore SC/CT routing registers */
1715   1          CY_SET_REG8(CYREG_SC0_SW0 , cyPmBackup.scctData[0u] );
1716   1          CY_SET_REG8(CYREG_SC0_SW2 , cyPmBackup.scctData[1u] );
1717   1          CY_SET_REG8(CYREG_SC0_SW3 , cyPmBackup.scctData[2u] );
1718   1          CY_SET_REG8(CYREG_SC0_SW4 , cyPmBackup.scctData[3u] );
1719   1          CY_SET_REG8(CYREG_SC0_SW6 , cyPmBackup.scctData[4u] );
1720   1          CY_SET_REG8(CYREG_SC0_SW8 , cyPmBackup.scctData[5u] );
1721   1          CY_SET_REG8(CYREG_SC0_SW10, cyPmBackup.scctData[6u] );
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 29  

1722   1      
1723   1          CY_SET_REG8(CYREG_SC1_SW0 , cyPmBackup.scctData[7u] );
1724   1          CY_SET_REG8(CYREG_SC1_SW2 , cyPmBackup.scctData[8u] );
1725   1          CY_SET_REG8(CYREG_SC1_SW3 , cyPmBackup.scctData[9u] );
1726   1          CY_SET_REG8(CYREG_SC1_SW4 , cyPmBackup.scctData[10u]);
1727   1          CY_SET_REG8(CYREG_SC1_SW6 , cyPmBackup.scctData[11u]);
1728   1          CY_SET_REG8(CYREG_SC1_SW8 , cyPmBackup.scctData[12u]);
1729   1          CY_SET_REG8(CYREG_SC1_SW10, cyPmBackup.scctData[13u]);
1730   1      
1731   1          CY_SET_REG8(CYREG_SC2_SW0 , cyPmBackup.scctData[14u]);
1732   1          CY_SET_REG8(CYREG_SC2_SW2 , cyPmBackup.scctData[15u]);
1733   1          CY_SET_REG8(CYREG_SC2_SW3 , cyPmBackup.scctData[16u]);
1734   1          CY_SET_REG8(CYREG_SC2_SW4 , cyPmBackup.scctData[17u]);
1735   1          CY_SET_REG8(CYREG_SC2_SW6 , cyPmBackup.scctData[18u]);
1736   1          CY_SET_REG8(CYREG_SC2_SW8 , cyPmBackup.scctData[19u]);
1737   1          CY_SET_REG8(CYREG_SC2_SW10, cyPmBackup.scctData[20u]);
1738   1      
1739   1          CY_SET_REG8(CYREG_SC3_SW0 , cyPmBackup.scctData[21u]);
1740   1          CY_SET_REG8(CYREG_SC3_SW2 , cyPmBackup.scctData[22u]);
1741   1          CY_SET_REG8(CYREG_SC3_SW3 , cyPmBackup.scctData[23u]);
1742   1          CY_SET_REG8(CYREG_SC3_SW4 , cyPmBackup.scctData[24u]);
1743   1          CY_SET_REG8(CYREG_SC3_SW6 , cyPmBackup.scctData[25u]);
1744   1          CY_SET_REG8(CYREG_SC3_SW8 , cyPmBackup.scctData[26u]);
1745   1          CY_SET_REG8(CYREG_SC3_SW10, cyPmBackup.scctData[27u]);
1746   1      
1747   1      
1748   1          #if(CY_PSOC3)
1749   1      
1750   1              /* Serial Wire Viewer (SWV) workaround */
1751   1              if(CY_PM_ENABLED == cyPmBackup.swvClkEnabled)
1752   1              {
1753   2                  /* Restore ports drive mode */
1754   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
1755   2                                          cyPmBackup.prt1Dm;
1756   2      
1757   2                  /* Enable SWV clocks */
1758   2                  CY_PM_MLOGIC_DBG_REG |= CY_PM_MLOGIC_DBG_SWV_CLK_EN;
1759   2              }
1760   1      
1761   1          #endif /* (CY_PSOC3) */
1762   1      
1763   1      
1764   1          /* Restore boost reference */
1765   1          if(CY_PM_ENABLED == cyPmBackup.boostRefExt)
1766   1          {
1767   2              CY_PM_BOOST_CR2_REG |= CY_PM_BOOST_CR2_EREFSEL_EXT;
1768   2          }
1769   1      }
1770          
1771          
1772          /*******************************************************************************
1773          * Function Name: CyPmHviLviSaveDisable
1774          ****************************************************************************//**
1775          *
1776          *  Saves analog and digital LVI and HVI configuration and disables them.
1777          *
1778          * Reentrant:
1779          *  No
1780          *
1781          *******************************************************************************/
1782          static void CyPmHviLviSaveDisable(void) 
1783          {
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 30  

1784   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVID_EN))
1785   1          {
1786   2              cyPmBackup.lvidEn = CY_PM_ENABLED;
1787   2              cyPmBackup.lvidTrip = CY_VD_LVI_TRIP_REG & CY_VD_LVI_TRIP_LVID_MASK;
1788   2      
1789   2              /* Save state of reset device at specified Vddd threshold */
1790   2              cyPmBackup.lvidRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESD_EN)) ? \
1791   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1792   2      
1793   2              CyVdLvDigitDisable();
1794   2          }
1795   1          else
1796   1          {
1797   2              cyPmBackup.lvidEn = CY_PM_DISABLED;
1798   2          }
1799   1      
1800   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVIA_EN))
1801   1          {
1802   2              cyPmBackup.lviaEn = CY_PM_ENABLED;
1803   2              cyPmBackup.lviaTrip = CY_VD_LVI_TRIP_REG >> 4u;
1804   2      
1805   2              /* Save state of reset device at specified Vdda threshold */
1806   2              cyPmBackup.lviaRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESA_EN)) ? \
1807   2                                   CY_PM_DISABLED : CY_PM_ENABLED;
1808   2      
1809   2              CyVdLvAnalogDisable();
1810   2          }
1811   1          else
1812   1          {
1813   2              cyPmBackup.lviaEn = CY_PM_DISABLED;
1814   2          }
1815   1      
1816   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_HVIA_EN))
1817   1          {
1818   2              cyPmBackup.hviaEn = CY_PM_ENABLED;
1819   2              CyVdHvAnalogDisable();
1820   2          }
1821   1          else
1822   1          {
1823   2              cyPmBackup.hviaEn = CY_PM_DISABLED;
1824   2          }
1825   1      }
1826          
1827          
1828          /*******************************************************************************
1829          * Function Name: CyPmHviLviRestore
1830          ****************************************************************************//**
1831          *
1832          *  Restores the analog and digital LVI and HVI configuration.
1833          *
1834          * Reentrant:
1835          *  No
1836          *
1837          *******************************************************************************/
1838          static void CyPmHviLviRestore(void) 
1839          {
1840   1          /* Restore LVI/HVI configuration */
1841   1          if(CY_PM_ENABLED == cyPmBackup.lvidEn)
1842   1          {
1843   2              CyVdLvDigitEnable(cyPmBackup.lvidRst, cyPmBackup.lvidTrip);
1844   2          }
1845   1      
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 31  

1846   1          if(CY_PM_ENABLED == cyPmBackup.lviaEn)
1847   1          {
1848   2              CyVdLvAnalogEnable(cyPmBackup.lviaRst, cyPmBackup.lviaTrip);
1849   2          }
1850   1      
1851   1          if(CY_PM_ENABLED == cyPmBackup.hviaEn)
1852   1          {
1853   2              CyVdHvAnalogEnable();
1854   2          }
1855   1      }
1856          
1857          
1858          /* [] END OF FILE */
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 32  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyPmSaveClocks (BEGIN)
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 76
0000 9043A1            MOV     DPTR,#043A1H
0003 E0                MOVX    A,@DPTR
0004 540F              ANL     A,#0FH
0006 900000      R     MOV     DPTR,#cyPmClockBackup
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
000A 9043A2            MOV     DPTR,#043A2H
000D E0                MOVX    A,@DPTR
000E 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0012 9043A1            MOV     DPTR,#043A1H
0015 E0                MOVX    A,@DPTR
0016 54F0              ANL     A,#0F0H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
001D 904800            MOV     DPTR,#04800H
0020 E0                MOVX    A,@DPTR
0021 54C0              ANL     A,#0C0H
0023 900000      R     MOV     DPTR,#cyPmClockBackup+05H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0027 7F2D              MOV     R7,#02DH
0029 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 86
002C 904200            MOV     DPTR,#04200H
002F E0                MOVX    A,@DPTR
0030 5407              ANL     A,#07H
0032 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
0036 904200            MOV     DPTR,#04200H
0039 E0                MOVX    A,@DPTR
003A 5440              ANL     A,#040H
003C 900000      R     MOV     DPTR,#cyPmClockBackup+04H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0040 904200            MOV     DPTR,#04200H
0043 E0                MOVX    A,@DPTR
0044 5410              ANL     A,#010H
0046 6008              JZ      ?C0001
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 93
0048 900000      R     MOV     DPTR,#cyPmClockBackup+09H
004B 7401              MOV     A,#01H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
004E 8005              SJMP    ?C0002
0050         ?C0001:
                                           ; SOURCE LINE # 96
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 33  

                                           ; SOURCE LINE # 98
0050 E4                CLR     A
0051 900000      R     MOV     DPTR,#cyPmClockBackup+09H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0055         ?C0002:
                                           ; SOURCE LINE # 102
0055 904005            MOV     DPTR,#04005H
0058 E0                MOVX    A,@DPTR
0059 5403              ANL     A,#03H
005B 900000      R     MOV     DPTR,#cyPmClockBackup+02H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
005F E0                MOVX    A,@DPTR
0060 B40123            CJNE    A,#01H,?C0003
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
0063 904000            MOV     DPTR,#04000H
0066 E0                MOVX    A,@DPTR
0067 5403              ANL     A,#03H
0069 14                DEC     A
006A 600E              JZ      ?C0006
006C 14                DEC     A
006D 6012              JZ      ?C0007
006F 2402              ADD     A,#02H
0071 7013              JNZ     ?C0003
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
0073         ?C0005:
                                           ; SOURCE LINE # 110
0073 E4                CLR     A
0074 FF                MOV     R7,A
0075 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 111
0078 800C              SJMP    ?C0003
                                           ; SOURCE LINE # 113
007A         ?C0006:
                                           ; SOURCE LINE # 114
007A 7F02              MOV     R7,#02H
007C 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 115
007F 8005              SJMP    ?C0003
                                           ; SOURCE LINE # 117
0081         ?C0007:
                                           ; SOURCE LINE # 118
0081 7F03              MOV     R7,#03H
0083 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0086         ?C0003:
                                           ; SOURCE LINE # 128
0086 904220            MOV     DPTR,#04220H
0089 E0                MOVX    A,@DPTR
008A 5401              ANL     A,#01H
008C 600B              JZ      ?C0009
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 131
008E 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0091 7401              MOV     A,#01H
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 34  

0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0094 120000      E     LCALL   CyPLL_OUT_Stop
                                           ; SOURCE LINE # 133
0097 8005              SJMP    ?C0010
0099         ?C0009:
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
0099 E4                CLR     A
009A 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
009E         ?C0010:
                                           ; SOURCE LINE # 141
009E 7F04              MOV     R7,#04H
00A0 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 144
00A3 9043A0            MOV     DPTR,#043A0H
00A6 E0                MOVX    A,@DPTR
00A7 5410              ANL     A,#010H
00A9 6008              JZ      ?C0011
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 147
00AB 900000      R     MOV     DPTR,#cyPmClockBackup+06H
00AE 7401              MOV     A,#01H
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
00B1 8010              SJMP    ?C0012
00B3         ?C0011:
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 152
00B3 E4                CLR     A
00B4 900000      R     MOV     DPTR,#cyPmClockBackup+06H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00B8 FF                MOV     R7,A
00B9 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 158
00BC 7F06              MOV     R7,#06H
00BE 7E00              MOV     R6,#00H
00C0 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 159
00C3         ?C0012:
                                           ; SOURCE LINE # 162
00C3 904200            MOV     DPTR,#04200H
00C6 E0                MOVX    A,@DPTR
00C7 5420              ANL     A,#020H
00C9 601A              JZ      ?C0013
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 166
00CB 904000            MOV     DPTR,#04000H
00CE E0                MOVX    A,@DPTR
00CF 5440              ANL     A,#040H
00D1 7004              JNZ     ?C0014
00D3 7F02              MOV     R7,#02H
00D5 8002              SJMP    ?C0015
00D7         ?C0014:
00D7 7F01              MOV     R7,#01H
00D9         ?C0015:
00D9 900000      R     MOV     DPTR,#cyPmClockBackup+07H
00DC EF                MOV     A,R7
00DD F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 35  

                                           ; SOURCE LINE # 169
00DE E4                CLR     A
00DF FF                MOV     R7,A
00E0 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 170
00E3 8005              SJMP    ?C0016
00E5         ?C0013:
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 174
00E5 E4                CLR     A
00E6 900000      R     MOV     DPTR,#cyPmClockBackup+07H
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
00EA         ?C0016:
                                           ; SOURCE LINE # 178
00EA 904000            MOV     DPTR,#04000H
00ED E0                MOVX    A,@DPTR
00EE 5430              ANL     A,#030H
00F0 900000      R     MOV     DPTR,#cyPmClockBackup+08H
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
00F4 E0                MOVX    A,@DPTR
00F5 6007              JZ      ?C0017
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 184
00F7 904000            MOV     DPTR,#04000H
00FA E0                MOVX    A,@DPTR
00FB 54CF              ANL     A,#0CFH
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
00FE         ?C0017:
                                           ; SOURCE LINE # 189
00FE 904200            MOV     DPTR,#04200H
0101 E0                MOVX    A,@DPTR
0102 5410              ANL     A,#010H
0104 6003              JZ      ?C0018
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0106 120000      E     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 192
0109         ?C0018:
                                           ; SOURCE LINE # 195
0109 904004            MOV     DPTR,#04004H
010C E0                MOVX    A,@DPTR
010D 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
0111 E0                MOVX    A,@DPTR
0112 6005              JZ      ?C0019
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0114 E4                CLR     A
0115 FF                MOV     R7,A
0116 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 199
0119         ?C0019:
                                           ; SOURCE LINE # 202
0119 900000      R     MOV     DPTR,#cyPmClockBackup+02H
011C E0                MOVX    A,@DPTR
011D 6005              JZ      ?C0020
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 36  

011F E4                CLR     A
0120 FF                MOV     R7,A
0121 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 205
0124         ?C0020:
                                           ; SOURCE LINE # 208
0124 904007            MOV     DPTR,#04007H
0127 E0                MOVX    A,@DPTR
0128 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
012B F0                MOVX    @DPTR,A
012C A3                INC     DPTR
012D E4                CLR     A
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
012F 904006            MOV     DPTR,#04006H
0132 E0                MOVX    A,@DPTR
0133 FF                MOV     R7,A
0134 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0137 E0                MOVX    A,@DPTR
0138 F0                MOVX    @DPTR,A
0139 A3                INC     DPTR
013A E0                MOVX    A,@DPTR
013B 4F                ORL     A,R7
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
013D 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0140 E0                MOVX    A,@DPTR
0141 7002              JNZ     ?C0132
0143 A3                INC     DPTR
0144 E0                MOVX    A,@DPTR
0145         ?C0132:
0145 6006              JZ      ?C0021
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0147 E4                CLR     A
0148 FF                MOV     R7,A
0149 FE                MOV     R6,A
014A 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 213
014D         ?C0021:
                                           ; SOURCE LINE # 216
014D 904005            MOV     DPTR,#04005H
0150 E0                MOVX    A,@DPTR
0151 54F0              ANL     A,#0F0H
0153 FF                MOV     R7,A
0154 E4                CLR     A
0155 C4                SWAP    A
0156 F8                MOV     R0,A
0157 54F0              ANL     A,#0F0H
0159 C8                XCH     A,R0
015A 68                XRL     A,R0
015B EF                MOV     A,R7
015C C4                SWAP    A
015D 540F              ANL     A,#0FH
015F 48                ORL     A,R0
0160 04                INC     A
0161 FF                MOV     R7,A
0162 FB                MOV     R3,A
0163 E4                CLR     A
0164 FA                MOV     R2,A
0165 F9                MOV     R1,A
0166 F8                MOV     R0,A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 37  

0167 904200            MOV     DPTR,#04200H
016A E0                MOVX    A,@DPTR
016B 5407              ANL     A,#07H
016D 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0170 93                MOVC    A,@A+DPTR
0171 FF                MOV     R7,A
0172 E4                CLR     A
0173 FC                MOV     R4,A
0174 FD                MOV     R5,A
0175 FE                MOV     R6,A
0176 120000      E     LCALL   ?C?ULDIV
0179 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 219
017C 904210            MOV     DPTR,#04210H
017F E0                MOVX    A,@DPTR
0180 5401              ANL     A,#01H
0182 600B              JZ      ?C0022
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 222
0184 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0187 7401              MOV     A,#01H
0189 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
018A 120000      E     LCALL   CyXTAL_Stop
                                           ; SOURCE LINE # 224
018D 8005              SJMP    ?C0023
018F         ?C0022:
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 228
018F E4                CLR     A
0190 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
0194         ?C0023:
                                           ; SOURCE LINE # 237
0194 90400B            MOV     DPTR,#0400BH
0197 E0                MOVX    A,@DPTR
0198 5404              ANL     A,#04H
019A 6007              JZ      ?C0024
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
019C 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
019F 7401              MOV     A,#01H
01A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
01A2 22                RET     
01A3         ?C0024:
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
01A3 E4                CLR     A
01A4 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
01A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
01A8         ?C0026:
01A8 22                RET     
             ; FUNCTION CyPmSaveClocks (END)

             ; FUNCTION CyPmRestoreClocks (BEGIN)
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 38  

0000 900000      R     MOV     DPTR,#status
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0006 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
0009 E0                MOVX    A,@DPTR
000A 6401              XRL     A,#01H
000C 703F              JNZ     ?C0027
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 285
000E 904005            MOV     DPTR,#04005H
0011 E0                MOVX    A,@DPTR
0012 54F0              ANL     A,#0F0H
0014 FF                MOV     R7,A
0015 E4                CLR     A
0016 C4                SWAP    A
0017 F8                MOV     R0,A
0018 54F0              ANL     A,#0F0H
001A C8                XCH     A,R0
001B 68                XRL     A,R0
001C EF                MOV     A,R7
001D C4                SWAP    A
001E 540F              ANL     A,#0FH
0020 48                ORL     A,R0
0021 04                INC     A
0022 FF                MOV     R7,A
0023 FB                MOV     R3,A
0024 E4                CLR     A
0025 FA                MOV     R2,A
0026 F9                MOV     R1,A
0027 F8                MOV     R0,A
0028 904200            MOV     DPTR,#04200H
002B E0                MOVX    A,@DPTR
002C 5407              ANL     A,#07H
002E 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0031 93                MOVC    A,@A+DPTR
0032 FF                MOV     R7,A
0033 E4                CLR     A
0034 FC                MOV     R4,A
0035 FD                MOV     R5,A
0036 FE                MOV     R6,A
0037 120000      E     LCALL   ?C?ULDIV
003A E4                CLR     A
003B 7B4B              MOV     R3,#04BH
003D FA                MOV     R2,A
003E F9                MOV     R1,A
003F F8                MOV     R0,A
0040 120000      E     LCALL   ?C?LMUL
0043 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 287
0046 90400B            MOV     DPTR,#0400BH
0049 E0                MOVX    A,@DPTR
004A 4404              ORL     A,#04H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
004D         ?C0027:
                                           ; SOURCE LINE # 291
004D 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0050 E0                MOVX    A,@DPTR
0051 6401              XRL     A,#01H
0053 7077              JNZ     ?C0028
                                           ; SOURCE LINE # 292
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 39  

                                           ; SOURCE LINE # 301
0055 FF                MOV     R7,A
0056 120000      E     LCALL   _CyXTAL_Start
                                           ; SOURCE LINE # 304
0059 904210            MOV     DPTR,#04210H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
                                           ; SOURCE LINE # 307
005E 900000      R     MOV     DPTR,#i
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 7405              MOV     A,#05H
0066 F0                MOVX    @DPTR,A
0067         ?C0029:
0067 D3                SETB    C
0068 900000      R     MOV     DPTR,#i+01H
006B E0                MOVX    A,@DPTR
006C 9400              SUBB    A,#00H
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 9400              SUBB    A,#00H
0074 4056              JC      ?C0030
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 310
0076 904005            MOV     DPTR,#04005H
0079 E0                MOVX    A,@DPTR
007A 54F0              ANL     A,#0F0H
007C FF                MOV     R7,A
007D E4                CLR     A
007E C4                SWAP    A
007F F8                MOV     R0,A
0080 54F0              ANL     A,#0F0H
0082 C8                XCH     A,R0
0083 68                XRL     A,R0
0084 EF                MOV     A,R7
0085 C4                SWAP    A
0086 540F              ANL     A,#0FH
0088 48                ORL     A,R0
0089 04                INC     A
008A FF                MOV     R7,A
008B FB                MOV     R3,A
008C E4                CLR     A
008D FA                MOV     R2,A
008E F9                MOV     R1,A
008F F8                MOV     R0,A
0090 904200            MOV     DPTR,#04200H
0093 E0                MOVX    A,@DPTR
0094 5407              ANL     A,#07H
0096 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0099 93                MOVC    A,@A+DPTR
009A FF                MOV     R7,A
009B E4                CLR     A
009C FC                MOV     R4,A
009D FD                MOV     R5,A
009E FE                MOV     R6,A
009F 120000      E     LCALL   ?C?ULDIV
00A2 E4                CLR     A
00A3 7BC8              MOV     R3,#0C8H
00A5 FA                MOV     R2,A
00A6 F9                MOV     R1,A
00A7 F8                MOV     R0,A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 40  

00A8 120000      E     LCALL   ?C?LMUL
00AB 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 313
00AE 904210            MOV     DPTR,#04210H
00B1 E0                MOVX    A,@DPTR
00B2 5480              ANL     A,#080H
00B4 7006              JNZ     ?C0031
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
00B6 900000      R     MOV     DPTR,#status
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
00BA 8010              SJMP    ?C0030
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
00BC         ?C0031:
00BC 900000      R     MOV     DPTR,#i+01H
00BF E0                MOVX    A,@DPTR
00C0 24FF              ADD     A,#0FFH
00C2 F0                MOVX    @DPTR,A
00C3 900000      R     MOV     DPTR,#i
00C6 E0                MOVX    A,@DPTR
00C7 34FF              ADDC    A,#0FFH
00C9 F0                MOVX    @DPTR,A
00CA 809B              SJMP    ?C0029
00CC         ?C0030:
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
00CC         ?C0028:
                                           ; SOURCE LINE # 338
00CC 7F2D              MOV     R7,#02DH
00CE 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 341
00D1 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
00D6 6402              XRL     A,#02H
00D8 6004              JZ      ?C0035
00DA EF                MOV     A,R7
00DB B40317            CJNE    A,#03H,?C0034
00DE         ?C0035:
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 345
00DE 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 904004            MOV     DPTR,#04004H
00E6 E0                MOVX    A,@DPTR
00E7 6F                XRL     A,R7
00E8 6003              JZ      ?C0036
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 348
00EA 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 349
00ED         ?C0036:
                                           ; SOURCE LINE # 352
00ED 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 120000      E     LCALL   _CyMasterClk_SetSource
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 41  

                                           ; SOURCE LINE # 353
00F5         ?C0034:
                                           ; SOURCE LINE # 356
00F5 900000      R     MOV     DPTR,#cyPmClockBackup+04H
00F8 E0                MOVX    A,@DPTR
00F9 5440              ANL     A,#040H
00FB 6012              JZ      ?C0037
00FD 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0100 E0                MOVX    A,@DPTR
0101 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0104 93                MOVC    A,@A+DPTR
0105 B40307            CJNE    A,#03H,?C0037
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 360
0108 7F08              MOV     R7,#08H
010A 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 361
010D 8024              SJMP    ?C0038
010F         ?C0037:
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 365
010F 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0112 E0                MOVX    A,@DPTR
0113 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0116 93                MOVC    A,@A+DPTR
0117 FF                MOV     R7,A
0118 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 367
011B 900000      R     MOV     DPTR,#cyPmClockBackup+04H
011E E0                MOVX    A,@DPTR
011F 5440              ANL     A,#040H
0121 6009              JZ      ?C0039
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0123 904200            MOV     DPTR,#04200H
0126 E0                MOVX    A,@DPTR
0127 4440              ORL     A,#040H
0129 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
012A 8007              SJMP    ?C0038
012C         ?C0039:
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
012C 904200            MOV     DPTR,#04200H
012F E0                MOVX    A,@DPTR
0130 54BF              ANL     A,#0BFH
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
0133         ?C0038:
                                           ; SOURCE LINE # 379
0133 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0136 E0                MOVX    A,@DPTR
0137 B4010C            CJNE    A,#01H,?C0041
013A 9043A0            MOV     DPTR,#043A0H
013D E0                MOVX    A,@DPTR
013E 5410              ANL     A,#010H
0140 7004              JNZ     ?C0041
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 382
0142 FF                MOV     R7,A
0143 120000      E     LCALL   _CyIMO_Start
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 42  

                                           ; SOURCE LINE # 383
0146         ?C0041:
                                           ; SOURCE LINE # 386
0146 900000      R     MOV     DPTR,#cyPmClockBackup+07H
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 389
014E 900000      R     MOV     DPTR,#cyPmClockBackup+09H
0151 E0                MOVX    A,@DPTR
0152 B40103            CJNE    A,#01H,?C0042
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
0155 120000      E     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 392
0158         ?C0042:
                                           ; SOURCE LINE # 395
0158 904000            MOV     DPTR,#04000H
015B E0                MOVX    A,@DPTR
015C 5430              ANL     A,#030H
015E FF                MOV     R7,A
015F 900000      R     MOV     DPTR,#cyPmClockBackup+08H
0162 E0                MOVX    A,@DPTR
0163 FD                MOV     R5,A
0164 6F                XRL     A,R7
0165 7001              JNZ     ?C0133
0167 E4                CLR     A
0168         ?C0133:
0168 600A              JZ      ?C0043
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
016A 904000            MOV     DPTR,#04000H
016D E0                MOVX    A,@DPTR
016E 54CF              ANL     A,#0CFH
0170 FF                MOV     R7,A
0171 ED                MOV     A,R5
0172 4F                ORL     A,R7
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
0174         ?C0043:
                                           ; SOURCE LINE # 403
0174 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0177 E0                MOVX    A,@DPTR
0178 6401              XRL     A,#01H
017A 705A              JNZ     ?C0044
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 411
017C 900000      R     MOV     DPTR,#status
017F 7410              MOV     A,#010H
0181 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
0182 E4                CLR     A
0183 FF                MOV     R7,A
0184 120000      E     LCALL   _CyPLL_OUT_Start
                                           ; SOURCE LINE # 417
0187 7F50              MOV     R7,#050H
0189 7E00              MOV     R6,#00H
018B 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 418
018E 904225            MOV     DPTR,#04225H
0191 E0                MOVX    A,@DPTR
0192 FF                MOV     R7,A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 43  

                                           ; SOURCE LINE # 421
0193 900000      R     MOV     DPTR,#i
0196 E4                CLR     A
0197 F0                MOVX    @DPTR,A
0198 A3                INC     DPTR
0199 74AB              MOV     A,#0ABH
019B F0                MOVX    @DPTR,A
019C         ?C0045:
019C D3                SETB    C
019D 900000      R     MOV     DPTR,#i+01H
01A0 E0                MOVX    A,@DPTR
01A1 9400              SUBB    A,#00H
01A3 900000      R     MOV     DPTR,#i
01A6 E0                MOVX    A,@DPTR
01A7 9400              SUBB    A,#00H
01A9 402B              JC      ?C0046
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
01AB 7F01              MOV     R7,#01H
01AD 7E00              MOV     R6,#00H
01AF 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 427
01B2 904225            MOV     DPTR,#04225H
01B5 E0                MOVX    A,@DPTR
01B6 5401              ANL     A,#01H
01B8 600C              JZ      ?C0047
01BA E0                MOVX    A,@DPTR
01BB 5401              ANL     A,#01H
01BD 6007              JZ      ?C0047
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
01BF E4                CLR     A
01C0 900000      R     MOV     DPTR,#status
01C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
01C4 8010              SJMP    ?C0046
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
01C6         ?C0047:
01C6 900000      R     MOV     DPTR,#i+01H
01C9 E0                MOVX    A,@DPTR
01CA 24FF              ADD     A,#0FFH
01CC F0                MOVX    @DPTR,A
01CD 900000      R     MOV     DPTR,#i
01D0 E0                MOVX    A,@DPTR
01D1 34FF              ADDC    A,#0FFH
01D3 F0                MOVX    @DPTR,A
01D4 80C6              SJMP    ?C0045
01D6         ?C0046:
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
01D6         ?C0044:
                                           ; SOURCE LINE # 451
01D6 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01D9 E0                MOVX    A,@DPTR
01DA FF                MOV     R7,A
01DB 6003              JZ      ?C0051
01DD B40117            CJNE    A,#01H,?C0050
01E0         ?C0051:
                                           ; SOURCE LINE # 453
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 44  

                                           ; SOURCE LINE # 455
01E0 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
01E3 E0                MOVX    A,@DPTR
01E4 FF                MOV     R7,A
01E5 904004            MOV     DPTR,#04004H
01E8 E0                MOVX    A,@DPTR
01E9 6F                XRL     A,R7
01EA 6003              JZ      ?C0052
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
01EC 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 458
01EF         ?C0052:
                                           ; SOURCE LINE # 461
01EF 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01F2 E0                MOVX    A,@DPTR
01F3 FF                MOV     R7,A
01F4 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 462
01F7         ?C0050:
                                           ; SOURCE LINE # 466
01F7 900000      R     MOV     DPTR,#cyPmClockBackup+06H
01FA E0                MOVX    A,@DPTR
01FB 700B              JNZ     ?C0053
01FD 9043A0            MOV     DPTR,#043A0H
0200 E0                MOVX    A,@DPTR
0201 5410              ANL     A,#010H
0203 6003              JZ      ?C0053
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
0205 120000      E     LCALL   CyIMO_Stop
                                           ; SOURCE LINE # 469
0208         ?C0053:
                                           ; SOURCE LINE # 472
0208 904007            MOV     DPTR,#04007H
020B E0                MOVX    A,@DPTR
020C 7F00              MOV     R7,#00H
020E FE                MOV     R6,A
;---- Variable 'clkBusDivTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 473
020F 904006            MOV     DPTR,#04006H
0212 E0                MOVX    A,@DPTR
0213 FD                MOV     R5,A
0214 EE                MOV     A,R6
0215 ED                MOV     A,R5
0216 FF                MOV     R7,A
                                           ; SOURCE LINE # 474
0217 AC06              MOV     R4,AR6
0219 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
021C E0                MOVX    A,@DPTR
021D FE                MOV     R6,A
021E A3                INC     DPTR
021F E0                MOVX    A,@DPTR
0220 FF                MOV     R7,A
0221 6D                XRL     A,R5
0222 7002              JNZ     ?C0134
0224 EE                MOV     A,R6
0225 6C                XRL     A,R4
0226         ?C0134:
0226 6003              JZ      ?C0054
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 45  

0228 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 477
022B         ?C0054:
                                           ; SOURCE LINE # 480
022B 904800            MOV     DPTR,#04800H
022E E0                MOVX    A,@DPTR
022F 543F              ANL     A,#03FH
0231 FF                MOV     R7,A
0232 900000      R     MOV     DPTR,#cyPmClockBackup+05H
0235 E0                MOVX    A,@DPTR
0236 4F                ORL     A,R7
0237 904800            MOV     DPTR,#04800H
023A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
023B 900000      R     MOV     DPTR,#cyPmClockBackup
023E E0                MOVX    A,@DPTR
023F 9043A1            MOV     DPTR,#043A1H
0242 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
0243 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0246 E0                MOVX    A,@DPTR
0247 9043A2            MOV     DPTR,#043A2H
024A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
024B 22                RET     
             ; FUNCTION CyPmRestoreClocks (END)

             ; FUNCTION _CyPmAltAct (BEGIN)
                                           ; SOURCE LINE # 625
0000 900000      R     MOV     DPTR,#wakeupSource
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#wakeupTime
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 643
0010 C3                CLR     C
0011 940F              SUBB    A,#0FH
0013 EE                MOV     A,R6
0014 9400              SUBB    A,#00H
0016 4021              JC      ?C0056
0018 900000      R     MOV     DPTR,#wakeupTime
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 D3                SETB    C
0021 940E              SUBB    A,#0EH
0023 EE                MOV     A,R6
0024 9401              SUBB    A,#01H
0026 5011              JNC     ?C0056
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
0028 EF                MOV     A,R7
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 46  

0029 24F2              ADD     A,#0F2H
002B FF                MOV     R7,A
002C 120000      R     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 648
002F 900000      R     MOV     DPTR,#wakeupSource
0032 E0                MOVX    A,@DPTR
0033 4404              ORL     A,#04H
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 649
0039         ?C0056:
                                           ; SOURCE LINE # 652
0039 900000      R     MOV     DPTR,#wakeupTime
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 C3                CLR     C
0042 9402              SUBB    A,#02H
0044 EE                MOV     A,R6
0045 9400              SUBB    A,#00H
0047 4019              JC      ?C0057
0049 D3                SETB    C
004A EF                MOV     A,R7
004B 940D              SUBB    A,#0DH
004D EE                MOV     A,R6
004E 9400              SUBB    A,#00H
0050 5010              JNC     ?C0057
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 655
0052 EF                MOV     A,R7
0053 14                DEC     A
0054 FF                MOV     R7,A
0055 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 658
0058 900000      R     MOV     DPTR,#wakeupSource
005B E0                MOVX    A,@DPTR
005C 4408              ORL     A,#08H
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
0062         ?C0057:
                                           ; SOURCE LINE # 662
0062 900000      R     MOV     DPTR,#wakeupTime
0065 E0                MOVX    A,@DPTR
0066 7004              JNZ     ?C0135
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A 6401              XRL     A,#01H
006C         ?C0135:
006C 700D              JNZ     ?C0058
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 665
006E 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 668
0071 900000      R     MOV     DPTR,#wakeupSource
0074 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 47  

0075 4408              ORL     A,#08H
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
007B         ?C0058:
                                           ; SOURCE LINE # 677
007B 904398            MOV     DPTR,#04398H
007E E0                MOVX    A,@DPTR
007F 900000      R     MOV     DPTR,#cyPmBackup+07H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0083 900000      R     MOV     DPTR,#wakeupSource
0086 E0                MOVX    A,@DPTR
0087 FC                MOV     R4,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A FD                MOV     R5,A
008B EC                MOV     A,R4
008C C4                SWAP    A
008D F8                MOV     R0,A
008E 54F0              ANL     A,#0F0H
0090 C8                XCH     A,R0
0091 68                XRL     A,R0
0092 ED                MOV     A,R5
0093 C4                SWAP    A
0094 540F              ANL     A,#0FH
0096 48                ORL     A,R0
0097 904398            MOV     DPTR,#04398H
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
009B A3                INC     DPTR
009C E0                MOVX    A,@DPTR
009D 900000      R     MOV     DPTR,#cyPmBackup+08H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
00A1 ED                MOV     A,R5
00A2 540F              ANL     A,#0FH
00A4 904399            MOV     DPTR,#04399H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 685
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA 900000      R     MOV     DPTR,#cyPmBackup+09H
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
00AE 900000      R     MOV     DPTR,#wakeupSource
00B1 E0                MOVX    A,@DPTR
00B2 C4                SWAP    A
00B3 5401              ANL     A,#01H
00B5 90439A            MOV     DPTR,#0439AH
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 690
00B9 904393            MOV     DPTR,#04393H
00BC E0                MOVX    A,@DPTR
00BD 54F8              ANL     A,#0F8H
00BF 4401              ORL     A,#01H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 48  

                                           ; SOURCE LINE # 696
00C4 00                NOP     
                                           ; SOURCE LINE # 697
00C5 00                NOP     
                                           ; SOURCE LINE # 700
00C6 00                NOP     
                                           ; SOURCE LINE # 705
00C7 900000      R     MOV     DPTR,#cyPmBackup+07H
00CA E0                MOVX    A,@DPTR
00CB 904398            MOV     DPTR,#04398H
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
00CF 900000      R     MOV     DPTR,#cyPmBackup+08H
00D2 E0                MOVX    A,@DPTR
00D3 904399            MOV     DPTR,#04399H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 707
00D7 900000      R     MOV     DPTR,#cyPmBackup+09H
00DA E0                MOVX    A,@DPTR
00DB 90439A            MOV     DPTR,#0439AH
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 708
00DF 22                RET     
             ; FUNCTION _CyPmAltAct (END)

             ; FUNCTION _CyPmSleep (BEGIN)
                                           ; SOURCE LINE # 824
0000 900000      R     MOV     DPTR,#wakeupTime
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 829
000B 120000      E     LCALL   CyEnterCriticalSection
000E 900000      R     MOV     DPTR,#interruptState
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 838
0013 904393            MOV     DPTR,#04393H
0016 E0                MOVX    A,@DPTR
0017 5408              ANL     A,#08H
0019 7009              JNZ     ?C0060
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 841
001B 904683            MOV     DPTR,#04683H
001E E0                MOVX    A,@DPTR
001F 541F              ANL     A,#01FH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 842
0022 8009              SJMP    ?C0061
0024         ?C0060:
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 848
0024 900000      R     MOV     DPTR,#interruptState
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 120000      E     LCALL   _CyExitCriticalSection
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 49  

002C 22                RET     
                                           ; SOURCE LINE # 851
002D         ?C0061:
                                           ; SOURCE LINE # 868
002D 9046EC            MOV     DPTR,#046ECH
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 872
0032         ?C0063:
                                           ; SOURCE LINE # 875
0032 9046F5            MOV     DPTR,#046F5H
0035 E0                MOVX    A,@DPTR
0036 5407              ANL     A,#07H
0038 6024              JZ      ?C0064
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 878
003A 9046EC            MOV     DPTR,#046ECH
003D E0                MOVX    A,@DPTR
003E C3                CLR     C
003F 9405              SUBB    A,#05H
0041 401B              JC      ?C0064
                                           ; SOURCE LINE # 879
                                           ; SOURCE LINE # 882
0043         ?C0065:
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
0043 904689            MOV     DPTR,#04689H
0046 E0                MOVX    A,@DPTR
0047 5401              ANL     A,#01H
0049 700D              JNZ     ?C0067
                                           ; SOURCE LINE # 886
                                           ; SOURCE LINE # 887
004B 900000      R     MOV     DPTR,#cyPmBackup+06H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 888
004F 904689            MOV     DPTR,#04689H
0052 E0                MOVX    A,@DPTR
0053 4401              ORL     A,#01H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 889
0056 8006              SJMP    ?C0064
0058         ?C0067:
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
0058 900000      R     MOV     DPTR,#cyPmBackup+06H
005B 7401              MOV     A,#01H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 895
005E         ?C0064:
                                           ; SOURCE LINE # 920
005E 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 926
0061 900000      R     MOV     DPTR,#wakeupTime
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 C3                CLR     C
0067 9402              SUBB    A,#02H
0069 4016              JC      ?C0069
006B EF                MOV     A,R7
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 50  

006C D3                SETB    C
006D 940D              SUBB    A,#0DH
006F 5010              JNC     ?C0069
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 929
0071 EF                MOV     A,R7
0072 14                DEC     A
0073 FF                MOV     R7,A
0074 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 932
0077 900000      R     MOV     DPTR,#wakeupSource
007A E0                MOVX    A,@DPTR
007B 4408              ORL     A,#08H
007D F0                MOVX    @DPTR,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 933
0081         ?C0069:
                                           ; SOURCE LINE # 936
0081 900000      R     MOV     DPTR,#wakeupTime
0084 E0                MOVX    A,@DPTR
0085 B4010D            CJNE    A,#01H,?C0070
                                           ; SOURCE LINE # 937
                                           ; SOURCE LINE # 939
0088 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 942
008B 900000      R     MOV     DPTR,#wakeupSource
008E E0                MOVX    A,@DPTR
008F 4408              ORL     A,#08H
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 E0                MOVX    A,@DPTR
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 943
0095         ?C0070:
                                           ; SOURCE LINE # 951
0095 904398            MOV     DPTR,#04398H
0098 E0                MOVX    A,@DPTR
0099 900000      R     MOV     DPTR,#cyPmBackup+07H
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
009D 900000      R     MOV     DPTR,#wakeupSource
00A0 E0                MOVX    A,@DPTR
00A1 FC                MOV     R4,A
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 FD                MOV     R5,A
00A5 EC                MOV     A,R4
00A6 C4                SWAP    A
00A7 F8                MOV     R0,A
00A8 54F0              ANL     A,#0F0H
00AA C8                XCH     A,R0
00AB 68                XRL     A,R0
00AC ED                MOV     A,R5
00AD C4                SWAP    A
00AE 540F              ANL     A,#0FH
00B0 48                ORL     A,R0
00B1 904398            MOV     DPTR,#04398H
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 955
00B5 A3                INC     DPTR
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 51  

00B6 E0                MOVX    A,@DPTR
00B7 900000      R     MOV     DPTR,#cyPmBackup+08H
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
00BB ED                MOV     A,R5
00BC 540F              ANL     A,#0FH
00BE 904399            MOV     DPTR,#04399H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 959
00C2 A3                INC     DPTR
00C3 E0                MOVX    A,@DPTR
00C4 900000      R     MOV     DPTR,#cyPmBackup+09H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 960
00C8 900000      R     MOV     DPTR,#wakeupSource
00CB E0                MOVX    A,@DPTR
00CC C4                SWAP    A
00CD 5401              ANL     A,#01H
00CF 90439A            MOV     DPTR,#0439AH
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
00D3 904200            MOV     DPTR,#04200H
00D6 E0                MOVX    A,@DPTR
00D7 5407              ANL     A,#07H
00D9 7007              JNZ     ?C0071
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 979
00DB 900000      R     MOV     DPTR,#cyPmBackup+030H
00DE 04                INC     A
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 980
00E0 8016              SJMP    ?C0072
00E2         ?C0071:
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 984
00E2 E4                CLR     A
00E3 900000      R     MOV     DPTR,#cyPmBackup+030H
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 987
00E7 904200            MOV     DPTR,#04200H
00EA E0                MOVX    A,@DPTR
00EB 5407              ANL     A,#07H
00ED 900000      R     MOV     DPTR,#cyPmBackup+02FH
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 990
00F1 904200            MOV     DPTR,#04200H
00F4 E0                MOVX    A,@DPTR
00F5 54F8              ANL     A,#0F8H
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 991
00F8         ?C0072:
                                           ; SOURCE LINE # 994
00F8 904393            MOV     DPTR,#04393H
00FB E0                MOVX    A,@DPTR
00FC 54F8              ANL     A,#0F8H
00FE 4403              ORL     A,#03H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
0101 E0                MOVX    A,@DPTR
0102 FF                MOV     R7,A
                                           ; SOURCE LINE # 1000
0103 00                NOP     
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 52  

                                           ; SOURCE LINE # 1001
0104 00                NOP     
                                           ; SOURCE LINE # 1004
0105 00                NOP     
                                           ; SOURCE LINE # 1009
0106 900000      R     MOV     DPTR,#cyPmBackup+030H
0109 E0                MOVX    A,@DPTR
010A 6401              XRL     A,#01H
010C 6010              JZ      ?C0073
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1011
010E 904200            MOV     DPTR,#04200H
0111 E0                MOVX    A,@DPTR
0112 54F8              ANL     A,#0F8H
0114 FF                MOV     R7,A
0115 900000      R     MOV     DPTR,#cyPmBackup+02FH
0118 E0                MOVX    A,@DPTR
0119 4F                ORL     A,R7
011A 904200            MOV     DPTR,#04200H
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1013
011E         ?C0073:
                                           ; SOURCE LINE # 1029
011E 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1035
0121 9046F5            MOV     DPTR,#046F5H
0124 E0                MOVX    A,@DPTR
0125 5407              ANL     A,#07H
0127 6016              JZ      ?C0074
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
0129 9046EC            MOV     DPTR,#046ECH
012C E0                MOVX    A,@DPTR
012D C3                CLR     C
012E 9405              SUBB    A,#05H
0130 400D              JC      ?C0074
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
0132 900000      R     MOV     DPTR,#cyPmBackup+06H
0135 E0                MOVX    A,@DPTR
0136 7007              JNZ     ?C0074
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
0138 904689            MOV     DPTR,#04689H
013B E0                MOVX    A,@DPTR
013C 54FE              ANL     A,#0FEH
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1045
013F         ?C0074:
                                           ; SOURCE LINE # 1051
013F 900000      R     MOV     DPTR,#cyPmBackup+07H
0142 E0                MOVX    A,@DPTR
0143 904398            MOV     DPTR,#04398H
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1052
0147 900000      R     MOV     DPTR,#cyPmBackup+08H
014A E0                MOVX    A,@DPTR
014B 904399            MOV     DPTR,#04399H
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1053
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 53  

014F 900000      R     MOV     DPTR,#cyPmBackup+09H
0152 E0                MOVX    A,@DPTR
0153 90439A            MOV     DPTR,#0439AH
0156 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1056
0157 900000      R     MOV     DPTR,#interruptState
015A E0                MOVX    A,@DPTR
015B FF                MOV     R7,A
015C 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1057
015F         ?C0062:
015F 22                RET     
             ; FUNCTION _CyPmSleep (END)

             ; FUNCTION CyPmHibernate (BEGIN)
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
0000 7F40              MOV     R7,#040H
0002 7E00              MOV     R6,#00H
0004 120000      R     LCALL   _CyPmHibernateEx
                                           ; SOURCE LINE # 1098
0007 22                RET     
             ; FUNCTION CyPmHibernate (END)

             ; FUNCTION _CyPmHibernateEx (BEGIN)
                                           ; SOURCE LINE # 1156
0000 900000      R     MOV     DPTR,#wakeupSource
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1161
0008 120000      E     LCALL   CyEnterCriticalSection
000B 900000      R     MOV     DPTR,#interruptState
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1169
0010 904393            MOV     DPTR,#04393H
0013 E0                MOVX    A,@DPTR
0014 5408              ANL     A,#08H
0016 7009              JNZ     ?C0078
                                           ; SOURCE LINE # 1170
                                           ; SOURCE LINE # 1172
0018 904683            MOV     DPTR,#04683H
001B E0                MOVX    A,@DPTR
001C 541F              ANL     A,#01FH
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1173
001F 8009              SJMP    ?C0079
0021         ?C0078:
                                           ; SOURCE LINE # 1175
                                           ; SOURCE LINE # 1179
0021 900000      R     MOV     DPTR,#interruptState
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 120000      E     LCALL   _CyExitCriticalSection
0029 22                RET     
                                           ; SOURCE LINE # 1182
002A         ?C0079:
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 54  

                                           ; SOURCE LINE # 1184
002A 120000      R     LCALL   CyPmHibSaveSet
                                           ; SOURCE LINE # 1190
002D 904398            MOV     DPTR,#04398H
0030 E0                MOVX    A,@DPTR
0031 900000      R     MOV     DPTR,#cyPmBackup+07H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1191
0035 900000      R     MOV     DPTR,#wakeupSource
0038 E0                MOVX    A,@DPTR
0039 FC                MOV     R4,A
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C FD                MOV     R5,A
003D EC                MOV     A,R4
003E C4                SWAP    A
003F F8                MOV     R0,A
0040 54F0              ANL     A,#0F0H
0042 C8                XCH     A,R0
0043 68                XRL     A,R0
0044 ED                MOV     A,R5
0045 C4                SWAP    A
0046 540F              ANL     A,#0FH
0048 48                ORL     A,R0
0049 5404              ANL     A,#04H
004B 904398            MOV     DPTR,#04398H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1194
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 900000      R     MOV     DPTR,#cyPmBackup+08H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1195
0055 ED                MOV     A,R5
0056 540F              ANL     A,#0FH
0058 904399            MOV     DPTR,#04399H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E 900000      R     MOV     DPTR,#cyPmBackup+09H
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
0062 90439A            MOV     DPTR,#0439AH
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1202
0067 904200            MOV     DPTR,#04200H
006A E0                MOVX    A,@DPTR
006B 5407              ANL     A,#07H
006D 7007              JNZ     ?C0081
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1205
006F 900000      R     MOV     DPTR,#cyPmBackup+030H
0072 04                INC     A
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1206
0074 8016              SJMP    ?C0082
0076         ?C0081:
                                           ; SOURCE LINE # 1208
                                           ; SOURCE LINE # 1210
0076 E4                CLR     A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 55  

0077 900000      R     MOV     DPTR,#cyPmBackup+030H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1213
007B 904200            MOV     DPTR,#04200H
007E E0                MOVX    A,@DPTR
007F 5407              ANL     A,#07H
0081 900000      R     MOV     DPTR,#cyPmBackup+02FH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1216
0085 904200            MOV     DPTR,#04200H
0088 E0                MOVX    A,@DPTR
0089 54F8              ANL     A,#0F8H
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1217
008C         ?C0082:
                                           ; SOURCE LINE # 1221
008C 904393            MOV     DPTR,#04393H
008F E0                MOVX    A,@DPTR
0090 54F8              ANL     A,#0F8H
0092 4404              ORL     A,#04H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1224
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
                                           ; SOURCE LINE # 1227
0097 00                NOP     
                                           ; SOURCE LINE # 1228
0098 00                NOP     
                                           ; SOURCE LINE # 1231
0099 00                NOP     
                                           ; SOURCE LINE # 1238
009A 900000      R     MOV     DPTR,#cyPmBackup+030H
009D E0                MOVX    A,@DPTR
009E 6401              XRL     A,#01H
00A0 6010              JZ      ?C0083
                                           ; SOURCE LINE # 1239
                                           ; SOURCE LINE # 1240
00A2 904200            MOV     DPTR,#04200H
00A5 E0                MOVX    A,@DPTR
00A6 54F8              ANL     A,#0F8H
00A8 FF                MOV     R7,A
00A9 900000      R     MOV     DPTR,#cyPmBackup+02FH
00AC E0                MOVX    A,@DPTR
00AD 4F                ORL     A,R7
00AE 904200            MOV     DPTR,#04200H
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1242
00B2         ?C0083:
                                           ; SOURCE LINE # 1246
00B2 120000      R     LCALL   CyPmHibRestore
                                           ; SOURCE LINE # 1249
00B5 900000      R     MOV     DPTR,#cyPmBackup+07H
00B8 E0                MOVX    A,@DPTR
00B9 904398            MOV     DPTR,#04398H
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1250
00BD 900000      R     MOV     DPTR,#cyPmBackup+08H
00C0 E0                MOVX    A,@DPTR
00C1 904399            MOV     DPTR,#04399H
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1251
00C5 900000      R     MOV     DPTR,#cyPmBackup+09H
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 56  

00C8 E0                MOVX    A,@DPTR
00C9 90439A            MOV     DPTR,#0439AH
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1254
00CD 900000      R     MOV     DPTR,#interruptState
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1255
00D5         ?C0080:
00D5 22                RET     
             ; FUNCTION _CyPmHibernateEx (END)

             ; FUNCTION _CyPmReadStatus (BEGIN)
                                           ; SOURCE LINE # 1285
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1292
0005 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R5' ----
0008 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 1295
000A 900000      R     MOV     DPTR,#interruptStatus
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 904390            MOV     DPTR,#04390H
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 EF                MOV     A,R7
0015 4E                ORL     A,R6
0016 900000      R     MOV     DPTR,#interruptStatus
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1296
001A E0                MOVX    A,@DPTR
001B FC                MOV     R4,A
001C 5407              ANL     A,#07H
001E 900000      R     MOV     DPTR,#tmpStatus
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1297
0022 900000      R     MOV     DPTR,#mask
0025 E0                MOVX    A,@DPTR
0026 F4                CPL     A
0027 FF                MOV     R7,A
0028 EC                MOV     A,R4
0029 5F                ANL     A,R7
002A 900000      R     MOV     DPTR,#interruptStatus
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1300
002E AF05              MOV     R7,AR5
0030 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1302
0033 900000      R     MOV     DPTR,#tmpStatus
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
                                           ; SOURCE LINE # 1303
0038         ?C0084:
0038 22                RET     
             ; FUNCTION _CyPmReadStatus (END)

             ; FUNCTION CyPmHibSaveSet (BEGIN)
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 57  

                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1325
0000 904331            MOV     DPTR,#04331H
0003 E0                MOVX    A,@DPTR
0004 5404              ANL     A,#04H
0006 6004              JZ      ?C0085
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1339
0008 E0                MOVX    A,@DPTR
0009 54FB              ANL     A,#0FBH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1340
000C         ?C0085:
                                           ; SOURCE LINE # 1344
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _CyILO_SetPowerMode
0011 900000      R     MOV     DPTR,#cyPmBackup
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1347
0016 904300            MOV     DPTR,#04300H
0019 E0                MOVX    A,@DPTR
001A 5402              ANL     A,#02H
001C 7003              JNZ     ?C0086
001E FF                MOV     R7,A
001F 8002              SJMP    ?C0087
0021         ?C0086:
0021 7F01              MOV     R7,#01H
0023         ?C0087:
0023 900000      R     MOV     DPTR,#cyPmBackup+01H
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
0028 904300            MOV     DPTR,#04300H
002B E0                MOVX    A,@DPTR
002C 5404              ANL     A,#04H
002E 7003              JNZ     ?C0088
0030 FF                MOV     R7,A
0031 8002              SJMP    ?C0089
0033         ?C0088:
0033 7F01              MOV     R7,#01H
0035         ?C0089:
0035 900000      R     MOV     DPTR,#cyPmBackup+02H
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1356
003A 904683            MOV     DPTR,#04683H
003D E0                MOVX    A,@DPTR
003E 5410              ANL     A,#010H
0040 700D              JNZ     ?C0090
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1359
0042 900000      R     MOV     DPTR,#cyPmBackup+03H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1360
0046 904683            MOV     DPTR,#04683H
0049 E0                MOVX    A,@DPTR
004A 4410              ORL     A,#010H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1361
004D 8006              SJMP    ?C0091
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 58  

004F         ?C0090:
                                           ; SOURCE LINE # 1363
                                           ; SOURCE LINE # 1364
004F 900000      R     MOV     DPTR,#cyPmBackup+03H
0052 7401              MOV     A,#01H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1365
0055         ?C0091:
                                           ; SOURCE LINE # 1375
0055 120000      R     LCALL   CyPmHviLviSaveDisable
                                           ; SOURCE LINE # 1379
0058 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 1385
005B 904685            MOV     DPTR,#04685H
005E E0                MOVX    A,@DPTR
005F 900000      R     MOV     DPTR,#cyPmBackup+0AH
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1386
0063 904686            MOV     DPTR,#04686H
0066 E0                MOVX    A,@DPTR
0067 900000      R     MOV     DPTR,#cyPmBackup+0BH
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1388
006B 904685            MOV     DPTR,#04685H
006E 74FF              MOV     A,#0FFH
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1389
0071 A3                INC     DPTR
0072 7490              MOV     A,#090H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1390
0075 22                RET     
             ; FUNCTION CyPmHibSaveSet (END)

             ; FUNCTION CyPmHibRestore (BEGIN)
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1408
0000 120000      R     LCALL   CyPmHviLviRestore
                                           ; SOURCE LINE # 1411
0003 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1414
0006 900000      R     MOV     DPTR,#cyPmBackup+01H
0009 E0                MOVX    A,@DPTR
000A B40103            CJNE    A,#01H,?C0093
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1417
000D 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1418
0010         ?C0093:
                                           ; SOURCE LINE # 1421
0010 900000      R     MOV     DPTR,#cyPmBackup+02H
0013 E0                MOVX    A,@DPTR
0014 B40103            CJNE    A,#01H,?C0094
                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1424
0017 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1425
001A         ?C0094:
                                           ; SOURCE LINE # 1428
001A 900000      R     MOV     DPTR,#cyPmBackup
001D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 59  

001E FF                MOV     R7,A
001F 120000      E     LCALL   _CyILO_SetPowerMode
                                           ; SOURCE LINE # 1431
0022 900000      R     MOV     DPTR,#cyPmBackup+03H
0025 E0                MOVX    A,@DPTR
0026 7007              JNZ     ?C0095
                                           ; SOURCE LINE # 1432
                                           ; SOURCE LINE # 1434
0028 904683            MOV     DPTR,#04683H
002B E0                MOVX    A,@DPTR
002C 54EF              ANL     A,#0EFH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1435
002F         ?C0095:
                                           ; SOURCE LINE # 1441
002F 900000      R     MOV     DPTR,#cyPmBackup+0AH
0032 E0                MOVX    A,@DPTR
0033 904685            MOV     DPTR,#04685H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1442
0037 900000      R     MOV     DPTR,#cyPmBackup+0BH
003A E0                MOVX    A,@DPTR
003B 904686            MOV     DPTR,#04686H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1443
003F 22                RET     
             ; FUNCTION CyPmHibRestore (END)

             ; FUNCTION _CyPmCtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1461
0000 900000      R     MOV     DPTR,#ctwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1464
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54F7              ANL     A,#0F7H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1467
000C 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1470
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5404              ANL     A,#04H
0015 601C              JZ      ?C0097
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1473
0017 900000      R     MOV     DPTR,#ctwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 904381            MOV     DPTR,#04381H
001F E0                MOVX    A,@DPTR
0020 6F                XRL     A,R7
0021 6025              JZ      ?C0101
                                           ; SOURCE LINE # 1474
                                           ; SOURCE LINE # 1476
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 54FB              ANL     A,#0FBH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1477
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 60  

0028 904381            MOV     DPTR,#04381H
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1478
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F 4404              ORL     A,#04H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1479
                                           ; SOURCE LINE # 1480
0032 22                RET     
0033         ?C0097:
                                           ; SOURCE LINE # 1482
                                           ; SOURCE LINE # 1484
0033 900000      R     MOV     DPTR,#ctwInterval
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 904381            MOV     DPTR,#04381H
003B E0                MOVX    A,@DPTR
003C 6F                XRL     A,R7
003D 6002              JZ      ?C0100
                                           ; SOURCE LINE # 1485
                                           ; SOURCE LINE # 1487
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1488
0041         ?C0100:
                                           ; SOURCE LINE # 1491
0041 904382            MOV     DPTR,#04382H
0044 E0                MOVX    A,@DPTR
0045 4404              ORL     A,#04H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1493
0048         ?C0101:
0048 22                RET     
             ; FUNCTION _CyPmCtwSetInterval (END)

             ; FUNCTION CyPmOppsSet (BEGIN)
                                           ; SOURCE LINE # 1506
                                           ; SOURCE LINE # 1507
                                           ; SOURCE LINE # 1509
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 7003              JNZ     ?C0102
                                           ; SOURCE LINE # 1510
                                           ; SOURCE LINE # 1512
0008 120000      E     LCALL   CyXTAL_32KHZ_Start
                                           ; SOURCE LINE # 1513
000B         ?C0102:
                                           ; SOURCE LINE # 1516
000B 904382            MOV     DPTR,#04382H
000E E0                MOVX    A,@DPTR
000F 54DF              ANL     A,#0DFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1519
0012 E0                MOVX    A,@DPTR
0013 4410              ORL     A,#010H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1520
0016 22                RET     
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 61  

             ; FUNCTION CyPmOppsSet (END)

             ; FUNCTION _CyPmFtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1538
0000 900000      R     MOV     DPTR,#ftwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1539
                                           ; SOURCE LINE # 1541
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54FD              ANL     A,#0FDH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
000C 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1547
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5401              ANL     A,#01H
0015 6020              JZ      ?C0104
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1550
0017 900000      R     MOV     DPTR,#ftwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 904380            MOV     DPTR,#04380H
001F E0                MOVX    A,@DPTR
0020 6F                XRL     A,R7
0021 6029              JZ      ?C0108
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1553
0023 904382            MOV     DPTR,#04382H
0026 E0                MOVX    A,@DPTR
0027 54FE              ANL     A,#0FEH
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1554
002A 904380            MOV     DPTR,#04380H
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1555
002F 904382            MOV     DPTR,#04382H
0032 E0                MOVX    A,@DPTR
0033 4401              ORL     A,#01H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
0036 22                RET     
0037         ?C0104:
                                           ; SOURCE LINE # 1559
                                           ; SOURCE LINE # 1561
0037 900000      R     MOV     DPTR,#ftwInterval
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 904380            MOV     DPTR,#04380H
003F E0                MOVX    A,@DPTR
0040 6F                XRL     A,R7
0041 6002              JZ      ?C0107
                                           ; SOURCE LINE # 1562
                                           ; SOURCE LINE # 1564
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1565
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 62  

0045         ?C0107:
                                           ; SOURCE LINE # 1568
0045 904382            MOV     DPTR,#04382H
0048 E0                MOVX    A,@DPTR
0049 4401              ORL     A,#01H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1570
004C         ?C0108:
004C 22                RET     
             ; FUNCTION _CyPmFtwSetInterval (END)

             ; FUNCTION CyPmHibSlpSaveSet (BEGIN)
                                           ; SOURCE LINE # 1588
                                           ; SOURCE LINE # 1589
                                           ; SOURCE LINE # 1591
0000 905A00            MOV     DPTR,#05A00H
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#cyPmBackup+0CH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1592
0008 905A02            MOV     DPTR,#05A02H
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#cyPmBackup+0DH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1593
0010 905A03            MOV     DPTR,#05A03H
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#cyPmBackup+0EH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1594
0018 905A04            MOV     DPTR,#05A04H
001B E0                MOVX    A,@DPTR
001C 900000      R     MOV     DPTR,#cyPmBackup+0FH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1595
0020 905A06            MOV     DPTR,#05A06H
0023 E0                MOVX    A,@DPTR
0024 900000      R     MOV     DPTR,#cyPmBackup+010H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1596
0028 905A08            MOV     DPTR,#05A08H
002B E0                MOVX    A,@DPTR
002C 900000      R     MOV     DPTR,#cyPmBackup+011H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1597
0030 905A0A            MOV     DPTR,#05A0AH
0033 E0                MOVX    A,@DPTR
0034 900000      R     MOV     DPTR,#cyPmBackup+012H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1599
0038 905A10            MOV     DPTR,#05A10H
003B E0                MOVX    A,@DPTR
003C 900000      R     MOV     DPTR,#cyPmBackup+013H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1600
0040 905A12            MOV     DPTR,#05A12H
0043 E0                MOVX    A,@DPTR
0044 900000      R     MOV     DPTR,#cyPmBackup+014H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1601
0048 905A13            MOV     DPTR,#05A13H
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 63  

004B E0                MOVX    A,@DPTR
004C 900000      R     MOV     DPTR,#cyPmBackup+015H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1602
0050 905A14            MOV     DPTR,#05A14H
0053 E0                MOVX    A,@DPTR
0054 900000      R     MOV     DPTR,#cyPmBackup+016H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1603
0058 905A16            MOV     DPTR,#05A16H
005B E0                MOVX    A,@DPTR
005C 900000      R     MOV     DPTR,#cyPmBackup+017H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1604
0060 905A18            MOV     DPTR,#05A18H
0063 E0                MOVX    A,@DPTR
0064 900000      R     MOV     DPTR,#cyPmBackup+018H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1605
0068 905A1A            MOV     DPTR,#05A1AH
006B E0                MOVX    A,@DPTR
006C 900000      R     MOV     DPTR,#cyPmBackup+019H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1607
0070 905A20            MOV     DPTR,#05A20H
0073 E0                MOVX    A,@DPTR
0074 900000      R     MOV     DPTR,#cyPmBackup+01AH
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1608
0078 905A22            MOV     DPTR,#05A22H
007B E0                MOVX    A,@DPTR
007C 900000      R     MOV     DPTR,#cyPmBackup+01BH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1609
0080 905A23            MOV     DPTR,#05A23H
0083 E0                MOVX    A,@DPTR
0084 900000      R     MOV     DPTR,#cyPmBackup+01CH
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1610
0088 905A24            MOV     DPTR,#05A24H
008B E0                MOVX    A,@DPTR
008C 900000      R     MOV     DPTR,#cyPmBackup+01DH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1611
0090 905A26            MOV     DPTR,#05A26H
0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#cyPmBackup+01EH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1612
0098 905A28            MOV     DPTR,#05A28H
009B E0                MOVX    A,@DPTR
009C 900000      R     MOV     DPTR,#cyPmBackup+01FH
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1613
00A0 905A2A            MOV     DPTR,#05A2AH
00A3 E0                MOVX    A,@DPTR
00A4 900000      R     MOV     DPTR,#cyPmBackup+020H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1615
00A8 905A30            MOV     DPTR,#05A30H
00AB E0                MOVX    A,@DPTR
00AC 900000      R     MOV     DPTR,#cyPmBackup+021H
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 64  

00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1616
00B0 905A32            MOV     DPTR,#05A32H
00B3 E0                MOVX    A,@DPTR
00B4 900000      R     MOV     DPTR,#cyPmBackup+022H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1617
00B8 905A33            MOV     DPTR,#05A33H
00BB E0                MOVX    A,@DPTR
00BC 900000      R     MOV     DPTR,#cyPmBackup+023H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1618
00C0 905A34            MOV     DPTR,#05A34H
00C3 E0                MOVX    A,@DPTR
00C4 900000      R     MOV     DPTR,#cyPmBackup+024H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1619
00C8 905A36            MOV     DPTR,#05A36H
00CB E0                MOVX    A,@DPTR
00CC 900000      R     MOV     DPTR,#cyPmBackup+025H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1620
00D0 905A38            MOV     DPTR,#05A38H
00D3 E0                MOVX    A,@DPTR
00D4 900000      R     MOV     DPTR,#cyPmBackup+026H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1621
00D8 905A3A            MOV     DPTR,#05A3AH
00DB E0                MOVX    A,@DPTR
00DC 900000      R     MOV     DPTR,#cyPmBackup+027H
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1623
00E0 905A00            MOV     DPTR,#05A00H
00E3 E4                CLR     A
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1624
00E5 905A02            MOV     DPTR,#05A02H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1625
00E9 A3                INC     DPTR
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1626
00EB A3                INC     DPTR
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1627
00ED 905A06            MOV     DPTR,#05A06H
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1628
00F1 905A08            MOV     DPTR,#05A08H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1629
00F5 905A0A            MOV     DPTR,#05A0AH
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1631
00F9 905A10            MOV     DPTR,#05A10H
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1632
00FD 905A12            MOV     DPTR,#05A12H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1633
0101 A3                INC     DPTR
0102 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 65  

                                           ; SOURCE LINE # 1634
0103 A3                INC     DPTR
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1635
0105 905A16            MOV     DPTR,#05A16H
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1636
0109 905A18            MOV     DPTR,#05A18H
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1637
010D 905A1A            MOV     DPTR,#05A1AH
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1639
0111 905A20            MOV     DPTR,#05A20H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1640
0115 905A22            MOV     DPTR,#05A22H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1641
0119 A3                INC     DPTR
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1642
011B A3                INC     DPTR
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
011D 905A26            MOV     DPTR,#05A26H
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1644
0121 905A28            MOV     DPTR,#05A28H
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1645
0125 905A2A            MOV     DPTR,#05A2AH
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1647
0129 905A30            MOV     DPTR,#05A30H
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1648
012D 905A32            MOV     DPTR,#05A32H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1649
0131 A3                INC     DPTR
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1650
0133 A3                INC     DPTR
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1651
0135 905A36            MOV     DPTR,#05A36H
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1652
0139 905A38            MOV     DPTR,#05A38H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1653
013D 905A3A            MOV     DPTR,#05A3AH
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1661
0141 9046E8            MOV     DPTR,#046E8H
0144 E0                MOVX    A,@DPTR
0145 5404              ANL     A,#04H
0147 6022              JZ      ?C0109
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1664
0149 900000      R     MOV     DPTR,#cyPmBackup+04H
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 66  

014C 7401              MOV     A,#01H
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1667
014F 90500B            MOV     DPTR,#0500BH
0152 E0                MOVX    A,@DPTR
0153 540E              ANL     A,#0EH
0155 900000      R     MOV     DPTR,#cyPmBackup+05H
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1670
0159 90500B            MOV     DPTR,#0500BH
015C E0                MOVX    A,@DPTR
015D 54F1              ANL     A,#0F1H
015F 440C              ORL     A,#0CH
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1674
0162 9046E8            MOV     DPTR,#046E8H
0165 E0                MOVX    A,@DPTR
0166 54FB              ANL     A,#0FBH
0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1675
0169 8005              SJMP    ?C0110
016B         ?C0109:
                                           ; SOURCE LINE # 1677
                                           ; SOURCE LINE # 1679
016B E4                CLR     A
016C 900000      R     MOV     DPTR,#cyPmBackup+04H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1680
0170         ?C0110:
                                           ; SOURCE LINE # 1689
0170 904322            MOV     DPTR,#04322H
0173 E0                MOVX    A,@DPTR
0174 5408              ANL     A,#08H
0176 600E              JZ      ?C0111
                                           ; SOURCE LINE # 1690
                                           ; SOURCE LINE # 1691
0178 900000      R     MOV     DPTR,#cyPmBackup+031H
017B 7401              MOV     A,#01H
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1692
017E 904322            MOV     DPTR,#04322H
0181 E0                MOVX    A,@DPTR
0182 54F7              ANL     A,#0F7H
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1693
0185 22                RET     
0186         ?C0111:
                                           ; SOURCE LINE # 1695
                                           ; SOURCE LINE # 1696
0186 E4                CLR     A
0187 900000      R     MOV     DPTR,#cyPmBackup+031H
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1697
                                           ; SOURCE LINE # 1698
018B         ?C0113:
018B 22                RET     
             ; FUNCTION CyPmHibSlpSaveSet (END)

             ; FUNCTION CyPmHibSlpRestore (BEGIN)
                                           ; SOURCE LINE # 1712
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1715
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 67  

0000 900000      R     MOV     DPTR,#cyPmBackup+0CH
0003 E0                MOVX    A,@DPTR
0004 905A00            MOV     DPTR,#05A00H
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1716
0008 900000      R     MOV     DPTR,#cyPmBackup+0DH
000B E0                MOVX    A,@DPTR
000C 905A02            MOV     DPTR,#05A02H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1717
0010 900000      R     MOV     DPTR,#cyPmBackup+0EH
0013 E0                MOVX    A,@DPTR
0014 905A03            MOV     DPTR,#05A03H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1718
0018 900000      R     MOV     DPTR,#cyPmBackup+0FH
001B E0                MOVX    A,@DPTR
001C 905A04            MOV     DPTR,#05A04H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1719
0020 900000      R     MOV     DPTR,#cyPmBackup+010H
0023 E0                MOVX    A,@DPTR
0024 905A06            MOV     DPTR,#05A06H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1720
0028 900000      R     MOV     DPTR,#cyPmBackup+011H
002B E0                MOVX    A,@DPTR
002C 905A08            MOV     DPTR,#05A08H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1721
0030 900000      R     MOV     DPTR,#cyPmBackup+012H
0033 E0                MOVX    A,@DPTR
0034 905A0A            MOV     DPTR,#05A0AH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1723
0038 900000      R     MOV     DPTR,#cyPmBackup+013H
003B E0                MOVX    A,@DPTR
003C 905A10            MOV     DPTR,#05A10H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1724
0040 900000      R     MOV     DPTR,#cyPmBackup+014H
0043 E0                MOVX    A,@DPTR
0044 905A12            MOV     DPTR,#05A12H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1725
0048 900000      R     MOV     DPTR,#cyPmBackup+015H
004B E0                MOVX    A,@DPTR
004C 905A13            MOV     DPTR,#05A13H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1726
0050 900000      R     MOV     DPTR,#cyPmBackup+016H
0053 E0                MOVX    A,@DPTR
0054 905A14            MOV     DPTR,#05A14H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1727
0058 900000      R     MOV     DPTR,#cyPmBackup+017H
005B E0                MOVX    A,@DPTR
005C 905A16            MOV     DPTR,#05A16H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1728
0060 900000      R     MOV     DPTR,#cyPmBackup+018H
0063 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 68  

0064 905A18            MOV     DPTR,#05A18H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1729
0068 900000      R     MOV     DPTR,#cyPmBackup+019H
006B E0                MOVX    A,@DPTR
006C 905A1A            MOV     DPTR,#05A1AH
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1731
0070 900000      R     MOV     DPTR,#cyPmBackup+01AH
0073 E0                MOVX    A,@DPTR
0074 905A20            MOV     DPTR,#05A20H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1732
0078 900000      R     MOV     DPTR,#cyPmBackup+01BH
007B E0                MOVX    A,@DPTR
007C 905A22            MOV     DPTR,#05A22H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1733
0080 900000      R     MOV     DPTR,#cyPmBackup+01CH
0083 E0                MOVX    A,@DPTR
0084 905A23            MOV     DPTR,#05A23H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1734
0088 900000      R     MOV     DPTR,#cyPmBackup+01DH
008B E0                MOVX    A,@DPTR
008C 905A24            MOV     DPTR,#05A24H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1735
0090 900000      R     MOV     DPTR,#cyPmBackup+01EH
0093 E0                MOVX    A,@DPTR
0094 905A26            MOV     DPTR,#05A26H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1736
0098 900000      R     MOV     DPTR,#cyPmBackup+01FH
009B E0                MOVX    A,@DPTR
009C 905A28            MOV     DPTR,#05A28H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1737
00A0 900000      R     MOV     DPTR,#cyPmBackup+020H
00A3 E0                MOVX    A,@DPTR
00A4 905A2A            MOV     DPTR,#05A2AH
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1739
00A8 900000      R     MOV     DPTR,#cyPmBackup+021H
00AB E0                MOVX    A,@DPTR
00AC 905A30            MOV     DPTR,#05A30H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1740
00B0 900000      R     MOV     DPTR,#cyPmBackup+022H
00B3 E0                MOVX    A,@DPTR
00B4 905A32            MOV     DPTR,#05A32H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1741
00B8 900000      R     MOV     DPTR,#cyPmBackup+023H
00BB E0                MOVX    A,@DPTR
00BC 905A33            MOV     DPTR,#05A33H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1742
00C0 900000      R     MOV     DPTR,#cyPmBackup+024H
00C3 E0                MOVX    A,@DPTR
00C4 905A34            MOV     DPTR,#05A34H
00C7 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 69  

                                           ; SOURCE LINE # 1743
00C8 900000      R     MOV     DPTR,#cyPmBackup+025H
00CB E0                MOVX    A,@DPTR
00CC 905A36            MOV     DPTR,#05A36H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1744
00D0 900000      R     MOV     DPTR,#cyPmBackup+026H
00D3 E0                MOVX    A,@DPTR
00D4 905A38            MOV     DPTR,#05A38H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1745
00D8 900000      R     MOV     DPTR,#cyPmBackup+027H
00DB E0                MOVX    A,@DPTR
00DC 905A3A            MOV     DPTR,#05A3AH
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1751
00E0 900000      R     MOV     DPTR,#cyPmBackup+04H
00E3 E0                MOVX    A,@DPTR
00E4 B40117            CJNE    A,#01H,?C0114
                                           ; SOURCE LINE # 1752
                                           ; SOURCE LINE # 1754
00E7 90500B            MOV     DPTR,#0500BH
00EA E0                MOVX    A,@DPTR
00EB 54F1              ANL     A,#0F1H
00ED FF                MOV     R7,A
00EE 900000      R     MOV     DPTR,#cyPmBackup+05H
00F1 E0                MOVX    A,@DPTR
00F2 4F                ORL     A,R7
00F3 90500B            MOV     DPTR,#0500BH
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1758
00F7 9046E8            MOV     DPTR,#046E8H
00FA E0                MOVX    A,@DPTR
00FB 4404              ORL     A,#04H
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1759
00FE         ?C0114:
                                           ; SOURCE LINE # 1765
00FE 900000      R     MOV     DPTR,#cyPmBackup+031H
0101 E0                MOVX    A,@DPTR
0102 B40107            CJNE    A,#01H,?C0116
                                           ; SOURCE LINE # 1766
                                           ; SOURCE LINE # 1767
0105 904322            MOV     DPTR,#04322H
0108 E0                MOVX    A,@DPTR
0109 4408              ORL     A,#08H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1768
                                           ; SOURCE LINE # 1769
010C         ?C0116:
010C 22                RET     
             ; FUNCTION CyPmHibSlpRestore (END)

             ; FUNCTION CyPmHviLviSaveDisable (BEGIN)
                                           ; SOURCE LINE # 1782
                                           ; SOURCE LINE # 1783
                                           ; SOURCE LINE # 1784
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 6027              JZ      ?C0117
                                           ; SOURCE LINE # 1785
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 70  

                                           ; SOURCE LINE # 1786
0008 900000      R     MOV     DPTR,#cyPmBackup+028H
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1787
000E 9046F4            MOV     DPTR,#046F4H
0011 E0                MOVX    A,@DPTR
0012 540F              ANL     A,#0FH
0014 900000      R     MOV     DPTR,#cyPmBackup+029H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1790
0018 9046F7            MOV     DPTR,#046F7H
001B E0                MOVX    A,@DPTR
001C 5440              ANL     A,#040H
001E 7003              JNZ     ?C0118
0020 FF                MOV     R7,A
0021 8002              SJMP    ?C0119
0023         ?C0118:
0023 7F01              MOV     R7,#01H
0025         ?C0119:
0025 900000      R     MOV     DPTR,#cyPmBackup+02DH
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1793
002A 120000      E     LCALL   CyVdLvDigitDisable
                                           ; SOURCE LINE # 1794
002D 8005              SJMP    ?C0120
002F         ?C0117:
                                           ; SOURCE LINE # 1796
                                           ; SOURCE LINE # 1797
002F E4                CLR     A
0030 900000      R     MOV     DPTR,#cyPmBackup+028H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1798
0034         ?C0120:
                                           ; SOURCE LINE # 1800
0034 9046F5            MOV     DPTR,#046F5H
0037 E0                MOVX    A,@DPTR
0038 5402              ANL     A,#02H
003A 6029              JZ      ?C0121
                                           ; SOURCE LINE # 1801
                                           ; SOURCE LINE # 1802
003C 900000      R     MOV     DPTR,#cyPmBackup+02AH
003F 7401              MOV     A,#01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1803
0042 9046F4            MOV     DPTR,#046F4H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 C4                SWAP    A
0048 540F              ANL     A,#0FH
004A 900000      R     MOV     DPTR,#cyPmBackup+02BH
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1806
004E 9046F7            MOV     DPTR,#046F7H
0051 E0                MOVX    A,@DPTR
0052 5480              ANL     A,#080H
0054 7003              JNZ     ?C0122
0056 FF                MOV     R7,A
0057 8002              SJMP    ?C0123
0059         ?C0122:
0059 7F01              MOV     R7,#01H
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 71  

005B         ?C0123:
005B 900000      R     MOV     DPTR,#cyPmBackup+02EH
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1809
0060 120000      E     LCALL   CyVdLvAnalogDisable
                                           ; SOURCE LINE # 1810
0063 8005              SJMP    ?C0124
0065         ?C0121:
                                           ; SOURCE LINE # 1812
                                           ; SOURCE LINE # 1813
0065 E4                CLR     A
0066 900000      R     MOV     DPTR,#cyPmBackup+02AH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1814
006A         ?C0124:
                                           ; SOURCE LINE # 1816
006A 9046F5            MOV     DPTR,#046F5H
006D E0                MOVX    A,@DPTR
006E 5404              ANL     A,#04H
0070 600A              JZ      ?C0125
                                           ; SOURCE LINE # 1817
                                           ; SOURCE LINE # 1818
0072 900000      R     MOV     DPTR,#cyPmBackup+02CH
0075 7401              MOV     A,#01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1819
0078 120000      E     LCALL   CyVdHvAnalogDisable
                                           ; SOURCE LINE # 1820
007B 22                RET     
007C         ?C0125:
                                           ; SOURCE LINE # 1822
                                           ; SOURCE LINE # 1823
007C E4                CLR     A
007D 900000      R     MOV     DPTR,#cyPmBackup+02CH
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1824
                                           ; SOURCE LINE # 1825
0081         ?C0127:
0081 22                RET     
             ; FUNCTION CyPmHviLviSaveDisable (END)

             ; FUNCTION CyPmHviLviRestore (BEGIN)
                                           ; SOURCE LINE # 1838
                                           ; SOURCE LINE # 1839
                                           ; SOURCE LINE # 1841
0000 900000      R     MOV     DPTR,#cyPmBackup+028H
0003 E0                MOVX    A,@DPTR
0004 B4010D            CJNE    A,#01H,?C0128
                                           ; SOURCE LINE # 1842
                                           ; SOURCE LINE # 1843
0007 900000      R     MOV     DPTR,#cyPmBackup+02DH
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C 900000      R     MOV     DPTR,#cyPmBackup+029H
000F E0                MOVX    A,@DPTR
0010 FD                MOV     R5,A
0011 120000      E     LCALL   _CyVdLvDigitEnable
                                           ; SOURCE LINE # 1844
0014         ?C0128:
                                           ; SOURCE LINE # 1846
0014 900000      R     MOV     DPTR,#cyPmBackup+02AH
C51 COMPILER V9.51   CYPM                                                                  02/07/2017 16:12:21 PAGE 72  

0017 E0                MOVX    A,@DPTR
0018 B4010D            CJNE    A,#01H,?C0129
                                           ; SOURCE LINE # 1847
                                           ; SOURCE LINE # 1848
001B 900000      R     MOV     DPTR,#cyPmBackup+02EH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#cyPmBackup+02BH
0023 E0                MOVX    A,@DPTR
0024 FD                MOV     R5,A
0025 120000      E     LCALL   _CyVdLvAnalogEnable
                                           ; SOURCE LINE # 1849
0028         ?C0129:
                                           ; SOURCE LINE # 1851
0028 900000      R     MOV     DPTR,#cyPmBackup+02CH
002B E0                MOVX    A,@DPTR
002C B40103            CJNE    A,#01H,?C0131
                                           ; SOURCE LINE # 1852
                                           ; SOURCE LINE # 1853
002F 120000      E     LCALL   CyVdHvAnalogEnable
                                           ; SOURCE LINE # 1854
                                           ; SOURCE LINE # 1855
0032         ?C0131:
0032 22                RET     
             ; FUNCTION CyPmHviLviRestore (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3069    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     67      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
