C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYSPC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\CySpc.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CySpc.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) WL
                    -(2) PR(.\DP8051_Keil_951\Release/CySpc.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\CySpc.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /***************************************************************************//**
   2          * \file CySpc.c
   3          * \version 5.40
   4          *
   5          * \brief Provides an API for the System Performance Component.
   6          * The SPC functions are not meant to be called directly by the user
   7          * application.
   8          *
   9          ********************************************************************************
  10          * \copyright
  11          * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CySpc.h"
  18          
  19          #define CY_SPC_KEY_ONE                      (0xB6u)
  20          #define CY_SPC_KEY_TWO(x)                   ((uint8) (((uint16) 0xD3u) + ((uint16) (x))))
  21          
  22          /* Command Codes */
  23          #define CY_SPC_CMD_LD_BYTE                  (0x00u)
  24          #define CY_SPC_CMD_LD_MULTI_BYTE            (0x01u)
  25          #define CY_SPC_CMD_LD_ROW                   (0x02u)
  26          #define CY_SPC_CMD_RD_BYTE                  (0x03u)
  27          #define CY_SPC_CMD_RD_MULTI_BYTE            (0x04u)
  28          #define CY_SPC_CMD_WR_ROW                   (0x05u)
  29          #define CY_SPC_CMD_WR_USER_NVL              (0x06u)
  30          #define CY_SPC_CMD_PRG_ROW                  (0x07u)
  31          #define CY_SPC_CMD_ER_SECTOR                (0x08u)
  32          #define CY_SPC_CMD_ER_ALL                   (0x09u)
  33          #define CY_SPC_CMD_RD_HIDDEN                (0x0Au)
  34          #define CY_SPC_CMD_PRG_PROTECT              (0x0Bu)
  35          #define CY_SPC_CMD_CHECKSUM                 (0x0Cu)
  36          #define CY_SPC_CMD_DWNLD_ALGORITHM          (0x0Du)
  37          #define CY_SPC_CMD_GET_TEMP                 (0x0Eu)
  38          #define CY_SPC_CMD_GET_ADC                  (0x0Fu)
  39          #define CY_SPC_CMD_RD_NVL_VOLATILE          (0x10u)
  40          #define CY_SPC_CMD_SETUP_TS                 (0x11u)
  41          #define CY_SPC_CMD_DISABLE_TS               (0x12u)
  42          #define CY_SPC_CMD_ER_ROW                   (0x13u)
  43          
  44          /* Enable bit in Active and Alternate Active mode templates */
  45          #define PM_SPC_PM_EN                        (0x08u)
  46          
  47          /* Gate calls to the SPC. */
  48          uint8 SpcLockState = CY_SPC_UNLOCKED;
  49          
  50          
  51          #if(CY_PSOC5)
              
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 2   

                  /***************************************************************************
                  * The wait-state pipeline must be enabled prior to accessing the SPC
                  * register interface regardless of CPU frequency. The CySpcLock() saves
                  * current wait-state pipeline state and enables it. The CySpcUnlock()
                  * function, which must be called after SPC transaction, restores original
                  * state.
                  ***************************************************************************/
                  static uint32 spcWaitPipeBypass = 0u;
              
              #endif  /* (CY_PSOC5) */
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: CySpcStart
  67          ****************************************************************************//**
  68          *  Starts the SPC.
  69          *
  70          *******************************************************************************/
  71          void CySpcStart(void) 
  72          {
  73   1          /* Save current global interrupt enable and disable it */
  74   1          uint8 interruptState = CyEnterCriticalSection();
  75   1      
  76   1          CY_SPC_PM_ACT_REG  |= PM_SPC_PM_EN;
  77   1          CY_SPC_PM_STBY_REG |= PM_SPC_PM_EN;
  78   1      
  79   1          /* Restore global interrupt enable state */
  80   1          CyExitCriticalSection(interruptState);
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: CySpcStop
  86          ****************************************************************************//**
  87          *  Stops the SPC.
  88          *
  89          *******************************************************************************/
  90          void CySpcStop(void) 
  91          {
  92   1          /* Save current global interrupt enable and disable it */
  93   1          uint8 interruptState = CyEnterCriticalSection();
  94   1      
  95   1          CY_SPC_PM_ACT_REG  &= ((uint8)(~PM_SPC_PM_EN));
  96   1          CY_SPC_PM_STBY_REG &= ((uint8)(~PM_SPC_PM_EN));
  97   1      
  98   1          /* Restore global interrupt enable state */
  99   1          CyExitCriticalSection(interruptState);
 100   1      }
 101          
 102          
 103          /*******************************************************************************
 104          * Function Name: CySpcReadData
 105          ****************************************************************************//**
 106          *  Reads data from the SPC.
 107          *
 108          *  \param uint8 buffer:
 109          *   Address to store data read.
 110          *
 111          *  \param uint8 size:
 112          *   Number of bytes to read from the SPC.
 113          *
 114          * \return
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 3   

 115          *  uint8:
 116          *   The number of bytes read from the SPC.
 117          *
 118          *******************************************************************************/
 119          uint8 CySpcReadData(uint8 buffer[], uint8 size) 
 120          {
 121   1          uint8 i;
 122   1      
 123   1          for(i = 0u; i < size; i++)
 124   1          {
 125   2              while(!CY_SPC_DATA_READY)
 126   2              {
 127   3                  CyDelayUs(1u);
 128   3              }
 129   2              buffer[i] = CY_SPC_CPU_DATA_REG;
 130   2          }
 131   1      
 132   1          return(i);
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: CySpcLoadMultiByte
 138          ****************************************************************************//**
 139          *  Loads 1 to 32 bytes of data into the row latch of a Flash/EEPROM array.
 140          *
 141          *  \param uint8 array:
 142          *   Id of the array.
 143          *
 144          *  \param uint16 address:
 145          *   Flash/eeprom addrress
 146          *
 147          *  \param uint8* buffer:
 148          *   Data to load to the row latch
 149          *
 150          *  \param uint16 number:
 151          *   Number bytes to load.
 152          *
 153          * \return
 154          *  CYRET_STARTED
 155          *  CYRET_CANCELED
 156          *  CYRET_LOCKED
 157          *  CYRET_BAD_PARAM
 158          *
 159          *******************************************************************************/
 160          cystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
 161          
 162          {
 163   1          cystatus status = CYRET_STARTED;
 164   1          uint8 i;
 165   1      
 166   1          /***************************************************************************
 167   1          * Check if number is correct for array. Number must be less than
 168   1          * 32 for Flash or less than 16 for EEPROM.
 169   1          ***************************************************************************/
 170   1          if(((array < CY_SPC_LAST_FLASH_ARRAYID) && (size < 32u)) ||
 171   1             ((array > CY_SPC_LAST_FLASH_ARRAYID) && (size < 16u)))
 172   1          {
 173   2              if(CY_SPC_IDLE)
 174   2              {
 175   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 176   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_MULTI_BYTE);
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 4   

 177   3                  CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_MULTI_BYTE;
 178   3      
 179   3                  if(CY_SPC_BUSY)
 180   3                  {
 181   4                      CY_SPC_CPU_DATA_REG = array;
 182   4                      CY_SPC_CPU_DATA_REG = 1u & HI8(address);
 183   4                      CY_SPC_CPU_DATA_REG = LO8(address);
 184   4                      CY_SPC_CPU_DATA_REG = ((uint8)(size - 1u));
 185   4      
 186   4                      for(i = 0u; i < size; i++)
 187   4                      {
 188   5                          CY_SPC_CPU_DATA_REG = buffer[i];
 189   5                      }
 190   4                  }
 191   3                  else
 192   3                  {
 193   4                      status = CYRET_CANCELED;
 194   4                  }
 195   3              }
 196   2              else
 197   2              {
 198   3                  status = CYRET_LOCKED;
 199   3              }
 200   2          }
 201   1          else
 202   1          {
 203   2              status = CYRET_BAD_PARAM;
 204   2          }
 205   1      
 206   1          return(status);
 207   1      }
 208          
 209          
 210          /*******************************************************************************
 211          * Function Name: CySpcLoadRow
 212          ****************************************************************************//**
 213          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 214          *
 215          *  The buffer pointer should point to the data that should be written to the
 216          *  flash row directly (no data in ECC/flash will be preserved). It is Flash API
 217          *  responsibility to prepare data: the preserved data are copied from flash into
 218          *  array with the modified data.
 219          *
 220          *  \param uint8 array:
 221          *   Id of the array.
 222          *
 223          *  \param uint8* buffer:
 224          *   Data to be loaded to the row latch
 225          *
 226          *  \param uint8 size:
 227          *   The number of data bytes that the SPC expects to be written. Depends on the
 228          *   type of the array and, if the array is Flash, whether ECC is being enabled
 229          *   or not. There are following values: flash row latch size with ECC enabled,
 230          *   flash row latch size with ECC disabled and EEPROM row latch size.
 231          *
 232          * \return
 233          *  CYRET_STARTED
 234          *  CYRET_CANCELED
 235          *  CYRET_LOCKED
 236          *
 237          *******************************************************************************/
 238          cystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size)
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 5   

 239          {
 240   1          cystatus status = CYRET_STARTED;
 241   1          uint16 i;
 242   1      
 243   1          /* Make sure the SPC is ready to accept command */
 244   1          if(CY_SPC_IDLE)
 245   1          {
 246   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 247   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 248   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 249   2      
 250   2              /* Make sure the command was accepted */
 251   2              if(CY_SPC_BUSY)
 252   2              {
 253   3                  CY_SPC_CPU_DATA_REG = array;
 254   3      
 255   3                  for(i = 0u; i < size; i++)
 256   3                  {
 257   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 258   4                  }
 259   3              }
 260   2              else
 261   2              {
 262   3                  status = CYRET_CANCELED;
 263   3              }
 264   2          }
 265   1          else
 266   1          {
 267   2              status = CYRET_LOCKED;
 268   2          }
 269   1      
 270   1          return(status);
 271   1      }
 272          
 273          
 274          /*******************************************************************************
 275          * Function Name: CySpcLoadRowFull
 276          ****************************************************************************//**
 277          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 278          *
 279          *  The only data that are going to be changed should be passed. The function
 280          *  will handle unmodified data preservation based on DWR settings and input
 281          *  parameters.
 282          *
 283          *  \param uint8 array:
 284          *   Id of the array.
 285          *
 286          *  \param uint16 row:
 287          *   Flash row number to be loaded.
 288          *
 289          *  \param uint8* buffer:
 290          *   Data to be loaded to the row latch
 291          *
 292          *  \param uint8 size:
 293          *   The number of data bytes that the SPC expects to be written. Depends on the
 294          *   type of the array and, if the array is Flash, whether ECC is being enabled
 295          *   or not. There are following values: flash row latch size with ECC enabled,
 296          *   flash row latch size with ECC disabled and EEPROM row latch size.
 297          *
 298          * \return
 299          *  CYRET_STARTED
 300          *  CYRET_CANCELED
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 6   

 301          *  CYRET_LOCKED
 302          *
 303          *******************************************************************************/
 304          cystatus CySpcLoadRowFull(uint8 array, uint16 row, const uint8 buffer[], uint16 size)\
 305          
 306          {
 307   1          cystatus status = CYRET_STARTED;
 308   1          uint16 i;
 309   1      
 310   1          #if (CYDEV_ECC_ENABLE == 0)
 311   1              uint32 offset;
 312   1          #endif /* (CYDEV_ECC_ENABLE == 0) */
 313   1      
 314   1          /* Make sure the SPC is ready to accept command */
 315   1          if(CY_SPC_IDLE)
 316   1          {
 317   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 318   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 319   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 320   2      
 321   2              /* Make sure the command was accepted */
 322   2              if(CY_SPC_BUSY)
 323   2              {
 324   3                  CY_SPC_CPU_DATA_REG = array;
 325   3      
 326   3                  /*******************************************************************
 327   3                  * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 328   3                  * Data in ECC" DWR options are disabled, ECC section is available
 329   3                  * for user data.
 330   3                  *******************************************************************/
 331   3                  #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                              /*******************************************************************
                              * If size parameter equals size of the ECC row and selected array
                              * identification corresponds to the flash array (but not to EEPROM
                              * array) then data are going to be written to the ECC section.
                              * In this case flash data must be preserved. The flash data copied
                              * from flash data section to the SPC data register.
                              *******************************************************************/
                              if ((size == CYDEV_ECC_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
                              {
                                  offset = CYDEV_FLS_BASE +
                                           ((uint32) array * CYDEV_FLS_SECTOR_SIZE) +
                                           ((uint32)   row * CYDEV_FLS_ROW_SIZE   );
              
                                  for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
                                  {
                                      CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
                                  }
                              }
              
                          #endif /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 353   3      
 354   3      
 355   3                  for(i = 0u; i < size; i++)
 356   3                  {
 357   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 358   4                  }
 359   3      
 360   3      
 361   3                  /*******************************************************************
 362   3                  * If "Enable Error Correcting Code (ECC)" DWR option is disabled,
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 7   

 363   3                  * ECC section can be used for storing device configuration data
 364   3                  * ("Store Configuration Data in ECC" DWR option is enabled) or for
 365   3                  * storing user data in the ECC section ("Store Configuration Data in
 366   3                  * ECC" DWR option is enabled). In both cases, the data in the ECC
 367   3                  * section must be preserved if flash data is written.
 368   3                  *******************************************************************/
 369   3                  #if (CYDEV_ECC_ENABLE == 0)
 370   3      
 371   3      
 372   3                      /*******************************************************************
 373   3                      * If size parameter equals size of the flash row and selected array
 374   3                      * identification corresponds to the flash array (but not to EEPROM
 375   3                      * array) then data are going to be written to the flash data
 376   3                      * section. In this case, ECC section data must be preserved.
 377   3                      * The ECC section data copied from ECC section to the SPC data
 378   3                      * register.
 379   3                      *******************************************************************/
 380   3                      if ((size == CYDEV_FLS_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
 381   3                      {
 382   4                          offset = CYDEV_ECC_BASE +
 383   4                                  ((uint32) array * CYDEV_ECC_SECTOR_SIZE) +
 384   4                                  ((uint32) row   * CYDEV_ECC_ROW_SIZE   );
 385   4      
 386   4                          for (i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 387   4                          {
 388   5                              CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 389   5                          }
 390   4                      }
 391   3      
 392   3                  #else
              
                              if(0u != row)
                              {
                                  /* To remove unreferenced local variable warning */
                              }
              
                          #endif /* (CYDEV_ECC_ENABLE == 0) */
 400   3              }
 401   2              else
 402   2              {
 403   3                  status = CYRET_CANCELED;
 404   3              }
 405   2          }
 406   1          else
 407   1          {
 408   2              status = CYRET_LOCKED;
 409   2          }
 410   1      
 411   1          return(status);
 412   1      }
 413          
 414          
 415          /*******************************************************************************
 416          * Function Name: CySpcWriteRow
 417          ****************************************************************************//**
 418          *  Erases then programs a row in Flash/EEPROM with data in row latch.
 419          *
 420          *  \param uint8 array:
 421          *   Id of the array.
 422          *
 423          *  \param uint16 address:
 424          *   flash/eeprom addrress
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 8   

 425          *
 426          *  \param uint8 tempPolarity:
 427          *   temperature polarity.
 428          *   \param 1: the Temp Magnitude is interpreted as a positive value
 429          *   \param 0: the Temp Magnitude is interpreted as a negative value
 430          *
 431          *  \param uint8 tempMagnitude:
 432          *   temperature magnitude.
 433          *
 434          * \return
 435          *  CYRET_STARTED
 436          *  CYRET_CANCELED
 437          *  CYRET_LOCKED
 438          *
 439          *******************************************************************************/
 440          cystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 441          
 442          {
 443   1          cystatus status = CYRET_STARTED;
 444   1      
 445   1          /* Make sure the SPC is ready to accept command */
 446   1          if(CY_SPC_IDLE)
 447   1          {
 448   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 449   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_WR_ROW);
 450   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_WR_ROW;
 451   2      
 452   2              /* Make sure the command was accepted */
 453   2              if(CY_SPC_BUSY)
 454   2              {
 455   3                  CY_SPC_CPU_DATA_REG = array;
 456   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 457   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 458   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 459   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 460   3              }
 461   2              else
 462   2              {
 463   3                  status = CYRET_CANCELED;
 464   3              }
 465   2          }
 466   1          else
 467   1          {
 468   2              status = CYRET_LOCKED;
 469   2          }
 470   1      
 471   1          return(status);
 472   1      }
 473          
 474          
 475          /*******************************************************************************
 476          * Function Name: CySpcEraseSector
 477          ****************************************************************************//**
 478          *  Erases all data in the addressed sector (block of 64 rows).
 479          *
 480          *  \param uint8 array:
 481          *   Id of the array.
 482          *
 483          *  \param uint8 sectorNumber:
 484          *   Zero based sector number within Flash/EEPROM array
 485          *
 486          * \return
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 9   

 487          *  CYRET_STARTED
 488          *  CYRET_CANCELED
 489          *  CYRET_LOCKED
 490          *
 491          *******************************************************************************/
 492          cystatus CySpcEraseSector(uint8 array, uint8 sectorNumber)
 493          {
 494   1          cystatus status = CYRET_STARTED;
 495   1      
 496   1          /* Make sure the SPC is ready to accept command */
 497   1          if(CY_SPC_IDLE)
 498   1          {
 499   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 500   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_SECTOR);
 501   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_SECTOR;
 502   2      
 503   2              /* Make sure the command was accepted */
 504   2              if(CY_SPC_BUSY)
 505   2              {
 506   3                  CY_SPC_CPU_DATA_REG = array;
 507   3                  CY_SPC_CPU_DATA_REG = sectorNumber;
 508   3              }
 509   2              else
 510   2              {
 511   3                  status = CYRET_CANCELED;
 512   3              }
 513   2          }
 514   1          else
 515   1          {
 516   2              status = CYRET_LOCKED;
 517   2          }
 518   1      
 519   1          return(status);
 520   1      }
 521          
 522          
 523          /*******************************************************************************
 524          * Function Name: CySpcGetTemp
 525          ****************************************************************************//**
 526          *  Returns the internal die temperature
 527          *
 528          *  \param uint8 numSamples:
 529          *   Number of samples. Valid values are 1-5, resulting in 2 - 32 samples
 530          *   respectively.
 531          *
 532          * \param uint16 timerPeriod:
 533          *   Number of ADC ACLK cycles. A valid 14 bit value is accepted, higher 2 bits
 534          *   of 16 bit values are ignored.
 535          *
 536          * \param uint8 clkDivSelect:
 537          *   ADC ACLK clock divide value. Valid values are 2 - 225.
 538          *
 539          * \return
 540          *  CYRET_STARTED
 541          *  CYRET_CANCELED
 542          *  CYRET_LOCKED
 543          *
 544          *******************************************************************************/
 545          cystatus CySpcGetTemp(uint8 numSamples)
 546          {
 547   1          cystatus status = CYRET_STARTED;
 548   1      
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 10  

 549   1          /* Make sure the SPC is ready to accept command */
 550   1          if(CY_SPC_IDLE)
 551   1          {
 552   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 553   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_GET_TEMP);
 554   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_GET_TEMP;
 555   2      
 556   2              /* Make sure the command was accepted */
 557   2              if(CY_SPC_BUSY)
 558   2              {
 559   3                  CY_SPC_CPU_DATA_REG = numSamples;
 560   3              }
 561   2              else
 562   2              {
 563   3                  status = CYRET_CANCELED;
 564   3              }
 565   2          }
 566   1          else
 567   1          {
 568   2              status = CYRET_LOCKED;
 569   2          }
 570   1      
 571   1          return(status);
 572   1      }
 573          
 574          
 575          /*******************************************************************************
 576          * Function Name: CySpcLock
 577          ****************************************************************************//**
 578          *  Locks the SPC so it can not be used by someone else:
 579          *   - Saves wait-pipeline enable state and enable pipeline (PSoC5)
 580          *
 581          * \return
 582          *  CYRET_SUCCESS - if the resource was free.
 583          *  CYRET_LOCKED  - if the SPC is in use.
 584          *
 585          *******************************************************************************/
 586          cystatus CySpcLock(void)
 587          {
 588   1          cystatus status = CYRET_LOCKED;
 589   1          uint8 interruptState;
 590   1      
 591   1          /* Enter critical section */
 592   1          interruptState = CyEnterCriticalSection();
 593   1      
 594   1          if(CY_SPC_UNLOCKED == SpcLockState)
 595   1          {
 596   2              SpcLockState = CY_SPC_LOCKED;
 597   2              status = CYRET_SUCCESS;
 598   2      
 599   2              #if(CY_PSOC5)
              
                          if(0u != (CY_SPC_CPU_WAITPIPE_REG & CY_SPC_CPU_WAITPIPE_BYPASS))
                          {
                              /* Enable pipeline registers */
                              CY_SPC_CPU_WAITPIPE_REG &= ((uint32)(~CY_SPC_CPU_WAITPIPE_BYPASS));
              
                              /* At least 2 NOP instructions are recommended */
                              CY_NOP;
                              CY_NOP;
                              CY_NOP;
              
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 11  

                              spcWaitPipeBypass = CY_SPC_CPU_WAITPIPE_BYPASS;
                          }
              
                      #endif  /* (CY_PSOC5) */
 615   2          }
 616   1      
 617   1          /* Exit critical section */
 618   1          CyExitCriticalSection(interruptState);
 619   1      
 620   1          return(status);
 621   1      }
 622          
 623          
 624          /*******************************************************************************
 625          * Function Name: CySpcUnlock
 626          ****************************************************************************//**
 627          *  Unlocks the SPC so it can be used by someone else:
 628          *   - Restores wait-pipeline enable state (PSoC5)
 629          *
 630          *******************************************************************************/
 631          void CySpcUnlock(void)
 632          {
 633   1          uint8 interruptState;
 634   1      
 635   1          /* Enter critical section */
 636   1          interruptState = CyEnterCriticalSection();
 637   1      
 638   1          /* Release the SPC object */
 639   1          SpcLockState = CY_SPC_UNLOCKED;
 640   1      
 641   1          #if(CY_PSOC5)
              
                      if(CY_SPC_CPU_WAITPIPE_BYPASS == spcWaitPipeBypass)
                      {
                          /* Force to bypass pipeline registers */
                          CY_SPC_CPU_WAITPIPE_REG |= CY_SPC_CPU_WAITPIPE_BYPASS;
              
                          /* At least 2 NOP instructions are recommended */
                          CY_NOP;
                          CY_NOP;
                          CY_NOP;
              
                          spcWaitPipeBypass = 0u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 657   1      
 658   1          /* Exit critical section */
 659   1          CyExitCriticalSection(interruptState);
 660   1      }
 661          
 662          
 663          /*******************************************************************************
 664          * Function Name: CySpcGetAlgorithm
 665          ****************************************************************************//**
 666          *  Downloads SPC algorithm from SPC SROM into SRAM.
 667          *
 668          * \return
 669          *  CYRET_STARTED
 670          *  CYRET_LOCKED
 671          *
 672          *******************************************************************************/
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 12  

 673          cystatus CySpcGetAlgorithm(void)
 674          {
 675   1          cystatus status = CYRET_STARTED;
 676   1      
 677   1          /* Make sure the SPC is ready to accept command */
 678   1          if(CY_SPC_IDLE)
 679   1          {
 680   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 681   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_DWNLD_ALGORITHM);
 682   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_DWNLD_ALGORITHM;
 683   2          }
 684   1          else
 685   1          {
 686   2              status = CYRET_LOCKED;
 687   2          }
 688   1      
 689   1          return(status);
 690   1      }
 691          
 692          /* [] END OF FILE */
 693          
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CySpcStart (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 76
0003 9043A0            MOV     DPTR,#043A0H
0006 E0                MOVX    A,@DPTR
0007 4408              ORL     A,#08H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
000A 9043B0            MOV     DPTR,#043B0H
000D E0                MOVX    A,@DPTR
000E 4408              ORL     A,#08H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 81
0014 22                RET     
             ; FUNCTION CySpcStart (END)

             ; FUNCTION CySpcStop (BEGIN)
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 93
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 95
0003 9043A0            MOV     DPTR,#043A0H
0006 E0                MOVX    A,@DPTR
0007 54F7              ANL     A,#0F7H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
000A 9043B0            MOV     DPTR,#043B0H
000D E0                MOVX    A,@DPTR
000E 54F7              ANL     A,#0F7H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 100
0014 22                RET     
             ; FUNCTION CySpcStop (END)

             ; FUNCTION _CySpcReadData (BEGIN)
                                           ; SOURCE LINE # 119
0000 900000      R     MOV     DPTR,#buffer
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 14  

                                           ; SOURCE LINE # 123
000E E4                CLR     A
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
0011         ?C0003:
0011 900000      R     MOV     DPTR,#size
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 9F                SUBB    A,R7
001A 503E              JNC     ?C0004
                                           ; SOURCE LINE # 124
001C         ?C0006:
                                           ; SOURCE LINE # 125
001C 904722            MOV     DPTR,#04722H
001F E0                MOVX    A,@DPTR
0020 5401              ANL     A,#01H
0022 6003              JZ      ?C0008
0024 D3                SETB    C
0025 8001              SJMP    ?C0009
0027         ?C0008:
0027 C3                CLR     C
0028         ?C0009:
0028 4009              JC      ?C0007
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
002A 7F01              MOV     R7,#01H
002C 7E00              MOV     R6,#00H
002E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 128
0031 80E9              SJMP    ?C0006
0033         ?C0007:
                                           ; SOURCE LINE # 129
0033 904720            MOV     DPTR,#04720H
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#buffer
003B E0                MOVX    A,@DPTR
003C FB                MOV     R3,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FA                MOV     R2,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 F9                MOV     R1,A
0043 900000      R     MOV     DPTR,#i
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 E9                MOV     A,R1
0049 2E                ADD     A,R6
004A F9                MOV     R1,A
004B E4                CLR     A
004C 3A                ADDC    A,R2
004D FA                MOV     R2,A
004E EF                MOV     A,R7
004F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 130
0052 900000      R     MOV     DPTR,#i
0055 E0                MOVX    A,@DPTR
0056 04                INC     A
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 15  

0057 F0                MOVX    @DPTR,A
0058 80B7              SJMP    ?C0003
005A         ?C0004:
                                           ; SOURCE LINE # 132
005A 900000      R     MOV     DPTR,#i
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
                                           ; SOURCE LINE # 133
005F         ?C0010:
005F 22                RET     
             ; FUNCTION _CySpcReadData (END)

             ; FUNCTION _CySpcLoadMultiByte (BEGIN)
                                           ; SOURCE LINE # 160
0000 900000      R     MOV     DPTR,#address
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
0011 900000      R     MOV     DPTR,#array
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
;---- Variable 'status' assigned to Register 'R5' ----
0016 7D07              MOV     R5,#07H
                                           ; SOURCE LINE # 170
0018 C3                CLR     C
0019 943F              SUBB    A,#03FH
001B 5009              JNC     ?C0013
001D 900000      R     MOV     DPTR,#size
0020 E0                MOVX    A,@DPTR
0021 C3                CLR     C
0022 9420              SUBB    A,#020H
0024 4011              JC      ?C0012
0026         ?C0013:
0026 900000      R     MOV     DPTR,#array
0029 E0                MOVX    A,@DPTR
002A D3                SETB    C
002B 943F              SUBB    A,#03FH
002D 4073              JC      ?C0011
002F 900000      R     MOV     DPTR,#size
0032 E0                MOVX    A,@DPTR
0033 9410              SUBB    A,#010H
0035 506B              JNC     ?C0011
0037         ?C0012:
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
0037 904722            MOV     DPTR,#04722H
003A E0                MOVX    A,@DPTR
003B 5402              ANL     A,#02H
003D 605F              JZ      ?C0014
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 16  

                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
003F 904720            MOV     DPTR,#04720H
0042 74B6              MOV     A,#0B6H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0045 74D4              MOV     A,#0D4H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
0048 7401              MOV     A,#01H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
004B 904722            MOV     DPTR,#04722H
004E E0                MOVX    A,@DPTR
004F 5402              ANL     A,#02H
0051 7047              JNZ     ?C0015
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0053 900000      R     MOV     DPTR,#array
0056 E0                MOVX    A,@DPTR
0057 904720            MOV     DPTR,#04720H
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
005B 900000      R     MOV     DPTR,#address
005E E0                MOVX    A,@DPTR
005F FA                MOV     R2,A
0060 A3                INC     DPTR
0061 E0                MOVX    A,@DPTR
0062 FB                MOV     R3,A
0063 EA                MOV     A,R2
0064 5401              ANL     A,#01H
0066 904720            MOV     DPTR,#04720H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
006A EB                MOV     A,R3
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
006C 900000      R     MOV     DPTR,#size
006F E0                MOVX    A,@DPTR
0070 14                DEC     A
0071 904720            MOV     DPTR,#04720H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
;---- Variable 'i' assigned to Register 'R7' ----
0075 E4                CLR     A
0076 FF                MOV     R7,A
0077         ?C0016:
0077 900000      R     MOV     DPTR,#size
007A E0                MOVX    A,@DPTR
007B FE                MOV     R6,A
007C EF                MOV     A,R7
007D C3                CLR     C
007E 9E                SUBB    A,R6
007F 5023              JNC     ?C0021
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0081 900000      R     MOV     DPTR,#buffer
0084 E0                MOVX    A,@DPTR
0085 FB                MOV     R3,A
0086 A3                INC     DPTR
0087 E0                MOVX    A,@DPTR
0088 FA                MOV     R2,A
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 17  

0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B 2F                ADD     A,R7
008C F9                MOV     R1,A
008D E4                CLR     A
008E 3A                ADDC    A,R2
008F FA                MOV     R2,A
0090 120000      E     LCALL   ?C?CLDPTR
0093 904720            MOV     DPTR,#04720H
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0097 0F                INC     R7
0098 80DD              SJMP    ?C0016
                                           ; SOURCE LINE # 190
009A         ?C0015:
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
009A 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
009C 8006              SJMP    ?C0021
009E         ?C0014:
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
009E 7D04              MOV     R5,#04H
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
00A0 8002              SJMP    ?C0021
00A2         ?C0011:
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
00A2 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 204
00A4         ?C0021:
                                           ; SOURCE LINE # 206
00A4 AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 207
00A6         ?C0022:
00A6 22                RET     
             ; FUNCTION _CySpcLoadMultiByte (END)

             ; FUNCTION _CySpcLoadRow (BEGIN)
                                           ; SOURCE LINE # 238
0000 900000      R     MOV     DPTR,#buffer
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
;---- Variable 'array' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
000B 900000      R     MOV     DPTR,#status
000E 7407              MOV     A,#07H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0011 904722            MOV     DPTR,#04722H
0014 E0                MOVX    A,@DPTR
0015 5402              ANL     A,#02H
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 18  

0017 604E              JZ      ?C0023
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
0019 904720            MOV     DPTR,#04720H
001C 74B6              MOV     A,#0B6H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
001F 74D5              MOV     A,#0D5H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0022 7402              MOV     A,#02H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0025 904722            MOV     DPTR,#04722H
0028 E0                MOVX    A,@DPTR
0029 5402              ANL     A,#02H
002B 7032              JNZ     ?C0024
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
002D 904720            MOV     DPTR,#04720H
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
;---- Variable 'i' assigned to Register 'R6/R7' ----
0032 E4                CLR     A
0033 FF                MOV     R7,A
0034 FE                MOV     R6,A
0035         ?C0025:
0035 D3                SETB    C
0036 900000      R     MOV     DPTR,#size+01H
0039 E0                MOVX    A,@DPTR
003A 9F                SUBB    A,R7
003B 900000      R     MOV     DPTR,#size
003E E0                MOVX    A,@DPTR
003F 9E                SUBB    A,R6
0040 402B              JC      ?C0029
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0042 900000      R     MOV     DPTR,#buffer
0045 E0                MOVX    A,@DPTR
0046 FB                MOV     R3,A
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 FA                MOV     R2,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C 2F                ADD     A,R7
004D F9                MOV     R1,A
004E EA                MOV     A,R2
004F 3E                ADDC    A,R6
0050 FA                MOV     R2,A
0051 120000      E     LCALL   ?C?CLDPTR
0054 904720            MOV     DPTR,#04720H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0058 0F                INC     R7
0059 EF                MOV     A,R7
005A 7001              JNZ     ?C0064
005C 0E                INC     R6
005D         ?C0064:
005D 80D6              SJMP    ?C0025
                                           ; SOURCE LINE # 259
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 19  

005F         ?C0024:
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
005F 900000      R     MOV     DPTR,#status
0062 7409              MOV     A,#09H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
0065 8006              SJMP    ?C0029
0067         ?C0023:
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0067 900000      R     MOV     DPTR,#status
006A 7404              MOV     A,#04H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
006D         ?C0029:
                                           ; SOURCE LINE # 270
006D 900000      R     MOV     DPTR,#status
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
                                           ; SOURCE LINE # 271
0072         ?C0030:
0072 22                RET     
             ; FUNCTION _CySpcLoadRow (END)

             ; FUNCTION _CySpcLoadRowFull (BEGIN)
                                           ; SOURCE LINE # 304
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
0014 900000      R     MOV     DPTR,#status
0017 7407              MOV     A,#07H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
001A 904722            MOV     DPTR,#04722H
001D E0                MOVX    A,@DPTR
001E 5402              ANL     A,#02H
0020 7003              JNZ     $ + 5H
0022 020000      R     LJMP    ?C0031
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
0025 904720            MOV     DPTR,#04720H
0028 74B6              MOV     A,#0B6H
002A F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 20  

                                           ; SOURCE LINE # 318
002B 74D5              MOV     A,#0D5H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
002E 7402              MOV     A,#02H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
0031 904722            MOV     DPTR,#04722H
0034 E0                MOVX    A,@DPTR
0035 5402              ANL     A,#02H
0037 6003              JZ      $ + 5H
0039 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
003C 900000      R     MOV     DPTR,#array
003F E0                MOVX    A,@DPTR
0040 904720            MOV     DPTR,#04720H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
0044 E4                CLR     A
0045 900000      R     MOV     DPTR,#i
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
004B         ?C0033:
004B 900000      R     MOV     DPTR,#size
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#i
0056 E0                MOVX    A,@DPTR
0057 FC                MOV     R4,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A FD                MOV     R5,A
005B C3                CLR     C
005C 9F                SUBB    A,R7
005D EC                MOV     A,R4
005E 9E                SUBB    A,R6
005F 5026              JNC     ?C0034
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
0061 900000      R     MOV     DPTR,#buffer
0064 E0                MOVX    A,@DPTR
0065 FB                MOV     R3,A
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 FA                MOV     R2,A
0069 A3                INC     DPTR
006A E0                MOVX    A,@DPTR
006B 2D                ADD     A,R5
006C F9                MOV     R1,A
006D EA                MOV     A,R2
006E 3C                ADDC    A,R4
006F FA                MOV     R2,A
0070 120000      E     LCALL   ?C?CLDPTR
0073 904720            MOV     DPTR,#04720H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
0077 900000      R     MOV     DPTR,#i+01H
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 21  

007A E0                MOVX    A,@DPTR
007B 04                INC     A
007C F0                MOVX    @DPTR,A
007D 7006              JNZ     ?C0065
007F 900000      R     MOV     DPTR,#i
0082 E0                MOVX    A,@DPTR
0083 04                INC     A
0084 F0                MOVX    @DPTR,A
0085         ?C0065:
0085 80C4              SJMP    ?C0033
0087         ?C0034:
                                           ; SOURCE LINE # 380
0087 900000      R     MOV     DPTR,#size
008A E0                MOVX    A,@DPTR
008B 6401              XRL     A,#01H
008D 7002              JNZ     ?C0066
008F A3                INC     DPTR
0090 E0                MOVX    A,@DPTR
0091         ?C0066:
0091 6003              JZ      $ + 5H
0093 020000      R     LJMP    ?C0041
0096 900000      R     MOV     DPTR,#array
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B D3                SETB    C
009C 943F              SUBB    A,#03FH
009E 4003              JC      $ + 5H
00A0 020000      R     LJMP    ?C0041
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 384
00A3 7E00              MOV     R6,#00H
00A5 7C20              MOV     R4,#020H
00A7 7D00              MOV     R5,#00H
00A9 120000      E     LCALL   ?C?LIMUL
00AC E4                CLR     A
00AD 2F                ADD     A,R7
00AE FF                MOV     R7,A
00AF E4                CLR     A
00B0 3E                ADDC    A,R6
00B1 FE                MOV     R6,A
00B2 ED                MOV     A,R5
00B3 3408              ADDC    A,#08H
00B5 FD                MOV     R5,A
00B6 E4                CLR     A
00B7 3C                ADDC    A,R4
00B8 FC                MOV     R4,A
00B9 C004              PUSH    AR4
00BB A905              MOV     R1,AR5
00BD AA06              MOV     R2,AR6
00BF AB07              MOV     R3,AR7
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 FE                MOV     R6,A
00C4 A3                INC     DPTR
00C5 E0                MOVX    A,@DPTR
00C6 FF                MOV     R7,A
00C7 7C00              MOV     R4,#00H
00C9 7D20              MOV     R5,#020H
00CB 120000      E     LCALL   ?C?LIMUL
00CE D000              POP     AR0
00D0 EF                MOV     A,R7
00D1 2B                ADD     A,R3
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 22  

00D2 FF                MOV     R7,A
00D3 EE                MOV     A,R6
00D4 3A                ADDC    A,R2
00D5 FE                MOV     R6,A
00D6 ED                MOV     A,R5
00D7 39                ADDC    A,R1
00D8 FD                MOV     R5,A
00D9 EC                MOV     A,R4
00DA 38                ADDC    A,R0
00DB FC                MOV     R4,A
00DC 900000      R     MOV     DPTR,#offset
00DF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 386
00E2 E4                CLR     A
00E3 900000      R     MOV     DPTR,#i
00E6 F0                MOVX    @DPTR,A
00E7 A3                INC     DPTR
00E8 F0                MOVX    @DPTR,A
00E9         ?C0037:
00E9 900000      R     MOV     DPTR,#i
00EC E0                MOVX    A,@DPTR
00ED FE                MOV     R6,A
00EE A3                INC     DPTR
00EF E0                MOVX    A,@DPTR
00F0 FF                MOV     R7,A
00F1 C3                CLR     C
00F2 9420              SUBB    A,#020H
00F4 EE                MOV     A,R6
00F5 9400              SUBB    A,#00H
00F7 5044              JNC     ?C0041
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
00F9 E4                CLR     A
00FA FC                MOV     R4,A
00FB FD                MOV     R5,A
00FC A3                INC     DPTR
00FD E0                MOVX    A,@DPTR
00FE F8                MOV     R0,A
00FF A3                INC     DPTR
0100 E0                MOVX    A,@DPTR
0101 F9                MOV     R1,A
0102 A3                INC     DPTR
0103 E0                MOVX    A,@DPTR
0104 FA                MOV     R2,A
0105 A3                INC     DPTR
0106 E0                MOVX    A,@DPTR
0107 2F                ADD     A,R7
0108 FF                MOV     R7,A
0109 EA                MOV     A,R2
010A 3E                ADDC    A,R6
010B FE                MOV     R6,A
010C ED                MOV     A,R5
010D 39                ADDC    A,R1
010E FD                MOV     R5,A
010F EC                MOV     A,R4
0110 38                ADDC    A,R0
0111 A907              MOV     R1,AR7
0113 AA06              MOV     R2,AR6
0115 AB05              MOV     R3,AR5
0117 120000      E     LCALL   _cyread8
011A 904720            MOV     DPTR,#04720H
011D EF                MOV     A,R7
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 23  

011E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
011F 900000      R     MOV     DPTR,#i+01H
0122 E0                MOVX    A,@DPTR
0123 04                INC     A
0124 F0                MOVX    @DPTR,A
0125 7006              JNZ     ?C0067
0127 900000      R     MOV     DPTR,#i
012A E0                MOVX    A,@DPTR
012B 04                INC     A
012C F0                MOVX    @DPTR,A
012D         ?C0067:
012D 80BA              SJMP    ?C0037
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 400
012F         ?C0032:
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
012F 900000      R     MOV     DPTR,#status
0132 7409              MOV     A,#09H
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
0135 8006              SJMP    ?C0041
0137         ?C0031:
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
0137 900000      R     MOV     DPTR,#status
013A 7404              MOV     A,#04H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
013D         ?C0041:
                                           ; SOURCE LINE # 411
013D 900000      R     MOV     DPTR,#status
0140 E0                MOVX    A,@DPTR
0141 FF                MOV     R7,A
                                           ; SOURCE LINE # 412
0142         ?C0042:
0142 22                RET     
             ; FUNCTION _CySpcLoadRowFull (END)

             ; FUNCTION _CySpcWriteRow (BEGIN)
                                           ; SOURCE LINE # 440
0000 900000      R     MOV     DPTR,#address
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
;---- Variable 'array' assigned to Register 'R4' ----
0008 AC07              MOV     R4,AR7
;---- Variable 'tempPolarity' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
;---- Variable 'status' assigned to Register 'R5' ----
000A 7D07              MOV     R5,#07H
                                           ; SOURCE LINE # 446
000C 904722            MOV     DPTR,#04722H
000F E0                MOVX    A,@DPTR
0010 5402              ANL     A,#02H
0012 603B              JZ      ?C0043
                                           ; SOURCE LINE # 447
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 24  

                                           ; SOURCE LINE # 448
0014 904720            MOV     DPTR,#04720H
0017 74B6              MOV     A,#0B6H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
001A 74D8              MOV     A,#0D8H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
001D 7405              MOV     A,#05H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
0020 904722            MOV     DPTR,#04722H
0023 E0                MOVX    A,@DPTR
0024 5402              ANL     A,#02H
0026 7023              JNZ     ?C0044
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
0028 904720            MOV     DPTR,#04720H
002B EC                MOV     A,R4
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
002D 900000      R     MOV     DPTR,#address
0030 E0                MOVX    A,@DPTR
0031 904720            MOV     DPTR,#04720H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
0035 900000      R     MOV     DPTR,#address
0038 E0                MOVX    A,@DPTR
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B 904720            MOV     DPTR,#04720H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
003F EB                MOV     A,R3
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
0041 900000      R     MOV     DPTR,#tempMagnitude
0044 E0                MOVX    A,@DPTR
0045 904720            MOV     DPTR,#04720H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0049 8006              SJMP    ?C0046
004B         ?C0044:
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
004B 7D09              MOV     R5,#09H
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
004D 8002              SJMP    ?C0046
004F         ?C0043:
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
004F 7D04              MOV     R5,#04H
                                           ; SOURCE LINE # 469
0051         ?C0046:
                                           ; SOURCE LINE # 471
0051 AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 472
0053         ?C0047:
0053 22                RET     
             ; FUNCTION _CySpcWriteRow (END)

C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 25  

             ; FUNCTION _CySpcEraseSector (BEGIN)
                                           ; SOURCE LINE # 492
;---- Variable 'sectorNumber' assigned to Register 'R5' ----
;---- Variable 'array' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
;---- Variable 'status' assigned to Register 'R6' ----
0000 7E07              MOV     R6,#07H
                                           ; SOURCE LINE # 497
0002 904722            MOV     DPTR,#04722H
0005 E0                MOVX    A,@DPTR
0006 5402              ANL     A,#02H
0008 6021              JZ      ?C0048
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
000A 904720            MOV     DPTR,#04720H
000D 74B6              MOV     A,#0B6H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
0010 74DB              MOV     A,#0DBH
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
0013 7408              MOV     A,#08H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 504
0016 904722            MOV     DPTR,#04722H
0019 E0                MOVX    A,@DPTR
001A 5402              ANL     A,#02H
001C 7009              JNZ     ?C0049
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
001E 904720            MOV     DPTR,#04720H
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
0023 ED                MOV     A,R5
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0025 8006              SJMP    ?C0051
0027         ?C0049:
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0027 7E09              MOV     R6,#09H
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
0029 8002              SJMP    ?C0051
002B         ?C0048:
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
002B 7E04              MOV     R6,#04H
                                           ; SOURCE LINE # 517
002D         ?C0051:
                                           ; SOURCE LINE # 519
002D AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 520
002F         ?C0052:
002F 22                RET     
             ; FUNCTION _CySpcEraseSector (END)

             ; FUNCTION _CySpcGetTemp (BEGIN)
                                           ; SOURCE LINE # 545
;---- Variable 'numSamples' assigned to Register 'R7' ----
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 26  

                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
;---- Variable 'status' assigned to Register 'R6' ----
0000 7E07              MOV     R6,#07H
                                           ; SOURCE LINE # 550
0002 904722            MOV     DPTR,#04722H
0005 E0                MOVX    A,@DPTR
0006 5402              ANL     A,#02H
0008 601F              JZ      ?C0053
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
000A 904720            MOV     DPTR,#04720H
000D 74B6              MOV     A,#0B6H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0010 74E1              MOV     A,#0E1H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0013 740E              MOV     A,#0EH
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
0016 904722            MOV     DPTR,#04722H
0019 E0                MOVX    A,@DPTR
001A 5402              ANL     A,#02H
001C 7007              JNZ     ?C0054
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
001E 904720            MOV     DPTR,#04720H
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0023 8006              SJMP    ?C0056
0025         ?C0054:
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
0025 7E09              MOV     R6,#09H
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
0027 8002              SJMP    ?C0056
0029         ?C0053:
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0029 7E04              MOV     R6,#04H
                                           ; SOURCE LINE # 569
002B         ?C0056:
                                           ; SOURCE LINE # 571
002B AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 572
002D         ?C0057:
002D 22                RET     
             ; FUNCTION _CySpcGetTemp (END)

             ; FUNCTION CySpcLock (BEGIN)
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
0000 900000      R     MOV     DPTR,#status
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
0006 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 27  

                                           ; SOURCE LINE # 594
0009 900000      R     MOV     DPTR,#SpcLockState
000C E0                MOVX    A,@DPTR
000D 7007              JNZ     ?C0058
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
000F 04                INC     A
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
0011 E4                CLR     A
0012 900000      R     MOV     DPTR,#status
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 615
0016         ?C0058:
                                           ; SOURCE LINE # 618
0016 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 620
0019 900000      R     MOV     DPTR,#status
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
                                           ; SOURCE LINE # 621
001E         ?C0059:
001E 22                RET     
             ; FUNCTION CySpcLock (END)

             ; FUNCTION CySpcUnlock (BEGIN)
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 636
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 639
0003 E4                CLR     A
0004 900000      R     MOV     DPTR,#SpcLockState
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
0008 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 660
000B 22                RET     
             ; FUNCTION CySpcUnlock (END)

             ; FUNCTION CySpcGetAlgorithm (BEGIN)
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
;---- Variable 'status' assigned to Register 'R7' ----
0000 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 678
0002 904722            MOV     DPTR,#04722H
0005 E0                MOVX    A,@DPTR
0006 5402              ANL     A,#02H
0008 600E              JZ      ?C0061
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
000A 904720            MOV     DPTR,#04720H
000D 74B6              MOV     A,#0B6H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
0010 74E0              MOV     A,#0E0H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
0013 740D              MOV     A,#0DH
C51 COMPILER V9.51   CYSPC                                                                 02/07/2017 16:12:21 PAGE 28  

0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
0016 8002              SJMP    ?C0062
0018         ?C0061:
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
0018 7F04              MOV     R7,#04H
                                           ; SOURCE LINE # 687
001A         ?C0062:
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
001A         ?C0063:
001A 22                RET     
             ; FUNCTION CySpcGetAlgorithm (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    991    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      40
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
