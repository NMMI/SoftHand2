C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE BOOTLOADABLE
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\Bootloadable.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\Bootloadable.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDE
                    -BUG) WL(2) PR(.\DP8051_Keil_951\Release/Bootloadable.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\Bootloadable.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /****************************************************************************//**
   2          * \file Bootloadable.c
   3          * \version 1.50
   4          *
   5          * \brief
   6          *   Provides an API for the Bootloadable application.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "Bootloadable.h"
  17          
  18          /**
  19           \defgroup functions_group Functions
  20           @{
  21          */
  22          
  23          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
              static cystatus Bootloadable_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLARGE \
                                             ;
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
  27          
  28          /*******************************************************************************
  29          * Function Name: Bootloadable_Load
  30          ****************************************************************************//**
  31          *
  32          * \brief
  33          *  Schedules the Bootloader/Launcher to be launched and then performs
  34          *  a software reset to launch it
  35          *
  36          * \return
  37          *  This method will never return. It will load a new application and reset
  38          *  the device.
  39          *
  40          *******************************************************************************/
  41          void Bootloadable_Load(void) 
  42          {
  43   1          /* Schedule Bootloader to start after reset */
  44   1          Bootloadable_SET_RUN_TYPE(Bootloadable_SCHEDULE_BTLDR);
  45   1      
  46   1          CySoftwareReset();
  47   1      }
  48          
  49          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
              /*******************************************************************************
              * Function Name: Bootloadable_GetActiveApplication
              ****************************************************************************//**
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 2   

              *
              * \brief
              *   Gets the application which will be loaded after a next reset event.
              *   NOTE Intended for the combination project type ONLY!
              *
              * \return 
              *  A number of the current active application set in the metadata section.
              *  \n  0 - app#0 is set as active.
              *  \n  1 - app#1 is set as active.
              *
              * \note If neither of the applications is set active, then the API returns 0x02.
              *
              *******************************************************************************/
              uint8 Bootloadable_GetActiveApplication(void) CYSMALL \
                                        
              {   
                  uint8 result = Bootloadable_MD_BTLDB_ACTIVE_NONE;
                  
                  if (0u != Bootloadable_GET_CODE_DATA( \
                            Bootloadable_MD_BTLDB_ACTIVE_OFFSET(Bootloadable_MD_BTLDB_ACTIVE_0))) 
                  {
                      result = Bootloadable_MD_BTLDB_ACTIVE_0;
                  }
                  else if (0u != Bootloadable_GET_CODE_DATA( \
                                 Bootloadable_MD_BTLDB_ACTIVE_OFFSET(Bootloadable_MD_BTLDB_ACTIVE_1)))
                  {
                      result = Bootloadable_MD_BTLDB_ACTIVE_1;    
                  }
                  else
                  {
                      /*Do nothing, result is none*/
                  }
                  
                  return (result);
              }
              
              /*******************************************************************************
              * Function Name: Bootloadable_SetActiveApplication
              ****************************************************************************//**
              *
              * \brief 
              *   Sets the application which will be loaded after a next reset event.          
              *   
              * \details
              * Theory: 
              *   This API sets in the Flash (metadata section) the given active application 
              *   number.
              *          
              *   NOTE The active application number is not set directly, but the boolean 
              *   mark instead means that the application is active or not for the relative 
              *   metadata. Both metadata sections are updated. For example, if the second 
              *   application is to be set active, then in the metadata section for the first 
              *   application there will be a "0" written, which means that it is not active, and 
              *   for the second metadata section there will be a "1" written, which means that it is 
              *   active. 
              *
              *   NOTE Intended for the combination project type ONLY!
              *
              * \param appId  
              *   The active application number to be written to flash (metadata section) 
              *   NOTE Possible values are:
              *   0 - for the first application
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 3   

              *   1 - for the second application.
              *   Any other number is considered invalid. 
              *
              * \return 
              *   A status of writing to flash operation.
              *   \n CYRET_SUCCESS - Returned if appId was successfully changed. 
              *   \n CYRET_BAD_PARAM - Returned if the parameter appID passed to the function has the 
              *                       same value as the active application ID. 
              *   \note - The other non-zero value is considered as a failure during writing to flash.  
              *
              *   \note - This API does not update Bootloader_activeApp variable.
              *
              *******************************************************************************/
              cystatus Bootloadable_SetActiveApplication(uint8 appId) CYSMALL \
                              
              {
                  cystatus result = CYRET_SUCCESS;
              
                  uint8 CYDATA idx;
                  
                  /* If invalid application number */
                  if (appId > Bootloadable_MD_BTLDB_ACTIVE_1)
                  {
                      result = CYRET_BAD_PARAM;
                  }
                  else
                  {
                      /* If appID has same value as active application ID */
                      if (1u == Bootloadable_GET_CODE_DATA(Bootloadable_MD_BTLDB_ACTIVE_OFFSET(appId)))
                      {
                          result = CYRET_BAD_PARAM;
                      }
                      else
                      {
                          /* Updating metadata section */
                          for(idx = 0u; idx < Bootloadable_MAX_NUM_OF_BTLDB; idx++)
                          {
                              result |= Bootloadable_WriteFlashByte((uint32) Bootloadable_MD_BTLDB_ACTIVE_OFFSET(idx), \
                                                                                                          (uint8)(idx ==
             - appId));
                          }
                      }
                  }
                  
                  return (result);
              }
              
              /*******************************************************************************
              * Function Name: Bootloadable_WriteFlashByte
              ****************************************************************************//**
              *
              * \brief 
              *   This API writes to flash the specified data.
              *
              * \param address 
              *   The address in flash.
              *
              * \param inputValue 
              *   One-byte data.
              *
              * \return 
              *   A status of the writing to flash procedure.
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 4   

              *
              *******************************************************************************/
              static cystatus Bootloadable_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLARGE \
                                             
              {
                  cystatus result = CYRET_SUCCESS;
                  uint32 flsAddr = address - CYDEV_FLASH_BASE;
                  uint8  rowData[CYDEV_FLS_ROW_SIZE];
              
                  #if !(CY_PSOC4)
                      uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
                  #endif  /* !(CY_PSOC4) */
              
                  #if (CY_PSOC4)
                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
                  #else
                      uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
                  #endif  /* (CY_PSOC4) */
              
                  uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
                  uint16 idx;
              
                  for(idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
                  {
                      rowData[idx] = (uint8)Bootloadable_GET_CODE_DATA(baseAddr + idx);
                  }
              
                  rowData[address % CYDEV_FLS_ROW_SIZE] = inputValue;
              
                  #if(CY_PSOC4)
                      result = CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
                      result = CyWriteRowData(arrayId, rowNum, rowData);
                  #endif  /* (CY_PSOC4) */
              
                  #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing to flash, data in the instruction cache can become stale.
                      * Therefore, the cache data does not correlate to the data just written to
                      * flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
                  return (result);
              }
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
 223          /** @} functions_group */
 224          
 225          /*******************************************************************************
 226          * The following code is OBSOLETE and must not be used.
 227          *******************************************************************************/
 228          void Bootloadable_SetFlashByte(uint32 address, uint8 runType) 
 229          {
 230   1          uint32 flsAddr = address - CYDEV_FLASH_BASE;
 231   1          uint8  rowData[CYDEV_FLS_ROW_SIZE];
 232   1      
 233   1          #if !(CY_PSOC4)
 234   1              uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
 235   1          #endif  /* !(CY_PSOC4) */
 236   1      
 237   1          #if (CY_PSOC4)
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 5   

                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
                  #else
 240   1              uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
 241   1          #endif  /* (CY_PSOC4) */
 242   1      
 243   1          uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
 244   1          uint16 idx;
 245   1      
 246   1      
 247   1          for (idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
 248   1          {
 249   2              rowData[idx] = Bootloadable_GET_CODE_DATA(baseAddr + idx);
 250   2          }
 251   1          rowData[address % CYDEV_FLS_ROW_SIZE] = runType;
 252   1      
 253   1          #if(CY_PSOC4)
                      (void) CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
 256   1              (void) CyWriteRowData(arrayId, rowNum, rowData);
 257   1          #endif  /* (CY_PSOC4) */
 258   1      
 259   1          #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing to flash, data in the instruction cache can become obsolete.
                      * Therefore, the cache data does not correlate to the data just written to
                      * flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
 268   1      }
 269          
 270          /* [] END OF FILE */
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Bootloadable_Load (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 44
0000 9046FA            MOV     DPTR,#046FAH
0003 7440              MOV     A,#040H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 47
0009 22                RET     
             ; FUNCTION Bootloadable_Load (END)

             ; FUNCTION _Bootloadable_SetFlashByte (BEGIN)
                                           ; SOURCE LINE # 228
0000 900000      R     MOV     DPTR,#address
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0006 900000      R     MOV     DPTR,#address
0009 E0                MOVX    A,@DPTR
000A FC                MOV     R4,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D FD                MOV     R5,A
000E A3                INC     DPTR
000F E0                MOVX    A,@DPTR
0010 FE                MOV     R6,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 2400              ADD     A,#00H
0015 FF                MOV     R7,A
0016 E4                CLR     A
0017 3E                ADDC    A,R6
0018 FE                MOV     R6,A
0019 ED                MOV     A,R5
001A 34F0              ADDC    A,#0F0H
001C FD                MOV     R5,A
001D EC                MOV     A,R4
001E 34FF              ADDC    A,#0FFH
0020 FC                MOV     R4,A
0021 900000      R     MOV     DPTR,#flsAddr
0024 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 234
0027 E4                CLR     A
0028 FB                MOV     R3,A
0029 FA                MOV     R2,A
002A 7901              MOV     R1,#01H
002C F8                MOV     R0,A
002D 900000      R     MOV     DPTR,#flsAddr
0030 E0                MOVX    A,@DPTR
0031 FC                MOV     R4,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 FD                MOV     R5,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FE                MOV     R6,A
0038 A3                INC     DPTR
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 7   

0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 120000      E     LCALL   ?C?ULDIV
003E 900000      R     MOV     DPTR,#arrayId
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0043 900000      R     MOV     DPTR,#flsAddr
0046 E0                MOVX    A,@DPTR
0047 FC                MOV     R4,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FD                MOV     R5,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EE                MOV     A,R6
0052 E4                CLR     A
0053 FD                MOV     R5,A
0054 FC                MOV     R4,A
0055 FB                MOV     R3,A
0056 7A01              MOV     R2,#01H
0058 F9                MOV     R1,A
0059 F8                MOV     R0,A
005A 120000      E     LCALL   ?C?ULDIV
005D 900000      R     MOV     DPTR,#rowNum
0060 EE                MOV     A,R6
0061 F0                MOVX    @DPTR,A
0062 A3                INC     DPTR
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0065 900000      R     MOV     DPTR,#address
0068 E0                MOVX    A,@DPTR
0069 FC                MOV     R4,A
006A A3                INC     DPTR
006B E0                MOVX    A,@DPTR
006C FD                MOV     R5,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 FB                MOV     R3,A
0073 E4                CLR     A
0074 900000      R     MOV     DPTR,#address
0077 E0                MOVX    A,@DPTR
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C A3                INC     DPTR
007D E0                MOVX    A,@DPTR
007E C3                CLR     C
007F 9B                SUBB    A,R3
0080 FF                MOV     R7,A
0081 EE                MOV     A,R6
0082 9400              SUBB    A,#00H
0084 FE                MOV     R6,A
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 8   

0085 ED                MOV     A,R5
0086 9400              SUBB    A,#00H
0088 FD                MOV     R5,A
0089 EC                MOV     A,R4
008A 9400              SUBB    A,#00H
008C FC                MOV     R4,A
008D 900000      R     MOV     DPTR,#baseAddr
0090 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 247
;---- Variable 'idx' assigned to Register 'R2/R3' ----
0093 E4                CLR     A
0094 FB                MOV     R3,A
0095 FA                MOV     R2,A
0096         ?C0002:
0096 C3                CLR     C
0097 EA                MOV     A,R2
0098 9401              SUBB    A,#01H
009A 5029              JNC     ?C0003
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
009C 900000      R     MOV     DPTR,#baseAddr
009F E0                MOVX    A,@DPTR
00A0 A3                INC     DPTR
00A1 E0                MOVX    A,@DPTR
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 FE                MOV     R6,A
00A5 A3                INC     DPTR
00A6 E0                MOVX    A,@DPTR
00A7 2B                ADD     A,R3
00A8 FF                MOV     R7,A
00A9 EE                MOV     A,R6
00AA 3A                ADDC    A,R2
00AB 8F82              MOV     DPL,R7
00AD F583              MOV     DPH,A
00AF E4                CLR     A
00B0 93                MOVC    A,@A+DPTR
00B1 FF                MOV     R7,A
00B2 7400        R     MOV     A,#LOW rowData
00B4 2B                ADD     A,R3
00B5 F582              MOV     DPL,A
00B7 7400        R     MOV     A,#HIGH rowData
00B9 3A                ADDC    A,R2
00BA F583              MOV     DPH,A
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
00BE 0B                INC     R3
00BF EB                MOV     A,R3
00C0 7001              JNZ     ?C0006
00C2 0A                INC     R2
00C3         ?C0006:
00C3 80D1              SJMP    ?C0002
00C5         ?C0003:
                                           ; SOURCE LINE # 251
00C5 900000      R     MOV     DPTR,#runType
00C8 E0                MOVX    A,@DPTR
00C9 FB                MOV     R3,A
00CA 900000      R     MOV     DPTR,#address
00CD E0                MOVX    A,@DPTR
00CE FC                MOV     R4,A
00CF A3                INC     DPTR
C51 COMPILER V9.51   BOOTLOADABLE                                                          02/07/2017 16:12:18 PAGE 9   

00D0 E0                MOVX    A,@DPTR
00D1 FD                MOV     R5,A
00D2 A3                INC     DPTR
00D3 E0                MOVX    A,@DPTR
00D4 FE                MOV     R6,A
00D5 A3                INC     DPTR
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 E4                CLR     A
00D9 FE                MOV     R6,A
00DA 7400        R     MOV     A,#LOW rowData
00DC 2F                ADD     A,R7
00DD F582              MOV     DPL,A
00DF EE                MOV     A,R6
00E0 3400        R     ADDC    A,#HIGH rowData
00E2 F583              MOV     DPH,A
00E4 EB                MOV     A,R3
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
00E6 900000      R     MOV     DPTR,#arrayId
00E9 E0                MOVX    A,@DPTR
00EA FF                MOV     R7,A
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED FC                MOV     R4,A
00EE A3                INC     DPTR
00EF E0                MOVX    A,@DPTR
00F0 FD                MOV     R5,A
00F1 7B01              MOV     R3,#01H
00F3 7A00        R     MOV     R2,#HIGH rowData
00F5 7900        R     MOV     R1,#LOW rowData
00F7 120000      E     LCALL   _CyWriteRowData
                                           ; SOURCE LINE # 268
00FA 22                RET     
             ; FUNCTION _Bootloadable_SetFlashByte (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    261    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     272
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
