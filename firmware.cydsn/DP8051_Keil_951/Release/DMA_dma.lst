C51 COMPILER V9.51   DMA_DMA                                                               02/07/2017 16:12:22 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DMA_DMA
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Release\DMA_dma.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\DMA_dma.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(NDEBUG) 
                    -WL(2) PR(.\DP8051_Keil_951\Release/DMA_dma.lst) CD OT(8,SPEED) OJ(.\DP8051_Keil_951\Release\DMA_dma.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /***************************************************************************
   2          * File Name: DMA_dma.c  
   3          * Version 1.70
   4          *
   5          *  Description:
   6          *   Provides an API for the DMAC component. The API includes functions
   7          *   for the DMA controller, DMA channels and Transfer Descriptors.
   8          *
   9          *
  10          *   Note:
  11          *     This module requires the developer to finish or fill in the auto
  12          *     generated funcions and setup the dma channel and TD's.
  13          *
  14          ********************************************************************************
  15          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  16          * You may use this file only in accordance with the license, terms, conditions, 
  17          * disclaimers, and limitations in the end user license agreement accompanying 
  18          * the software package with which this file was provided.
  19          ********************************************************************************/
  20          #include <CYLIB.H>
  21          #include <CYDMAC.H>
  22          #include <DMA_dma.H>
  23          
  24          
  25          
  26          /****************************************************************************
  27          * 
  28          * The following defines are available in Cyfitter.h
  29          * 
  30          * 
  31          * 
  32          * DMA__DRQ_CTL_REG
  33          * 
  34          * 
  35          * DMA__DRQ_NUMBER
  36          * 
  37          * Number of TD's used by this channel.
  38          * DMA__NUMBEROF_TDS
  39          * 
  40          * Priority of this channel.
  41          * DMA__PRIORITY
  42          * 
  43          * True if DMA_TERMIN_SEL is used.
  44          * DMA__TERMIN_EN
  45          * 
  46          * TERMIN interrupt line to signal terminate.
  47          * DMA__TERMIN_SEL
  48          * 
  49          * 
  50          * True if DMA_TERMOUT0_SEL is used.
  51          * DMA__TERMOUT0_EN
  52          * 
C51 COMPILER V9.51   DMA_DMA                                                               02/07/2017 16:12:22 PAGE 2   

  53          * 
  54          * TERMOUT0 interrupt line to signal completion.
  55          * DMA__TERMOUT0_SEL
  56          * 
  57          * 
  58          * True if DMA_TERMOUT1_SEL is used.
  59          * DMA__TERMOUT1_EN
  60          * 
  61          * 
  62          * TERMOUT1 interrupt line to signal completion.
  63          * DMA__TERMOUT1_SEL
  64          * 
  65          ****************************************************************************/
  66          
  67          
  68          /* Zero based index of DMA dma channel */
  69          uint8 DMA_DmaHandle = DMA_INVALID_CHANNEL;
  70          
  71          /*********************************************************************
  72          * Function Name: uint8 DMA_DmaInitalize
  73          **********************************************************************
  74          * Summary:
  75          *   Allocates and initialises a channel of the DMAC to be used by the
  76          *   caller.
  77          *
  78          * Parameters:
  79          *   BurstCount.
  80          *       
  81          *       
  82          *   ReqestPerBurst.
  83          *       
  84          *       
  85          *   UpperSrcAddress.
  86          *       
  87          *       
  88          *   UpperDestAddress.
  89          *       
  90          *
  91          * Return:
  92          *   The channel that can be used by the caller for DMA activity.
  93          *   DMA_INVALID_CHANNEL (0xFF) if there are no channels left. 
  94          *
  95          *
  96          *******************************************************************/
  97          uint8 DMA_DmaInitialize(uint8 BurstCount, uint8 ReqestPerBurst, uint16 UpperSrcAddress, uint16 UpperDestAd
             -dress) 
  98          {
  99   1      
 100   1          /* Allocate a DMA channel. */
 101   1          DMA_DmaHandle = (uint8)DMA__DRQ_NUMBER;
 102   1      
 103   1          /* Configure the channel. */
 104   1          (void)CyDmaChSetConfiguration(DMA_DmaHandle,
 105   1                                        BurstCount,
 106   1                                        ReqestPerBurst,
 107   1                                        (uint8)DMA__TERMOUT0_SEL,
 108   1                                        (uint8)DMA__TERMOUT1_SEL,
 109   1                                        (uint8)DMA__TERMIN_SEL);
 110   1      
 111   1          /* Set the extended address for the transfers */
 112   1          (void)CyDmaChSetExtendedAddress(DMA_DmaHandle, UpperSrcAddress, UpperDestAddress);
 113   1      
C51 COMPILER V9.51   DMA_DMA                                                               02/07/2017 16:12:22 PAGE 3   

 114   1          /* Set the priority for this channel */
 115   1          (void)CyDmaChPriority(DMA_DmaHandle, (uint8)DMA__PRIORITY);
 116   1          
 117   1          return DMA_DmaHandle;
 118   1      }
 119          
 120          /*********************************************************************
 121          * Function Name: void DMA_DmaRelease
 122          **********************************************************************
 123          * Summary:
 124          *   Frees the channel associated with DMA.
 125          *
 126          *
 127          * Parameters:
 128          *   void.
 129          *
 130          *
 131          *
 132          * Return:
 133          *   void.
 134          *
 135          *******************************************************************/
 136          void DMA_DmaRelease(void) 
 137          {
 138   1          /* Disable the channel */
 139   1          (void)CyDmaChDisable(DMA_DmaHandle);
 140   1      }
 141          
C51 COMPILER V9.51   DMA_DMA                                                               02/07/2017 16:12:22 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _DMA_DmaInitialize (BEGIN)
                                           ; SOURCE LINE # 97
0000 900000      R     MOV     DPTR,#UpperSrcAddress
0003 EA                MOV     A,R2
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
;---- Variable 'ReqestPerBurst' assigned to Register 'R6' ----
0008 AE05              MOV     R6,AR5
;---- Variable 'BurstCount' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 101
000A 900000      R     MOV     DPTR,#DMA_DmaHandle
000D 740A              MOV     A,#0AH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0010 AD07              MOV     R5,AR7
0012 AF06              MOV     R7,AR6
0014 AB07              MOV     R3,AR7
0016 900000      E     MOV     DPTR,#?_CyDmaChSetConfiguration?BYTE+03H
0019 F0                MOVX    @DPTR,A
001A E4                CLR     A
001B A3                INC     DPTR
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E F0                MOVX    @DPTR,A
001F 7F0A              MOV     R7,#0AH
0021 120000      E     LCALL   _CyDmaChSetConfiguration
                                           ; SOURCE LINE # 112
0024 900000      R     MOV     DPTR,#DMA_DmaHandle
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 900000      R     MOV     DPTR,#UpperSrcAddress
002C E0                MOVX    A,@DPTR
002D FC                MOV     R4,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 FD                MOV     R5,A
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 FA                MOV     R2,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 FB                MOV     R3,A
0037 120000      E     LCALL   _CyDmaChSetExtendedAddress
                                           ; SOURCE LINE # 115
003A 900000      R     MOV     DPTR,#DMA_DmaHandle
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 7D02              MOV     R5,#02H
0041 120000      E     LCALL   _CyDmaChPriority
                                           ; SOURCE LINE # 117
0044 900000      R     MOV     DPTR,#DMA_DmaHandle
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
                                           ; SOURCE LINE # 118
0049         ?C0001:
0049 22                RET     
C51 COMPILER V9.51   DMA_DMA                                                               02/07/2017 16:12:22 PAGE 5   

             ; FUNCTION _DMA_DmaInitialize (END)

             ; FUNCTION DMA_DmaRelease (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
0000 900000      R     MOV     DPTR,#DMA_DmaHandle
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      E     LCALL   _CyDmaChDisable
                                           ; SOURCE LINE # 140
0008 22                RET     
             ; FUNCTION DMA_DmaRelease (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     83    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
